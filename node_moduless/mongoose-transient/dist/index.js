"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transient = void 0;
var transient = function (schema) {
    schema.eachPath(function (path, type) {
        var options = getTypeOpts(type);
        var _a = options.transient, trans = _a === void 0 ? false : _a, defaultValue = options.default;
        if (trans) {
            var opts = setOptions(path, trans);
            schema.remove(path);
            linkPaths(schema, opts);
            schema.virtual(path).get(getter(opts, defaultValue)).set(setter(opts));
        }
    });
};
exports.transient = transient;
var getTypeOpts = function (_a) {
    var options = _a.options;
    return options;
};
var linkPaths = function (schema, opts) {
    function link(value) {
        setter(opts).call(this, value);
        return value;
    }
    opts.linkTo.forEach(function (linkTo) {
        try {
            schema.path(linkTo).set(link);
        }
        catch (_a) {
            throw new Error("TransientError: Attempting to link transient property '" + opts.path + "' to '" + linkTo + "' which does not exist or is itself transient");
        }
    });
};
var getter = function (opts, defaultValue) {
    return function () {
        var _a;
        var self = this;
        var result = (_a = opts.get).call.apply(_a, __spreadArray([this, self[opts.as]], opts.args));
        return result !== null && result !== void 0 ? result : defaultValue;
    };
};
var setter = function (opts) {
    return function (value) {
        var _a;
        var self = this;
        var result = (_a = opts.set).call.apply(_a, __spreadArray([this, value], opts.args));
        self[opts.as] = result;
    };
};
var setOptions = function (path, trans) {
    var as = determinePropertyName(path, trans);
    var linkTo = determineLinkTo(trans);
    var get = determineGetter(trans);
    var set = determineSetter(trans);
    var args = determineArgs(trans);
    return {
        linkTo: linkTo,
        path: path,
        args: args,
        as: as,
        get: get,
        set: set,
    };
};
var determineLinkTo = function (trans) {
    return isTransientOptions(trans) && trans.linkTo ? asArray(trans.linkTo) : [];
};
var determineArgs = function (trans) {
    return isTransientOptions(trans) && Array.isArray(trans.args) ? trans.args : [];
};
var determineGetter = function (trans) {
    return isTransientOptions(trans) && isFunction(trans.get) ? trans.get : defaultCaller;
};
var determineSetter = function (trans) {
    return isFunction(trans)
        ? trans
        : isTransientOptions(trans) && isFunction(trans.set)
            ? trans.set
            : defaultCaller;
};
var defaultCaller = function (value) { return value; };
var determinePropertyName = function (path, trans) {
    return isString(trans)
        ? trans
        : isTransientOptions(trans) && isString(trans.as)
            ? trans.as
            : "_" + path;
};
var asArray = function (value) { return (Array.isArray(value) ? value : [value]); };
var isFunction = function (value) {
    return typeof value === 'function';
};
var isString = function (value) { return typeof value === 'string'; };
var isTransientOptions = function (value) {
    return value && !Array.isArray(value) && typeof value === 'object';
};
exports.default = exports.transient;
//# sourceMappingURL=index.js.map