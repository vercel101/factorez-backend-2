{"version":3,"file":"index.js","mappings":"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","sources":["webpack://shoewebsite/./src/controllers/adminController.js","webpack://shoewebsite/./src/controllers/adminDashboard.js","webpack://shoewebsite/./src/controllers/brandController.js","webpack://shoewebsite/./src/controllers/businessController.js","webpack://shoewebsite/./src/controllers/cancelReasonController.js","webpack://shoewebsite/./src/controllers/cartController.js","webpack://shoewebsite/./src/controllers/categoryController.js","webpack://shoewebsite/./src/controllers/colorController.js","webpack://shoewebsite/./src/controllers/couponCodeController.js","webpack://shoewebsite/./src/controllers/customerAddressController.js","webpack://shoewebsite/./src/controllers/customerController.js","webpack://shoewebsite/./src/controllers/dashboardController.js","webpack://shoewebsite/./src/controllers/excelFileController.js","webpack://shoewebsite/./src/controllers/homepageController.js","webpack://shoewebsite/./src/controllers/idGeneratorController.js","webpack://shoewebsite/./src/controllers/imageController.js","webpack://shoewebsite/./src/controllers/invoiceController.js","webpack://shoewebsite/./src/controllers/orderController.js","webpack://shoewebsite/./src/controllers/orderStatusTableController.js","webpack://shoewebsite/./src/controllers/otpController.js","webpack://shoewebsite/./src/controllers/paymentController.js","webpack://shoewebsite/./src/controllers/productController.js","webpack://shoewebsite/./src/controllers/profileController.js","webpack://shoewebsite/./src/controllers/questionController.js","webpack://shoewebsite/./src/controllers/reportController.js","webpack://shoewebsite/./src/controllers/vendorController.js","webpack://shoewebsite/./src/controllers/wishlistController.js","webpack://shoewebsite/./src/middlewares/auth.js","webpack://shoewebsite/./src/middlewares/config.js","webpack://shoewebsite/./src/middlewares/firebase.js","webpack://shoewebsite/./src/middlewares/roleAuth.js","webpack://shoewebsite/./src/models/HomepageModel.js","webpack://shoewebsite/./src/models/adminModel.js","webpack://shoewebsite/./src/models/bankModel.js","webpack://shoewebsite/./src/models/bannerModel.js","webpack://shoewebsite/./src/models/brandModel.js","webpack://shoewebsite/./src/models/businessModel.js","webpack://shoewebsite/./src/models/cancelledReasonModel.js","webpack://shoewebsite/./src/models/cartModel.js","webpack://shoewebsite/./src/models/categoryModel.js","webpack://shoewebsite/./src/models/colorModel.js","webpack://shoewebsite/./src/models/couponCodeModel.js","webpack://shoewebsite/./src/models/customerAddressModel.js","webpack://shoewebsite/./src/models/customerModel.js","webpack://shoewebsite/./src/models/documentModel.js","webpack://shoewebsite/./src/models/invoiceModel.js","webpack://shoewebsite/./src/models/invoiceNoModel.js","webpack://shoewebsite/./src/models/orderModel.js","webpack://shoewebsite/./src/models/orderStatusTableModel.js","webpack://shoewebsite/./src/models/orderedProductModel.js","webpack://shoewebsite/./src/models/paymentModel.js","webpack://shoewebsite/./src/models/productModel.js","webpack://shoewebsite/./src/models/questionModel.js","webpack://shoewebsite/./src/models/subcategoryModel.js","webpack://shoewebsite/./src/models/vendorModel.js","webpack://shoewebsite/./src/models/wishlistModel.js","webpack://shoewebsite/./src/routes/adminDashboardRoute.js","webpack://shoewebsite/./src/routes/adminRoutes.js","webpack://shoewebsite/./src/routes/brandRoutes.js","webpack://shoewebsite/./src/routes/businessRoutes.js","webpack://shoewebsite/./src/routes/cartRoutes.js","webpack://shoewebsite/./src/routes/categoryRoutes.js","webpack://shoewebsite/./src/routes/colorRoutes.js","webpack://shoewebsite/./src/routes/couponCodeRoutes.js","webpack://shoewebsite/./src/routes/customerRoutes.js","webpack://shoewebsite/./src/routes/dashboardRoutes.js","webpack://shoewebsite/./src/routes/homepageRoutes.js","webpack://shoewebsite/./src/routes/invoiceRoutes.js","webpack://shoewebsite/./src/routes/orderRoutes.js","webpack://shoewebsite/./src/routes/orderStatusTableRoutes.js","webpack://shoewebsite/./src/routes/otpRoutes.js","webpack://shoewebsite/./src/routes/paymentRoutes.js","webpack://shoewebsite/./src/routes/productRoutes.js","webpack://shoewebsite/./src/routes/profileRoutes.js","webpack://shoewebsite/./src/routes/questionsRoutes.js","webpack://shoewebsite/./src/routes/reportRoutes.js","webpack://shoewebsite/./src/routes/vendorRoutes.js","webpack://shoewebsite/./src/routes/wishlistRoutes.js","webpack://shoewebsite/./src/utils/couponExpireUtil.js","webpack://shoewebsite/./src/utils/dateUtils.js","webpack://shoewebsite/./src/utils/enums.js","webpack://shoewebsite/./src/utils/generatePdf.js","webpack://shoewebsite/./src/utils/getFinancialYear.js","webpack://shoewebsite/./src/utils/percentage.js","webpack://shoewebsite/./src/utils/stateNameAndCode.js","webpack://shoewebsite/./src/utils/utils.js","webpack://shoewebsite/external commonjs \"aws-sdk\"","webpack://shoewebsite/external commonjs \"aws-sdk/lib/maintenance_mode_message\"","webpack://shoewebsite/external commonjs \"bcrypt\"","webpack://shoewebsite/external commonjs \"body-parser\"","webpack://shoewebsite/external commonjs \"convert-csv-to-json\"","webpack://shoewebsite/external commonjs \"cors\"","webpack://shoewebsite/external commonjs \"csvtojson\"","webpack://shoewebsite/external commonjs \"dotenv\"","webpack://shoewebsite/external commonjs \"exceljs\"","webpack://shoewebsite/external commonjs \"express\"","webpack://shoewebsite/external commonjs \"express-fileupload\"","webpack://shoewebsite/external commonjs \"firebase/app\"","webpack://shoewebsite/external commonjs \"firebase/storage\"","webpack://shoewebsite/external commonjs \"handlebars\"","webpack://shoewebsite/external commonjs \"jsonwebtoken\"","webpack://shoewebsite/external commonjs \"mongoose\"","webpack://shoewebsite/external commonjs \"puppeteer\"","webpack://shoewebsite/external commonjs \"request\"","webpack://shoewebsite/external commonjs \"slugify\"","webpack://shoewebsite/external commonjs \"twilio\"","webpack://shoewebsite/external node-commonjs \"fs\"","webpack://shoewebsite/external node-commonjs \"path\"","webpack://shoewebsite/webpack/bootstrap","webpack://shoewebsite/./index.js"],"sourcesContent":["const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { listOfRoleEnums, roleEnums } = require(\"../utils/enums\");\r\nconst { adminSecretKey, tokenSecretKey } = require(\"../middlewares/config\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst documentModel = require(\"../models/documentModel\");\r\nconst bankModel = require(\"../models/bankModel\");\r\nconst brandModel = require(\"../models/brandModel\");\r\nconst { isValid, isValidEmail } = require(\"../utils/utils\");\r\nconst productModel = require(\"../models/productModel\");\r\n\r\nconst addAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, phone, password, role } = req.body;\r\n\r\n        let admins = await adminModel.find({\r\n            $or: [{ email: email }, { phone: phone }],\r\n        });\r\n        if (admins.length > 0) {\r\n            return res.status(400).send({\r\n                message: \"Email or Password already exists\",\r\n                status: false,\r\n            });\r\n        }\r\n        if (name === \"\") {\r\n            return res.status(400).send({ message: \"Name is required\", status: false });\r\n        }\r\n        if (email === \"\") {\r\n            return res.status(400).send({ message: \"Email is required\", status: false });\r\n        }\r\n        if (phone === \"\") {\r\n            return res.status(400).send({ message: \"Phone number is required\", status: false });\r\n        }\r\n        if (password === \"\") {\r\n            return res.status(400).send({ message: \"Password is required\", status: false });\r\n        }\r\n        if (role === \"\") {\r\n            return res.status(400).send({ message: \"Admin Role is required\", status: false });\r\n        }\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        password = hashedPassword;\r\n        let data = {\r\n            name,\r\n            email: email.toLowerCase(),\r\n            password,\r\n            role,\r\n            phone,\r\n            isDeleted: false,\r\n        };\r\n        let admin = await adminModel.create(data);\r\n        admin.password = undefined;\r\n        admin.isSuperAdmin = undefined;\r\n        return res.status(201).send({ status: true, message: \"Successful\", data: admin });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllAdmin = async (req, res) => {\r\n    let admin = await adminModel.find({ isSuperAdmin: false, isDeleted: false }).select([\"-password\", \"-isSuperAdmin\"]);\r\n    return res.status(200).send({ status: true, message: \"All admins\", data: admin });\r\n};\r\n\r\nconst updateAdminInfo = async (req, res) => {\r\n    try {\r\n        let adminId = req.params.adminid;\r\n        let { phone, password, email, name, role } = req.body;\r\n        let admin = await adminModel.findOne({ _id: adminId, isDeleted: false });\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (phone) admin.phone = phone;\r\n        if (email) admin.email = email.toLowerCase();\r\n        if (name) admin.name = name;\r\n        if (role) admin.role = role;\r\n        if (password) {\r\n            let hashedPassword = await bcrypt.hash(password, 10);\r\n            admin.password = hashedPassword;\r\n        }\r\n        await admin.save();\r\n        return res.status(202).send({ status: true, message: \"Admin Updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst createSuperAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, phone, password } = req.body;\r\n        let params = req.params.secretKey;\r\n        if (params === adminSecretKey) {\r\n            let admins = await adminModel.find({\r\n                $or: [{ email: email }, { phone: phone }],\r\n            });\r\n            if (admins.length > 0) {\r\n                return res.status(400).send({\r\n                    message: \"Email or Password already exists\",\r\n                    status: false,\r\n                });\r\n            }\r\n            if (name === \"\") {\r\n                return res.status(400).send({ message: \"Name is required\", status: false });\r\n            }\r\n            if (email === \"\") {\r\n                return res.status(400).send({ message: \"Email is required\", status: false });\r\n            }\r\n            if (phone === \"\") {\r\n                return res.status(400).send({ message: \"Phone number is required\", status: false });\r\n            }\r\n            if (password === \"\") {\r\n                return res.status(400).send({ message: \"Password is required\", status: false });\r\n            }\r\n            let hashedPassword = await bcrypt.hash(password, 10);\r\n            password = hashedPassword;\r\n            let data = {\r\n                name,\r\n                email: email.toLowerCase(),\r\n                password,\r\n                role: [\"ADMIN\"],\r\n                phone,\r\n                isSuperAdmin: true,\r\n                isDeleted: false,\r\n            };\r\n            let superAdmin = await adminModel.create(data);\r\n            superAdmin.password = undefined;\r\n            superAdmin.isSuperAdmin = undefined;\r\n            return res.status(201).send({ status: true, message: \"Successful\", data: superAdmin });\r\n        }\r\n        return res.status(401).send({ status: true, message: \"Invalid signature\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n        if (!isValid(email)) {\r\n            return res.status(400).send({ status: false, message: \"Email or USER Id is required\" });\r\n        }\r\n\r\n        if (email.includes(\"@\")) {\r\n            if (!isValidEmail(email)) {\r\n                return res.status(400).send({ status: false, message: \"Invalid email\" });\r\n            }\r\n        }\r\n        if (!isValid(password)) {\r\n            return res.status(400).send({ status: false, message: \"password is required\" });\r\n        }\r\n        // const EmailRegex = /^\\w+([\\.]?\\w+)*@\\w+([\\.]?\\w+)*(\\.\\w{2,3})+$/;\r\n        // const UserIDReges = /^[0-9]{8,14}$/;\r\n        // const PasswordRegex = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{10,20}$/;\r\n\r\n        // if ((!EmailRegex.test(email) && !UserIDReges.test(email)) || !PasswordRegex.test(password)) {\r\n        //     return res.status(400).send({ status: false, message: \"Please provide valid Credentials\" });\r\n        // }\r\n        let user = null;\r\n        if (email.includes(\"@\")) {\r\n            user = await adminModel.findOne({ email: email.toLowerCase(), isDeleted: false });\r\n            if (!user) {\r\n                user = await vendorModel.findOne({ emailId: email.toLowerCase() });\r\n            }\r\n        } else {\r\n            user = await vendorModel.findOne({ vendor_unique_id: email });\r\n        }\r\n        if (!user) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Email id or Username\" });\r\n        }\r\n        bcrypt.compare(password, user.password, function (err, result) {\r\n            if (err) {\r\n                return res.status(400).send({ status: false, message: err.message });\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        function hasAccess(result) {\r\n            if (result) {\r\n                let date = Date.now();\r\n                let data = {};\r\n                let userFlag = \"isSuperAdmin\" in user;\r\n                if (!userFlag) {\r\n                    if (user.status === \"Pending\" || user.status === \"Inprogress\") {\r\n                        return res.status(401).send({ status: false, message: \"Account is under review\" });\r\n                    }\r\n                    if (user.status === \"Rejected\") {\r\n                        return res.status(401).send({ status: false, message: \"Account has been Rejected, Please contact us.\" });\r\n                    }\r\n                }\r\n                if (!userFlag) {\r\n                    data.name = user.representativeName;\r\n                    data.email = user.emailId;\r\n                    data.userType = \"Seller\";\r\n                    data.role = user.role;\r\n                    data.altMobileNo = user.altMobileNo;\r\n                    data.phone = user.mobileNo;\r\n                    data.photo = user.profileUrl;\r\n                    data.vendorId = user.vendor_unique_id;\r\n                } else {\r\n                    data.name = user.name;\r\n                    data.email = user.email;\r\n                    data.userType = user.isSuperAdmin ? \"Super Admin\" : \"Admin\";\r\n                    data.role = user.role;\r\n                    data.phone = user.phone;\r\n                    data.photo = user.profileUrl;\r\n                    data.vendorId = null;\r\n                }\r\n\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        email: data.email,\r\n                        userId: user._id.toString(),\r\n                        userModel: userFlag ? \"ADMIN\" : \"VENDOR\",\r\n                        iat: issueTime,\r\n                    },\r\n                    tokenSecretKey,\r\n                    { expiresIn: \"12h\" }\r\n                );\r\n                data.token = token;\r\n\r\n                res.setHeader(\"Authorization\", \"Bearer\", token);\r\n                return res.status(200).send({\r\n                    status: false,\r\n                    message: \"Successfully logged in\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Incorrect Password\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst getAllSubadminEnums = async (req, res) => {\r\n    try {\r\n        return res.status(200).send({ status: true, message: \"Data Accessed\", data: roleEnums });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst verifyVendor = async (req, res) => {\r\n    try {\r\n        let { vendorMargin, vendorStatus } = req.body;\r\n        let vendorObj = await vendorModel.findById(req.params.vendorId);\r\n        if (vendorStatus === \"Approved\") {\r\n            if (vendorMargin) {\r\n                vendorObj.marginInPercentage = vendorMargin;\r\n            }\r\n            vendorObj.status = vendorStatus;\r\n            vendorObj.actionTakenBy = req.userId;\r\n            await productModel.updateMany({ vendor_id: vendorObj._id }, { $set: { margin: vendorMargin } });\r\n            await vendorObj.save();\r\n        } else if (vendorStatus === \"Rejected\") {\r\n            vendorObj.status = vendorStatus;\r\n            vendorObj.actionTakenBy = req.userId;\r\n            await vendorObj.save();\r\n        } else {\r\n            if (vendorMargin) {\r\n                await productModel.updateMany({ vendor_id: vendorObj._id }, { $set: { margin: vendorMargin } });\r\n                vendorObj.marginInPercentage = vendorMargin;\r\n            }\r\n            await vendorObj.save();\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Vendor Updated\", data: \"Updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst deleteVendor = async (req, res) => {\r\n    try {\r\n        let { vendorId } = req.body;\r\n        if (!vendorId) {\r\n            return res.status(400).send({ status: false, message: \"bad request\" });\r\n        }\r\n        let vendor = await vendorModel.findById(vendorId);\r\n        if (!vendor) {\r\n            return res.status(400).send({ status: false, message: \"vendor not found\" });\r\n        }\r\n        vendor.isDeleted = true;\r\n        await vendor.save();\r\n        return res.status(202).send({ status: true, message: \"vendor deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst changeVendorPassword = async (req, res) => {\r\n    try {\r\n        let { vendorId, newPassword } = req.body;\r\n\r\n        let vendor = await vendorModel.findOne({ _id: vendorId });\r\n        if (!vendor) {\r\n            return res.status(404).send({ status: false, message: \"Vendor Not Found\" });\r\n        }\r\n        if (newPassword === \"\") {\r\n            return res.status(400).send({ message: \"Password is required\", status: false });\r\n        }\r\n        let hashedPassword = await bcrypt.hash(newPassword, 10);\r\n\r\n        vendor.password = hashedPassword;\r\n        await vendor.save();\r\n        return res.status(201).send({ message: \"Password updated\", status: true });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst deleteAdminById = async (req, res) => {\r\n    try {\r\n        let adminId = req.params.adminid;\r\n        let admin = await adminModel.findById(adminId);\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        admin.isDeleted = true;\r\n        await admin.save();\r\n        return res.status(202).send({ status: true, message: \"Admin Deleted\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addAdmin,\r\n    getAllAdmin,\r\n    createSuperAdmin,\r\n    adminLogin,\r\n    getAllSubadminEnums,\r\n    verifyVendor,\r\n    deleteVendor,\r\n    changeVendorPassword,\r\n    updateAdminInfo,\r\n    deleteAdminById,\r\n};\r\n","const productModel = require(\"../models/productModel\");\nconst customerModel = require(\"../models/customerModel\");\nconst vendorModel = require(\"../models/vendorModel\");\nconst orderModel = require(\"../models/orderModel\");\n\nconst getDateStrToMS = (dateStr) => {\n    dateStr.setHours(0, 0, 0, 0);\n    return dateStr.getTime();\n};\n\nconst getCurrentYear = () => {\n    var date = new Date();\n    var firstMonth = new Date(date.getFullYear(), 0, 1);\n    var lastMonth = new Date(date.getFullYear(), 12, 0);\n    return [firstMonth.getTime(), lastMonth.getTime()];\n};\n\nconst getCurrentMonth = () => {\n    var date = new Date();\n    var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n    return [firstDay.getTime(), lastDay.getTime()];\n};\n\nconst getCurrentWeek = () => {\n    var curr = new Date();\n    curr.setHours(0, 0, 0, 0);\n    var first = curr.getDate() - curr.getDay();\n    var last = first + 6;\n    var firstDay = new Date(curr.setDate(first));\n    var lastDay = new Date(curr.setDate(last));\n    console.log(firstDay);\n    console.log(lastDay);\n    return [firstDay.getTime(), lastDay.getTime()];\n};\n\nconst getDashboardData = async (req, res) => {\n    try {\n        let products = await productModel.find({ isDeleted: false }).populate(\"vendor_id\");\n        let productCount = 0;\n        let customerCount = 0;\n        let vendorCount = 0;\n        let orderCount = 0;\n        let todayOrderCount = 0;\n        let thisWeakOrderCount = 0;\n        let thisMonthOrderCount = 0;\n        let thisYearOrderCount = 0;\n        let thisYearSale = 0;\n        let thisMonthSale = 0;\n        let thisWeekSale = 0;\n        let overAllSale = 0;\n        let todaySale = 0;\n        for (let x of products) {\n            if (x.vendor_id.isActive === \"Active\") {\n                productCount++;\n            }\n        }\n        let customer = await customerModel.find({ isDeleted: false });\n        customerCount += customer.length;\n        let vendors = await vendorModel.find({ isActive: \"Active\" });\n        vendorCount += vendors.length;\n\n        let todayMS = getDateStrToMS(new Date());\n\n        let orders = await orderModel.find().populate(\"order_status_id\");\n        for (let x of orders) {\n            console.log(x);\n            if (getDateStrToMS(x.order_date) === todayMS) {\n                todayOrderCount++;\n                if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                    todaySale += x.grand_total;\n                }\n            }\n            if (getDateStrToMS(x.order_date) >= getCurrentWeek()[0] && getDateStrToMS(x.order_date) <= getCurrentWeek()[1]) {\n                thisWeakOrderCount++;\n                if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                    thisWeekSale += x.grand_total;\n                }\n            }\n            if (getDateStrToMS(x.order_date) >= getCurrentMonth()[0] && getDateStrToMS(x.order_date) <= getCurrentMonth()[1]) {\n                thisMonthOrderCount++;\n                if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                    thisMonthSale += x.grand_total;\n                }\n            }\n            if (getDateStrToMS(x.order_date) >= getCurrentYear()[0] && getDateStrToMS(x.order_date) <= getCurrentYear()[1]) {\n                thisYearOrderCount++;\n                if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                    thisYearSale += x.grand_total;\n                }\n            }\n            if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                overAllSale += x.grand_total;\n            }\n            orderCount++;\n        }\n\n        let data = {\n            productCount,\n            customerCount,\n            vendorCount,\n            todayOrderCount,\n            thisWeakOrderCount,\n            thisMonthOrderCount,\n            thisYearOrderCount,\n            thisYearSale,\n            thisMonthSale,\n            thisWeekSale,\n            todaySale,\n            overAllSale,\n            overallOrder: orderCount,\n        };\n        return res.status(200).send({ status: true, data: { ...data }, message: \"Dashboard data fetched\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nmodule.exports = { getDashboardData };\n","const brandModel = require(\"../models/brandModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst { uploadFile } = require(\"./imageController\");\r\n// ADD BRAND DETAILS\r\nconst addBrand = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let { brand_name, vendor_id, brandLogo } = data;\r\n        if (!isValid(brand_name)) {\r\n            return res.status(400).send({ status: false, message: \"Brand Name is required\" });\r\n        }\r\n\r\n        let brand = await brandModel.findOne({\r\n            brand_name: brand_name,\r\n        });\r\n        if (brand) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"This category is already exists, please enter a new category\",\r\n            });\r\n        }\r\n        let vendor = await vendorModel.findOne({ vendor_unique_id: vendor_id });\r\n        let logoUrl = null;\r\n        if (req.files) {\r\n            logoUrl = await uploadFile(req.files.brandLogo);\r\n        } else {\r\n            logoUrl = brandLogo;\r\n        }\r\n        let brandData = {\r\n            brand_name: brand_name,\r\n            vendor_id: vendor,\r\n            brandLogo: logoUrl,\r\n        };\r\n\r\n        let newBrand = await brandModel.create(brandData);\r\n        vendor.brand_id.push(newBrand);\r\n        await vendor.save();\r\n\r\n        return res.status(201).send({ status: true, message: \"success\", data: newBrand });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BRANDS\r\nconst getAllBrands = async (req, res) => {\r\n    try {\r\n        let brands = null;\r\n        if (req.userModel === \"VENDOR\") {\r\n            brands = await brandModel.find({ isDeleted: false, vendor_id: req.userId }).populate(\"vendor_id\");\r\n        } else {\r\n            brands = await brandModel.find({ isDeleted: false }).populate(\"vendor_id\");\r\n        }\r\n        return res.status(200).send({ status: true, data: brands });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllBrandByVendor = async (req, res) => {\r\n    try {\r\n        if (req.userModel === \"VENDOR\") {\r\n            let vendor = await vendorModel.findOne({ vendor_unique_id: req.params.vendorId }).populate(\"brand_id\");\r\n            if (!vendor) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Vendor Not Found\",\r\n                });\r\n            }\r\n            return res.status(200).send({ status: true, data: vendor.brand_id });\r\n        } else {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Bad Request\",\r\n            });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst verifyBrandById = async (req, res) => {\r\n    try {\r\n        let brandId = req.params.brandId;\r\n        let brandStatus = req.body.brandStatus;\r\n        if (req.userModel === \"Super Admin\" || req.userModel === \"ADMIN\") {\r\n            let brand = await brandModel.findById(brandId);\r\n            if (!brand) {\r\n                return res.status(400).send({ status: false, data: \"Bad request\" });\r\n            }\r\n            brand.brandStatus = brandStatus;\r\n            await brand.save();\r\n            return res.status(202).send({ status: true, data: \"Brand status change successfully\" });\r\n        } else {\r\n            return res.status(400).send({ status: false, data: \"Bad request\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { addBrand, getAllBrands, getAllBrandByVendor, verifyBrandById };\r\n","const businessModel = require(\"../models/businessModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst { uploadFile, uploadImage } = require(\"./imageController\");\r\nconst bannerModel = require(\"../models/bannerModel\");\r\n\r\n// ADD BUSINESS DETAILS\r\nconst addBusinessInfo = async (req, res) => {\r\n    try {\r\n        let { bName, bEmail, bNumber } = req.body;\r\n\r\n        if (!bName || !bEmail || !bNumber) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let businessData = {\r\n            business_name: bName,\r\n            contactNo: bNumber,\r\n            contactEmail: bEmail,\r\n        };\r\n        console.log(businessData);\r\n        let businessExists = await businessModel.find();\r\n        console.log(businessExists);\r\n        if (businessExists.length > 0) {\r\n            businessExists[0].business_name = bName;\r\n            businessExists[0].contactNo = bNumber;\r\n            businessExists[0].contactEmail = bEmail;\r\n            await businessExists[0].save();\r\n        } else {\r\n            await businessModel.create(businessData);\r\n        }\r\n        return res.status(201).send({ status: true, message: \"Success\", data: \"business\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst addBusinessGST = async (req, res) => {\r\n    try {\r\n        let { gsts } = req.body;\r\n        if (!gsts || gsts.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"Add GST\" });\r\n        }\r\n\r\n        let businessExists = await businessModel.find();\r\n        if (businessExists.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"Add business Name and other fields then add GST\" });\r\n        }\r\n        businessExists[0].gsts = gsts;\r\n        businessExists[0].defaultGST = {};\r\n        await businessExists[0].save();\r\n        return res.status(201).send({ status: true, message: \"GST updated to business\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst addBusinessFiles = async (req, res) => {\r\n    try {\r\n        let { bLogo, bInvLogo, bPolicy, bTC } = req.files;\r\n        let business = await businessModel.find();\r\n        if (bLogo) {\r\n            business[0].business_Logo = await uploadFile(bLogo);\r\n        }\r\n        if (bInvLogo) {\r\n            business[0].invoiceLogo = await uploadFile(bInvLogo);\r\n        }\r\n        if (bPolicy) {\r\n            business[0].privacyPolicy = await uploadFile(bPolicy);\r\n        }\r\n        if (bTC) {\r\n            business[0].iAgree = await uploadFile(bTC);\r\n        }\r\n        await business[0].save();\r\n        return res.status(201).send({ status: true, message: \"Success\", data: \"business\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getBusinessInfo = async (req, res) => {\r\n    try {\r\n        let business = await businessModel.find();\r\n        if (business.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"No record available\" });\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Record fetched...\", data: business[0] });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst setDefaultGst = async (req, res) => {\r\n    try {\r\n        let { gst } = req.body;\r\n        let business = await businessModel.find();\r\n        if (business.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"No record available\" });\r\n        }\r\n\r\n        for (let gstd of business[0].gsts) {\r\n            console.log(gstd);\r\n            if (gstd.gstNo === gst) {\r\n                business[0].defaultGST.gstNo = gstd.gstNo;\r\n                business[0].defaultGST.pickupAddress = gstd.pickupAddress;\r\n                business[0].defaultGST.stateCode = gstd.stateCode;\r\n            }\r\n        }\r\n        await business[0].save();\r\n        console.log(req.body);\r\n        return res.status(200).send({ status: true, message: \"Default gst updated...\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst saveSocialMedia = async (req, res) => {\r\n    try {\r\n        let { facebook, instagram, twitter, youtube, linkedin } = req.body;\r\n        let business = await businessModel.find();\r\n        if (business.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"No record available\" });\r\n        }\r\n        if (facebook) {\r\n            business[0].socialMedia.facebook = facebook;\r\n        }\r\n        if (instagram) {\r\n            business[0].socialMedia.instagram = instagram;\r\n        }\r\n        if (twitter) {\r\n            business[0].socialMedia.twitter = twitter;\r\n        }\r\n        if (youtube) {\r\n            business[0].socialMedia.youtube = youtube;\r\n        }\r\n        if (linkedin) {\r\n            business[0].socialMedia.linkedin = linkedin;\r\n        }\r\n        await business[0].save();\r\n        return res.status(200).send({ status: true, message: \"Social media links added\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst bannerForClientPage = async (req, res) => {\r\n    try {\r\n        let { images } = req.files;\r\n        let { type } = req.body;\r\n        if (images && type) {\r\n            if (type === \"MULTIPLE\") {\r\n                for await (let x of images) {\r\n                    let url = (await uploadImage(x)).imageURL;\r\n                    await bannerModel.create({ bannerUrl: url, type: \"MULTIPLE\" });\r\n                }\r\n            } else if (type === \"SINGLE\") {\r\n                let url = (await uploadImage(images)).imageURL;\r\n                await bannerModel.create({ bannerUrl: url, type: \"SINGLE\" });\r\n            }\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Banner added\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getBannerForClientPage = async (req, res) => {\r\n    try {\r\n        let data = await bannerModel.find();\r\n        return res.status(200).send({ status: true, data: data, message: \"Banner Images fetched\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst bannerDeleteById = async (req, res) => {\r\n    try {\r\n        let bannerId = req.params.bannerId;\r\n        await bannerModel.findByIdAndDelete(bannerId);\r\n        return res.status(200).send({ status: true, message: \"Banner deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addBusinessInfo,\r\n    addBusinessGST,\r\n    getBusinessInfo,\r\n    addBusinessFiles,\r\n    setDefaultGst,\r\n    saveSocialMedia,\r\n    bannerForClientPage,\r\n    getBannerForClientPage,\r\n    bannerDeleteById\r\n};\r\n","const cancelledReasonModel = require(\"../models/cancelledReasonModel\");\r\nconst questionModel = require(\"../models/questionModel\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// CANCEL ORDER BY ORDER ID\r\nconst addCancelledReason = async (req, res) => {\r\n  try {\r\n    \r\n    let data = req.body;\r\n\r\n    let { questions, customerAnswer } = data;\r\n\r\n    let cancelledReasonData = {\r\n      questions,\r\n      customerAnswer,\r\n    };\r\n\r\n    let newCancelledReason = await cancelledReasonModel.create(\r\n      cancelledReasonData\r\n    );\r\n\r\n    return res\r\n      .status(201)\r\n      .send({ status: true, message: \"Success\", data: newCancelledReason });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addCancelledReason }","const { isValidObjectId } = require(\"mongoose\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst colorModel = require(\"../models/colorModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\n\r\n// ADD TO CART\r\nconst addToCart = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let { product_id, qty, lotSize, colorId } = req.body;\r\n        // Find the cart for the customer\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer ID\" });\r\n        }\r\n        if (!isValidObjectId(colorId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Color ID\" });\r\n        }\r\n        let cart = await cartModel.findOne({ customer_id: customerId });\r\n        let customer = await customerModel.findById(customerId);\r\n        let color = await colorModel.findById(colorId);\r\n\r\n        let isProductExists = await productModel.findOne({\r\n            _id: product_id,\r\n            status: \"Approved\",\r\n        });\r\n\r\n        if (!isProductExists) {\r\n            return res.status(404).send({ status: false, message: \"Product not found\" });\r\n        }\r\n\r\n        let data = {\r\n            product_id: product_id,\r\n            qty: Number(qty),\r\n            lotSize: lotSize,\r\n            color: {\r\n                colorName: color.colorName,\r\n                colorHex: color.colorHex,\r\n            },\r\n        };\r\n        if (!cart) {\r\n            return res.status(400).send({ status: false, message: \"Server Error\" });\r\n        } else {\r\n            data.addedAt = new Date().toLocaleString();\r\n            cart.products.push(data);\r\n        }\r\n        await cart.save();\r\n\r\n        let dataX = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n            cartLength: cart.products.length,\r\n        };\r\n\r\n        res.status(201).send({ status: true, message: \"Cart updated successfully\", data: dataX });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst priceCal = (price, margin, gst) => {\r\n    let marginAmt = Number(price) + (Number(price) * Number(margin)) / 100;\r\n    let gstAmt = (Number(marginAmt) * Number(gst)) / 100;\r\n    return (gstAmt + marginAmt).toFixed(2);\r\n};\r\nconst totalPriceCalc = (products) => {\r\n    let totalPrice = 0;\r\n    products.forEach((element) => {\r\n        let { seller_price, margin, sellingGST } = element.product_id;\r\n        totalPrice += Number(element.qty) * Number(priceCal(seller_price, margin, sellingGST));\r\n    });\r\n    return totalPrice.toFixed(2);\r\n};\r\n\r\nconst qtyIncreaseDecrease = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let index = req.params.index;\r\n        let qty = req.params.qty;\r\n        let cart = await cartModel.findOne({ customer_id: customerId }).populate(\"products.product_id\");\r\n        if (!cart) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        if (cart.products.length > 0) {\r\n            cart.products[index].qty = qty;\r\n            let cartAmt_current = totalPriceCalc(cart.products);\r\n            console.log(cartAmt_current);\r\n            if (cart.currentCoupon && cartAmt_current < cart.currentCoupon.minOrderAmt) {\r\n                console.log(\"hell\");\r\n                cart.currentCoupon = undefined;\r\n            }\r\n            await cart.save();\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        return res.status(201).json({ message: \"Quantity updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst removeFromCart = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let index = req.params.index;\r\n        let cart = await cartModel.findOne({ customer_id: customerId });\r\n\r\n        if (!cart) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (cart.products.length > 0) {\r\n            let arr = cart.products;\r\n            arr.splice(index, 1);\r\n            cart.products = arr;\r\n            await cart.save();\r\n        }\r\n        res.status(201).json({ message: \"Product removed successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL CARTS\r\nconst getAllAbandentCarts = async (req, res) => {\r\n    try {\r\n        let carts = await cartModel.find({ products: { $gte: [{ $size: 0 }] } }).populate([\"customer_id\", { path: \"products.product_id\", model: \"Product\" }]);\r\n        return res.status(200).send({ status: true, data: carts });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET CART BY CUSTOMER ID\r\nconst getCartByCustomerId = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let cart = await cartModel.findOne({ customer_id: customerId }).populate({ path: \"products.product_id\", model: \"Product\", populate: { path: \"brandId\", model: \"Brand\" } });\r\n\r\n        if (!cart) {\r\n            return res.status(404).send({ status: false, message: \"No cart found with this customer\" });\r\n        }\r\n        let customer = await customerModel.findById(customerId);\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n            cartLength: cart.products.length,\r\n        };\r\n        return res.status(200).send({ status: true, data: cart, customerData: data });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addToCart,\r\n    getAllAbandentCarts,\r\n    getCartByCustomerId,\r\n    removeFromCart,\r\n    qtyIncreaseDecrease,\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nconst subcategoryModel = require(\"../models/subcategoryModel\");\r\nconst productModel = require(\"../models/productModel\");\r\n\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// ADD CATEGORY\r\nconst addCategory = async (req, res) => {\r\n   try {\r\n      let data = req.body;\r\n      let { category_name, subCategory } = data;\r\n\r\n      if (!isValid(category_name)) {\r\n         return res\r\n            .status(400)\r\n            .send({ status: false, message: \"category is required\" });\r\n      }\r\n\r\n      let category = await categoryModel.findOne({\r\n         category_name: category_name,\r\n      });\r\n\r\n      if (category) {\r\n         return res.status(400).send({\r\n            status: false,\r\n            message:\r\n               \"This category is already exists, please enter a new category\",\r\n         });\r\n      }\r\n      let subCategories = await subcategoryModel.insertMany(subCategory);\r\n\r\n      let categoryData = {\r\n         category_name: category_name,\r\n         sub_category: subCategories,\r\n      };\r\n\r\n      let newCategory = await categoryModel.create(categoryData);\r\n\r\n      return res\r\n         .status(201)\r\n         .send({ status: true, message: \"success\", data: newCategory });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\n// GET ALL CATEGORIES\r\nconst getAllCategories = async (req, res) => {\r\n   try {\r\n      let categories = await categoryModel\r\n         .find({ isDeleted: false })\r\n         .populate(\"sub_category\");\r\n      return res.status(200).send({ status: true, data: categories });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\n// GET CATEGORY BY CATEGORY ID\r\nconst getCategoryById = async (req, res) => {\r\n   try {\r\n      let categoryId = req.params.categoryId;\r\n      if (!isValidObjectId(categoryId)) {\r\n         return res\r\n            .status(400)\r\n            .send({ status: false, message: \"Invalid categoryId\" });\r\n      }\r\n\r\n      let category = await categoryModel.findOne({\r\n         _id: categoryId,\r\n         isDeleted: false,\r\n      });\r\n\r\n      if (!category) {\r\n         return res\r\n            .status(404)\r\n            .send({ status: false, message: \"Category not found\" });\r\n      }\r\n\r\n      return res\r\n         .status(200)\r\n         .send({ status: true, message: \"success\", data: category });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\n// UPDATE CATEGORY BY CATEGORY ID\r\nconst updateCategoryById = async (req, res) => {\r\n   try {\r\n      let categoryId = req.params.categoryId;\r\n\r\n      if (!isValidObjectId(categoryId)) {\r\n         return res\r\n            .status(400)\r\n            .send({ status: false, message: \"invalid category id\" });\r\n      }\r\n\r\n      let category = await categoryModel\r\n         .findOne({ _id: categoryId })\r\n         .populate(\"sub_category\");\r\n\r\n      if (!category) {\r\n         return res\r\n            .status(404)\r\n            .send({ status: false, message: \"Category not found\" });\r\n      }\r\n      let { category_name, subCategory } = req.body;\r\n\r\n      console.log(subCategory, \"sub category1\");\r\n      console.log(category.sub_category, \"sub category2\");\r\n      category.sub_category.forEach(async (el) => {\r\n         let isFound = false;\r\n         subCategory.forEach((innerEl) => {\r\n            if (innerEl.hasOwnProperty(\"_id\")) {\r\n               if (innerEl._id === el._id.toHexString()) {\r\n                  isFound = true;\r\n               }\r\n            }\r\n         });\r\n         if (!isFound) {\r\n            console.log(el._id);\r\n            await subcategoryModel.findOneAndUpdate(\r\n               { _id: el._id, isDeleted: false },\r\n               { isDeleted: true, deletedAt: Date.now() },\r\n               { new: true }\r\n            );\r\n         }\r\n      });\r\n      let subCategoryCreated = [];\r\n      for (const objs of subCategory) {\r\n         if (!objs.hasOwnProperty(\"_id\")) {\r\n            let xId = await subcategoryModel.create(objs);\r\n            subCategoryCreated.push(xId);\r\n         } else {\r\n            subCategoryCreated.push(objs);\r\n         }\r\n      }\r\n\r\n      category.category_name = category_name;\r\n      category.sub_category = subCategoryCreated;\r\n\r\n      console.log(subCategoryCreated, \"crate arr\");\r\n      await category.save();\r\n      return res\r\n         .status(200)\r\n         .send({\r\n            status: true,\r\n            message: \"success\",\r\n            data: \"Category updated successfully\",\r\n         });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\n// DELETE CATEGORY BY CATEGORY ID\r\nconst deleteCategoryById = async (req, res) => {\r\n   try {\r\n      let categoryId = req.params.categoryId;\r\n      if (!isValidObjectId(categoryId)) {\r\n         return res\r\n            .status(400)\r\n            .send({ status: false, message: \"Invalid category id\" });\r\n      }\r\n\r\n      let category = await categoryModel.findOne({ _id: categoryId });\r\n\r\n      if (!category) {\r\n         return res\r\n            .status(404)\r\n            .send({ status: false, message: \"Category not found\" });\r\n      }\r\n\r\n      let deleteCategory = await categoryModel.findOneAndUpdate(\r\n         {\r\n            _id: categoryId,\r\n            isDeleted: false,\r\n         },\r\n         {\r\n            isDeleted: true,\r\n            deletedAt: new Date(),\r\n         },\r\n         { new: true }\r\n      );\r\n\r\n      if (!deleteCategory) {\r\n         return res.status(404).send({\r\n            status: false,\r\n            message: \"category not found or already deletec\",\r\n         });\r\n      }\r\n\r\n      return res.status(200).send({ status: true, message: \"success\" });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\nmodule.exports = {\r\n   addCategory,\r\n   getAllCategories,\r\n   getCategoryById,\r\n   updateCategoryById,\r\n   deleteCategoryById,\r\n};\r\n","const colorModel = require('../models/colorModel');\r\nconst addNewColor = async (req, res) => {\r\n    try {\r\n        let {colorName, colorHex} = req.body;\r\n        if (colorName === \"\") {\r\n            return res\r\n                .status(400)\r\n                .send({message: \"Color Name is required\", status: false});\r\n        }\r\n        if (colorHex === \"\") {\r\n            return res\r\n                .status(400)\r\n                .send({message: \"Color Hex is required\", status: false});\r\n        }\r\n\r\n        let colors = await colorModel.find({\r\n            $or: [{colorName: colorName}, {colorHex: colorHex}],\r\n        });\r\n\r\n        if(colors.length > 0) {\r\n            return res.status(400).send({\r\n                message: \"This color is already exists\",\r\n                status: false,\r\n            });\r\n        }\r\n        await colorModel.create({colorName: colorName, colorHex: colorHex});\r\n        return res.status(201).send({status: true, message: 'Color added successfully'});\r\n    } catch (error) {\r\n        return res.status(500).send({status: false, message: error.message});\r\n    }\r\n}\r\n\r\nconst deleteColorById = async (req, res) => {\r\n    try {\r\n        let colorId = req.params.colorId;\r\n        let color = await colorModel.findById(colorId);\r\n        if (!color) {\r\n            return res.status(400).send({status: false, message: \"Bad Request\"});\r\n        }\r\n        color.isDeleted = true;\r\n        await color.save();\r\n        return res.status(202).send({status: true, message: 'Color deleted successfully'});\r\n    } catch (error) {\r\n        return res.status(500).send({status: false, message: error.message});\r\n    }\r\n}\r\n\r\nconst getAllColor = async (req, res) => {\r\n    try {\r\n        let colors = await colorModel.find({isDeleted:false});\r\n        return res.status(200).send({status: true, message: 'Color fetched successfully', data: colors});\r\n    } catch (error) {\r\n        return res.status(500).send({status: false, message: error.message});\r\n    }\r\n}\r\n\r\nmodule.exports = {addNewColor, deleteColorById, getAllColor}","const couponCodeModel = require(\"../models/couponCodeModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst { isExpiryCoupon } = require(\"../utils/couponExpireUtil\");\r\n\r\n// const isExpiryCoupon = (validTill) => {\r\n//     let day = validTill.getDate();\r\n//     let month = validTill.getMonth() + 1;\r\n//     let year = validTill.getFullYear();\r\n//     let expiryDateMS = new Date(`${year}-${month < 10 ? \"0\" + month : month}-${day < 10 ? \"0\" + day : day}`).getTime() / 1000;\r\n\r\n//     let now = Date.now();\r\n//     // let date = new Date(now + (5.5 * (3600 * 1000))); // Deployment time cases for +5:30 GMT\r\n//     let date = new Date();\r\n//     let dateStr = `${date.getFullYear()}-${date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1}-${date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate()}`;\r\n//     let currentDateMS = new Date(dateStr).getTime() / 1000;\r\n\r\n//     return currentDateMS <= expiryDateMS ? false : true;\r\n// };\r\n\r\nconst generateCoupon = async (req, res) => {\r\n    try {\r\n        let { couponCode, validTill, maxUsers, maxDiscPrice, discountType, discountAmt, minOrderAmt } = req.body;\r\n        if (!couponCode || couponCode === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Coupon code required\" });\r\n        }\r\n        if (!validTill || validTill === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Coupon expiry date required\" });\r\n        }\r\n        if (!maxUsers || Number(maxUsers) === 0) {\r\n            return res.status(400).send({ status: false, message: \"Coupon uses limit is required\" });\r\n        }\r\n\r\n        if (!discountAmt || Number(discountAmt) === 0) {\r\n            return res.status(400).send({ status: false, message: \"Coupon discount amount is required\" });\r\n        }\r\n        if (!discountType || discountType === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Coupon discount type is required\" });\r\n        }\r\n        if (!minOrderAmt || minOrderAmt === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Minimum order is required\" });\r\n        }\r\n        if (discountType === \"Percentage\") {\r\n            if (!maxDiscPrice || Number(maxDiscPrice) === 0) {\r\n                return res.status(400).send({ status: false, message: \"Coupon Maximum discount price is required\" });\r\n            }\r\n        }\r\n        let coupon = await couponCodeModel.findOne({ couponCode: couponCode, isDeleted: false });\r\n        if (coupon) {\r\n            return res.status(200).send({ status: false, message: \"This coupon code is already created\" });\r\n        }\r\n        let newDate = new Date(validTill);\r\n        let createData = {\r\n            couponCode,\r\n            validTill: newDate,\r\n            maxUsers,\r\n            maxDiscPrice,\r\n            discountType,\r\n            discountAmt,\r\n            minOrderAmt,\r\n        };\r\n        if (discountType === \"PRICE\") {\r\n            createData.maxDiscPrice = discountAmt;\r\n        }\r\n        let createdCoupon = await couponCodeModel.create(createData);\r\n        res.status(201).send({ status: true, message: \"Coupon created successfully...\", data: createdCoupon });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst applyCoupon = async (req, res) => {\r\n    try {\r\n        let customer_id = req.params.customerid;\r\n        let { couponCode, orderAmount } = req.body;\r\n        if (!couponCode || couponCode === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Coupon id required\" });\r\n        }\r\n        if (!orderAmount || orderAmount === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Order Amount required\" });\r\n        }\r\n        if (!isValidObjectId(customer_id)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Request\" });\r\n        }\r\n        let customer = await customerModel.findById(customer_id).populate(\"cart_id\");\r\n        if (!customer) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let coupon = await couponCodeModel.findOne({ couponCode: couponCode, isDeleted: false });\r\n        if (!coupon) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Coupon Code\" });\r\n        }\r\n        if (coupon.isExpired) {\r\n            return res.status(200).send({ status: false, message: \"Coupon code expired\" });\r\n        }\r\n        if (coupon.isUsed) {\r\n            return res.status(200).send({ status: false, message: \"Coupon code uses has exceed to its maximum limit\" });\r\n        }\r\n        if (coupon.minOrderAmt > orderAmount) {\r\n            return res.status(200).send({ status: false, message: `This coupon is applicable for Minimum order amount ${coupon.minOrderAmt}` });\r\n        }\r\n\r\n        let day = coupon.validTill.getDate();\r\n        let month = coupon.validTill.getMonth() + 1;\r\n        let year = coupon.validTill.getFullYear();\r\n        let expiryDateMS = new Date(`${year}-${month < 10 ? \"0\" + month : month}-${day < 10 ? \"0\" + day : day}`).getTime() / 1000;\r\n\r\n        let now = Date.now();\r\n        // let date = new Date(now + (5.5 * (3600 * 1000))); // Deployment time cases for +5:30 GMT\r\n        let date = new Date();\r\n        let dateStr = `${date.getFullYear()}-${date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1}-${date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate()}`;\r\n        let currentDateMS = new Date(dateStr).getTime() / 1000;\r\n\r\n        if (currentDateMS <= expiryDateMS) {\r\n            if (coupon.customer_id.includes(customer_id)) {\r\n                return res.status(200).send({ status: false, message: \"Coupon Already applied\" });\r\n            } else {\r\n                if (coupon.customer_id.length >= coupon.maxUsers && coupon.isUsed === false) {\r\n                    coupon.isUsed = true;\r\n                    await coupon.save();\r\n                    return res.status(200).send({ status: false, message: \"Coupon code uses has exceed to its maximum limit\" });\r\n                }\r\n\r\n                // coupon.customer_id.push(customer_id);\r\n                // if (coupon.customer_id.length === coupon.maxUsers) {\r\n                //     coupon.isUsed = true;\r\n                // }\r\n                // await coupon.save();\r\n                // let couponData = {\r\n                //     couponCode: coupon.couponCode,\r\n                //     minOrderAmt: coupon.minOrderAmt,\r\n                //     discountAmt: coupon.discountAmt,\r\n                // };\r\n                // customer.cart_id.currentCoupon = couponData;\r\n                // await customer.cart_id.save();\r\n                return res.status(202).send({\r\n                    status: true,\r\n                    data: coupon.discountAmt,\r\n                    message: \"Coupon applied successfully...\",\r\n                });\r\n            }\r\n        } else {\r\n            coupon.isExpired = true;\r\n            await coupon.save();\r\n            return res.status(200).send({ status: false, message: \"Coupon code expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllCoupons = async (req, res) => {\r\n    try {\r\n        let coupons = await couponCodeModel.find({ isDeleted: false }).sort({ createdAt: -1 }).populate(\"customer_id\");\r\n        for (let coupon of coupons) {\r\n            if (!coupon.isExpired) {\r\n                if (isExpiryCoupon(coupon.validTill)) {\r\n                    coupon.isExpired = true;\r\n                    await coupon.save();\r\n                }\r\n            }\r\n        }\r\n        res.status(200).send({ status: true, message: \"All Coupons fetched successfully...\", data: coupons });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst deleteCoupon = async (req, res) => {\r\n    try {\r\n        let couponId = req.params.couponid;\r\n        let coupon = await couponCodeModel.findById(couponId);\r\n        if (!coupon) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        coupon.isDeleted = true;\r\n        await coupon.save();\r\n        return res.status(202).send({ status: true, message: \"Coupon deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { generateCoupon, applyCoupon, getAllCoupons, deleteCoupon };\r\n","const { isValidObjectId } = require(\"mongoose\");\r\nconst customerAddressModel = require(\"../models/customerAddressModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst { isValidRequestBody, isValid } = require(\"../utils/utils\");\r\nconst { stateAndCode } = require(\"../utils/stateNameAndCode\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst bcrypt = require(\"bcrypt\");\r\n// ADD ADDRESS\r\nconst addCustomerInformation = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let customerId = req.params.customerid;\r\n        let { name, alternate_phone, gstNo, email, pincode, password, address, state, city } = data;\r\n\r\n        if (!isValid(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (!state || !name || !pincode || !city || !password || !address) {\r\n            return res.status(400).send({ status: false, message: \"Please provide all required fields\" });\r\n        }\r\n        let addressData = {\r\n            customerId,\r\n            address,\r\n            state,\r\n            pincode,\r\n            city,\r\n        };\r\n        if (Object.keys(stateAndCode).includes(state)) {\r\n            addressData.stateCode = stateAndCode[state];\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Invalid State\" });\r\n        }\r\n\r\n        let customer = await customerModel.findOne({ _id: customerId, isDeleted: false, isBlocked: false });\r\n        if (!customer) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        customer.name = name;\r\n        customer.password = hashedPassword;\r\n        if (gstNo) {\r\n            customer.gstNo = gstNo;\r\n        }\r\n        if (alternate_phone) {\r\n            customer.alternate_phone = alternate_phone;\r\n        }\r\n        if (email) {\r\n            customer.email = email;\r\n        }\r\n\r\n        if (customer.isActivated === true) {\r\n            return res.status(400).send({ status: false, message: \"Account is already active\" });\r\n        }\r\n\r\n        let cart = await cartModel.create({ customer_id: customer._id });\r\n        if (!cart) {\r\n            return res.status(500).send({ status: false, message: \"Internal Server Error\" });\r\n        }\r\n        customer.cart_id = cart;\r\n        customer.isActivated = true;\r\n        addressData.customerId = customer;\r\n        let newAddress = await customerAddressModel.create(addressData);\r\n        customer.defaultAddress = newAddress._id;\r\n        await customer.save();\r\n        return res.status(201).send({ status: true, message: \"Successfully registered\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ADDRESSES BY CUSTOMER ID\r\nconst getAllAddresses = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        if (!customerId) {\r\n            return res.status(400).send({ status: false, message: \"Customer id is required in params\" });\r\n        }\r\n        let address = await customerAddressModel.find({ customerId: customerId, isDeleted: false });\r\n        return res.status(200).send({ status: true, data: address });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE ADDRESS BY CUSTOMER ID\r\nconst updateAddressByCustomerId = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        if (!customerId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Please provide the customerId in params\",\r\n            });\r\n        }\r\n        let customer = await customerAddressModel.findOne({\r\n            customerId: customerId,\r\n        });\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n\r\n        let body = req.body;\r\n\r\n        if (!isValidRequestBody(body)) {\r\n            return res.status(400).send({ status: false, message: \"Please enter data in body\" });\r\n        }\r\n\r\n        if (\"address\" in body) {\r\n            for (let i = 0; i < customer.address.length; i++) {\r\n                customer.address[i] = body.address[i];\r\n            }\r\n        }\r\n        await customer.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Address updated successfully\",\r\n            data: customer,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE CUSTOMER ADDRESS BY CUSTOMER ID\r\nconst deleteAddressById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let addressId = req.params.addressId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        if (!isValidObjectId(addressId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid address id\" });\r\n        }\r\n        let address = await customerAddressModel.findById(addressId);\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"customer not found with this id\" });\r\n        }\r\n        if (!address) {\r\n            return res.status(404).send({ status: false, message: \"address not found with this id\" });\r\n        }\r\n        address.isDeleted = true;\r\n        await address.save();\r\n        if (customer.defaultAddress.toString() === addressId) {\r\n            customer.defaultAddress = undefined;\r\n            customer.save();\r\n        }\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n        if (customer.gstNo) data.gstNo = customer.gstNo;\r\n        if (customer.defaultAddress) data.defaultAddressId = customer.defaultAddress._id.toString();\r\n        return res.status(200).send({ status: true, data: data, message: \"Address deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst addAddress = async (req, res) => {\r\n    try {\r\n        let { address, state, city, pincode, stateCode } = req.body;\r\n        let customerId = req.params.customerId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (!address || !state || !city || !pincode || !stateCode) {\r\n            return res.status(400).send({ status: false, message: \"All fields are requited\" });\r\n        }\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!customer) {\r\n            return res.status(400).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        let addressObj = await customerAddressModel.create({ customerId, address, state, city, pincode, stateCode });\r\n\r\n        return res.status(201).send({ status: true, message: \"Address created\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nmodule.exports = {\r\n    addCustomerInformation,\r\n    getAllAddresses,\r\n    updateAddressByCustomerId,\r\n    deleteAddressById,\r\n    addAddress,\r\n};\r\n","const customerModel = require(\"../models/customerModel\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { isValid, isValidMoblie, isValidEmail, isValidPassword } = require(\"../utils/utils\");\r\nconst { customerTokenSecretKey } = require(\"../middlewares/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst customerAddressModel = require(\"../models/customerAddressModel\");\r\nconst wishlistModel = require(\"../models/wishlistModel\");\r\n\r\nconst loginUser = async (req, res) => {\r\n    try {\r\n        let { phone, password } = req.body;\r\n\r\n        if (!phone || !password) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        let customer = await customerModel.findOne({ phone: phone, isDeleted: false }).populate(\"cart_id\");\r\n\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Account not found this mobile number, you have to register first\" });\r\n        }\r\n        let wishlist = await wishlistModel.find({ userId: customer._id });\r\n        if (customer.isBlocked) {\r\n            return res.status(403).send({ status: false, message: \"This account has been blocked, Please Contact us!\" });\r\n        }\r\n        // if (!customer.isActivated) {\r\n        //     return res.status(200).send({ status: true, message: \"Account is not active, Please fill your information\" });\r\n        // }\r\n        bcrypt.compare(password, customer.password, function (err, result) {\r\n            if (err) {\r\n                return res.status(400).send({ status: false, message: err.message });\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        function hasAccess(result) {\r\n            if (result) {\r\n                let date = Date.now();\r\n                let data = {\r\n                    name: customer.name,\r\n                    email: customer.email,\r\n                    customerId: customer._id.toString(),\r\n                    userType: \"CUSTOMER\",\r\n                    isActivated: customer.isActivated,\r\n                    phone: customer.phone,\r\n                    cartLength: customer.cart_id.products.length,\r\n                    wishlistLength: wishlist.length,\r\n                };\r\n                if (customer.profileUrl) data.photo = customer.profileUrl;\r\n                if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n                if (customer.gstNo) data.gstNo = customer.gstNo;\r\n                if (customer.defaultAddress) data.defaultAddressId = customer.defaultAddress._id.toString();\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        userId: customer._id.toString(),\r\n                        phone: customer.phone,\r\n                        userModel: \"CUSTOMER\",\r\n                        iat: issueTime,\r\n                    },\r\n                    customerTokenSecretKey,\r\n                    { expiresIn: \"24h\" }\r\n                );\r\n                data.token = token;\r\n                res.setHeader(\"Authorization\", \"Bearer \" + token);\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Login successfully\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Login denied\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL CUSTOMERS\r\nconst getAllCustomer = async (req, res) => {\r\n    try {\r\n        let customers = await customerModel.find({ isDeleted: false }).populate(\"defaultAddress\");\r\n        return res.status(200).send({ status: true, data: customers });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET CUSTOMER BY CUSTOMER ID\r\nconst getCustomerById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let customer = await customerModel.findOne({ _id: customerId });\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        return res.status(200).send({ status: true, data: customer });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE CUSTOMER BY CUSTOMER ID\r\nconst updateCustomerById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        let { name, gstNo, alternate_phone, email, password } = req.body;\r\n        if (!name && !gstNo && alternate_phone && email && password) {\r\n            return res.status(400).send({ status: false, message: \"At least one field is require to update your information\" });\r\n        }\r\n        if (name) {\r\n            customer.name = name;\r\n        }\r\n        if (gstNo) {\r\n            customer.gstNo = gstNo;\r\n        }\r\n        if (alternate_phone) {\r\n            customer.alternate_phone = alternate_phone;\r\n        }\r\n        if (email) {\r\n            customer.email = email.toLowerCase();\r\n        }\r\n        if (password) {\r\n            let hashedPassword = await bcrypt.hash(password, 10);\r\n            customer.password = hashedPassword;\r\n        }\r\n        await customer.save();\r\n\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n        if (customer.gstNo) data.gstNo = customer.gstNo;\r\n        if (customer.defaultAddress) data.defaultAddressId = customer.defaultAddress._id.toString();\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Customer updated successfully\",\r\n            data: data,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE CUSTOMER BY CUSTOMER ID\r\nconst deleteCustomerById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let customer = await customerModel.findOne({ _id: customerId });\r\n\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        customer.isDeleted = true;\r\n        // customer.isNew = true;\r\n        await customer.save();\r\n        return res.status(200).send({ status: true, message: \"Customer deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst blockCustomerById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let customer = await customerModel.findOne({ _id: customerId });\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        customer.isBlocked = !customer.isBlocked;\r\n        await customer.save();\r\n        let message = customer.isBlocked ? \"Customer has been blocked\" : \"Customer is now Active\";\r\n        return res.status(202).send({ status: true, message: message });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst findOrdersByPhone = async (req, res) => {\r\n    try {\r\n        let { userPhone } = req.body;\r\n        let customer = await customerModel.findOne({ phone: userPhone }).populate({\r\n            path: \"orders\",\r\n            model: \"Order\",\r\n            populate: [\r\n                { path: \"vendorId\", model: \"Vendor\" },\r\n                { path: \"order_status_id\", model: \"Order_Status_Table\" },\r\n                { path: \"ordered_products\", model: \"Ordered_Product\" },\r\n            ],\r\n        });\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        let orders = customer.orders;\r\n        return res.status(200).send({ status: true, message: \"Order fetch successfully\", data: orders });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst setDefaultAddress = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let addressId = req.params.addressId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        if (!isValidObjectId(addressId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid address id\" });\r\n        }\r\n        let address = await customerAddressModel.findById(addressId);\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!address) {\r\n            return res.status(404).send({ status: false, message: \"Address not found with this id\" });\r\n        }\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found with this id\" });\r\n        }\r\n        customer.defaultAddress = address._id;\r\n        await customer.save();\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n        if (customer.gstNo) data.gstNo = customer.gstNo;\r\n        if (customer.defaultAddress) data.defaultAddressId = customer.defaultAddress._id.toString();\r\n        return res.status(200).send({ status: true, data: data, message: \"Default address updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst changePassword = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let { password } = req.body;\r\n        if (!password) {\r\n            return res.status(400).send({ status: false, message: \"Password is required\" });\r\n        }\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found with this id\" });\r\n        }\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        customer.password = hashedPassword;\r\n        await customer.save();\r\n        return res.status(202).send({ status: true, message: \"Password Updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    loginUser,\r\n    getAllCustomer,\r\n    getCustomerById,\r\n    updateCustomerById,\r\n    deleteCustomerById,\r\n    blockCustomerById,\r\n    findOrdersByPhone,\r\n    setDefaultAddress,\r\n    changePassword,\r\n};\r\n","const HomepageModel = require(\"../models/HomepageModel\");\r\nconst businessModel = require(\"../models/businessModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst colorModel = require(\"../models/colorModel\");\r\nconst getDashboardData = async (req, res) => {\r\n    try {\r\n        let recommendedProduct = await HomepageModel.find().populate([\"featuredProduct\", \"newArrival\", \"bestSelling\"]);\r\n        let storeInfo = await businessModel.find();\r\n        let category = await categoryModel.find().populate(\"sub_category\");\r\n        let color = await colorModel.find();\r\n        storeInfo[0].defaultGST = undefined;\r\n        storeInfo[0].gsts = undefined;\r\n        let data = {\r\n            recommendedProduct: recommendedProduct[0],\r\n            storeInfo: storeInfo[0],\r\n            category,\r\n            color,\r\n        };\r\n        return res.status(200).send({ status: true, message: \"success\", data: data });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getProductBySlug= async (req, res) => {\r\n    try {\r\n        let slug = req.params.slug;\r\n        // console.log(slug);\r\n        let product = await productModel.findOne({slug:slug, isDeleted:false, stockStatus:'In_stock'}).populate([\"color_id\", \"categoryId\",\"brandId\",\"vendor_id\"]);\r\n        // console.log(product);\r\n        if (product) {\r\n            return res.status(200).send({ message: \"product info fetched\", data: product });\r\n        } else {\r\n            return res.status(200).send({ message: \"product info fetched\", data: null });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { getDashboardData,getProductBySlug };\r\n","const excelJs = require(\"exceljs\");\r\nconst csv2json = require(\"csvtojson\");\r\nlet csvToJsonC = require(\"convert-csv-to-json\");\r\nconst request = require(\"request\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst colorModel = require(\"../models/colorModel\");\r\nconst { uploadFile } = require(\"./imageController\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst { dateToLocalDateTime } = require(\"../utils/dateUtils\");\r\n\r\nconst checkProductIds = async (req, res, product) => {\r\n    let categoryIds = {};\r\n    let colorIds = {};\r\n    let vednorIdForx = \"\";\r\n    if (req.userModel === \"ADMIN\") {\r\n        let x = await vendorModel.findOne({ vendor_unique_id: product.vendor_id }).populate(\"brand_id\");\r\n        vednorIdForx = x._id;\r\n    }\r\n    if (Object.keys(categoryIds).length === 0) {\r\n        let x = await categoryModel.find();\r\n        for (let x1 of x) {\r\n            categoryIds[x1._id] = x1.sub_category;\r\n        }\r\n    }\r\n    if (Object.keys(colorIds).length === 0) {\r\n        let x = await colorModel.find();\r\n        for (let x1 of x) {\r\n            colorIds[x1._id] = x1._id;\r\n        }\r\n    }\r\n\r\n    if (product.brandId === \"\" || product.color_id === \"\" || product.categoryId === \"\" || product.subCatId === \"\") {\r\n        return {\r\n            status: false,\r\n            message: \"Please Provide All Dependent Ids for brand, color, category and sub category\",\r\n        };\r\n    }\r\n    if (categoryIds[product.categoryId] !== undefined) {\r\n        if (!categoryIds[product.categoryId].includes(product.subCatId)) {\r\n            return { status: false, message: \"Invalid Sub Category Id\" };\r\n        }\r\n    } else {\r\n        return { status: false, message: \"Invalid Category Id\" };\r\n    }\r\n\r\n    if (product.color_id.length > 0) {\r\n        // console.log(colorIds);\r\n        console.log(colorIds, product.color_id);\r\n        for (let x of product.color_id) {\r\n            // console.log(colorIds, x);\r\n            if (x !== \"\" && colorIds[x] === undefined) {\r\n                return { status: false, message: \"Invalid Color Id\" };\r\n            }\r\n        }\r\n    } else {\r\n        return { status: false, message: \"Color id required\" };\r\n    }\r\n    return {\r\n        status: true,\r\n        message: \"Everyhting is ok\",\r\n        vendorId: vednorIdForx,\r\n    };\r\n};\r\n\r\nconst exportIDs = async (req, res) => {\r\n    //req.userModel === 'ADMIN' || 'VENDOR'\r\n    //req.userId\r\n    try {\r\n        var workbook = new excelJs.Workbook();\r\n        var worksheet = workbook.addWorksheet(\"Brand\");\r\n        var worksheet2 = workbook.addWorksheet(\"Category & SubCategory & Colors\");\r\n\r\n        let categories = await categoryModel.find().populate(\"sub_category\");\r\n        let colors = await colorModel.find();\r\n        worksheet2.columns = [\r\n            { header: \"Category ID\", key: \"category_id\" },\r\n            { header: \"Category Name\", key: \"category_name\" },\r\n            { header: \"SubCategory ID\", key: \"subcategory_id\" },\r\n            { header: \"SubCategory Name\", key: \"subcategory_name\" },\r\n        ];\r\n        for (let cat of categories) {\r\n            Object.keys(cat[\"sub_category\"]).forEach((keys) => {\r\n                worksheet2.addRow({\r\n                    category_id: cat[\"_id\"].toString(),\r\n                    category_name: cat[\"category_name\"],\r\n                    subcategory_id: cat[\"sub_category\"][keys]._id.toString(),\r\n                    subcategory_name: cat[\"sub_category\"][keys].subcategory_name,\r\n                });\r\n            });\r\n        }\r\n        if (req.userModel === \"ADMIN\") {\r\n            let vendors = await vendorModel.find({ isActive: \"Active\", status: \"Approved\" }).populate(\"brand_id\");\r\n\r\n            worksheet.columns = [\r\n                { header: \"Vendor ID\", key: \"vendor_unique_id\" },\r\n                { header: \"Firm Name\", key: \"firmName\" },\r\n                { header: \"Brand ID\", key: \"brand_id\" },\r\n                { header: \"Brand Name\", key: \"brand_name\" },\r\n            ];\r\n\r\n            for (let singleVendor of vendors) {\r\n                Object.keys(singleVendor[\"brand_id\"]).forEach(function (key) {\r\n                    if (singleVendor.marginInPercentage > 0) {\r\n                        worksheet.addRow({\r\n                            vendor_unique_id: singleVendor[\"vendor_unique_id\"].toString(),\r\n                            firmName: singleVendor[\"firmName\"],\r\n                            brand_id: singleVendor[\"brand_id\"][key]._id.toString(),\r\n                            brand_name: singleVendor[\"brand_id\"][key].brand_name,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            let singleVendor = await vendorModel\r\n                .findById({\r\n                    _id: req.userId,\r\n                    isActive: \"Active\",\r\n                    status: \"Approved\",\r\n                })\r\n                .populate(\"brand_id\");\r\n            worksheet.columns = [\r\n                { header: \"Brand ID\", key: \"brand_id\" },\r\n                { header: \"Brand Name\", key: \"brand_name\" },\r\n            ];\r\n            Object.keys(singleVendor[\"brand_id\"]).forEach(function (key) {\r\n                worksheet.addRow({\r\n                    brand_id: singleVendor[\"brand_id\"][key]._id.toString(),\r\n                    brand_name: singleVendor[\"brand_id\"][key].brand_name,\r\n                });\r\n            });\r\n        }\r\n\r\n        worksheet.getRow(1).eachCell((cell) => {\r\n            cell.font = { bold: true };\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"F08080\" },\r\n            };\r\n        });\r\n        worksheet2.getRow(1).eachCell((cell) => {\r\n            cell.font = { bold: true };\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"9E99F7\" },\r\n            };\r\n        });\r\n        worksheet2.addRow();\r\n        worksheet2.addRow({\r\n            category_id: \"Color ID\",\r\n            category_name: \"Color Name\",\r\n        });\r\n        worksheet2.lastRow.eachCell((cell) => {\r\n            cell.font = { bold: true };\r\n            cell.pattern = \"solid\";\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"F08080\" },\r\n            };\r\n        });\r\n        for (let obj of colors) {\r\n            worksheet2.addRow({\r\n                category_id: obj._id.toString(),\r\n                category_name: obj.colorName,\r\n            });\r\n        }\r\n        worksheet.columns.forEach((column) => {\r\n            const lengths = column.values.map((v) => v.toString().length);\r\n            const maxLength = Math.max(...lengths.filter((v) => typeof v === \"number\"));\r\n            column.width = maxLength + 3;\r\n        });\r\n        worksheet2.columns.forEach((column) => {\r\n            const lengths = column.values.map((v) => v.toString().length);\r\n            const maxLength = Math.max(...lengths.filter((v) => typeof v === \"number\"));\r\n            column.width = maxLength + 3;\r\n        });\r\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n        res.setHeader(\"Content-Disposition\", `attachment; brandid.xlsx`);\r\n\r\n        return workbook.xlsx.write(res).then(() => {\r\n            res.status(200);\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst exportProductAddDemoSheet = async (req, res) => {\r\n    //req.userModel === 'ADMIN' || 'VENDOR'\r\n    try {\r\n        var workbook = new excelJs.Workbook();\r\n        var worksheet = workbook.addWorksheet(\"Add Bulk Product\");\r\n\r\n        let columnData = [\r\n            { header: \"Product Name\", key: \"product_name\" },\r\n            { header: \"SKU CODE\", key: \"skucode\" },\r\n            { header: \"HSN CODE\", key: \"hsncode\" },\r\n            { header: \"Brand ID\", key: \"brand_id\" },\r\n            { header: \"Category ID\", key: \"category_id\" },\r\n            { header: \"Sub Category ID\", key: \"subcategory_id\" },\r\n            { header: \"Color ID\", key: \"color_id\" },\r\n            { header: \"Lot Size\", key: \"lotsize\" },\r\n            { header: \"MRP\", key: \"mrp\" },\r\n            { header: \"GST\", key: \"gst\" },\r\n            { header: \"Seller Price\", key: \"seller_price\" },\r\n            { header: \"In Hand QTY\", key: \"in_hand_qty\" },\r\n            { header: \"Min Order QTY\", key: \"min_order_qty\" },\r\n            { header: \"Sole\", key: \"sole\" },\r\n            { header: \"Material\", key: \"material\" },\r\n            { header: \"Packing Type\", key: \"packing_type\" },\r\n            { header: \"Made In\", key: \"made_in\" },\r\n            { header: \"Weight\", key: \"weight\" },\r\n            { header: \"Description\", key: \"description\" },\r\n            { header: \"Thumbnail URL\", key: \"thumbnail_url\" },\r\n            { header: \"Multiple Images\", key: \"multiple_images\" },\r\n        ];\r\n        var data = {\r\n            product_name: \"Demo prouduct name\",\r\n            skucode: \"---\",\r\n            hsncode: \"---\",\r\n            brand_id: \"64b53---demo---id---747b\",\r\n            category_id: \"64b53---demo---id---747b\",\r\n            subcategory_id: \"64b53---demo---id---747b\",\r\n            color_id: \"64b53---demo---id---747b\",\r\n            lotsize: \"put multiple lot size seperat by ',' comma\",\r\n            mrp: \"100\",\r\n            gst: \"12\",\r\n            seller_price: \"00\",\r\n            in_hand_qty: \"00\",\r\n            min_order_qty: \"0\",\r\n            sole: \"--\",\r\n            material: \"--\",\r\n            packing_type: \"--\",\r\n            made_in: \"India\",\r\n            weight: \"0\",\r\n            description: \"This is demo Description\",\r\n            thumbnail_url: \"put url here\",\r\n            multiple_images: \"put multiple url seperated by ',' comma\",\r\n        };\r\n        if (req.userModel === \"ADMIN\") {\r\n            columnData.unshift({ header: \"Vendor ID\", key: \"vendor_id\" });\r\n            const newColumnData = [...columnData.slice(0, 12), { header: \"Margin\", key: \"margin\" }, { header: \"Selling GST\", key: \"sellingGST\" }, ...columnData.slice(12)];\r\n            columnData = newColumnData;\r\n            data.vendor_id = \"64b53---demo---id---747b\";\r\n            data.margin = 0;\r\n            data.sellingGST = 0;\r\n        }\r\n        worksheet.columns = columnData;\r\n        worksheet.addRow(data);\r\n        worksheet.getRow(1).eachCell((cell) => {\r\n            cell.font = { bold: true };\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"F08080\" },\r\n            };\r\n        });\r\n\r\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n        res.setHeader(\"Content-Disposition\", `attachment; brandid.xlsx`);\r\n\r\n        return workbook.xlsx.write(res).then(() => {\r\n            res.status(200);\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst csvToJson = async (req, res) => {\r\n    try {\r\n        vendorIds = {};\r\n        categoryIds = {};\r\n        colorIds = {};\r\n        let csvUrl = await uploadFile(req.files.csv);\r\n        let resJson = [];\r\n        await csv2json()\r\n            .fromStream(request.get(csvUrl))\r\n            .subscribe((json) => {\r\n                if (json[\"Product Name\"] !== \"\") {\r\n                    resJson.push(json);\r\n                }\r\n            });\r\n        let productData = {\r\n            vendor_id: \"\",\r\n            product_name: \"\",\r\n            sku_code: \"\",\r\n            hsn_code: \"\",\r\n            brandId: \"\",\r\n            color_id: \"\",\r\n            categoryId: \"\",\r\n            subCatId: \"\",\r\n            lotSizeQty: \"\",\r\n            mrp: \"\",\r\n            gst: \"\",\r\n            seller_price: \"\",\r\n            qty_in_hand: \"\",\r\n            min_order_qty: \"\",\r\n            sole: \"\",\r\n            material: \"\",\r\n            packing_type: \"\",\r\n            made_in: \"\",\r\n            weight: \"\",\r\n            description: \"\",\r\n        };\r\n        let productDataArr = [];\r\n        let vendorArr = [];\r\n        for (let Obj of resJson) {\r\n            if (Obj[\"Vendor ID\"] !== undefined) {\r\n                productData.vendor_id = Obj[\"Vendor ID\"];\r\n            }\r\n            if (Obj[\"Product Name\"] !== undefined) {\r\n                productData.product_name = Obj[\"Product Name\"];\r\n            }\r\n            if (Obj[\"SKU CODE\"] !== undefined) {\r\n                productData.sku_code = Obj[\"SKU CODE\"];\r\n            }\r\n            if (Obj[\"HSN CODE\"] !== undefined) {\r\n                productData.hsn_code = Obj[\"HSN CODE\"];\r\n            }\r\n            if (Obj[\"Brand ID\"] !== undefined) {\r\n                productData.brandId = Obj[\"Brand ID\"];\r\n            }\r\n            if (Obj[\"Category ID\"] !== undefined) {\r\n                productData.categoryId = Obj[\"Category ID\"];\r\n            }\r\n            if (Obj[\"Sub Category ID\"] !== undefined) {\r\n                productData.subCatId = Obj[\"Sub Category ID\"];\r\n            }\r\n            if (Obj[\"Color ID\"] !== undefined) {\r\n                productData.color_id = Obj[\"Color ID\"].split(\",\").flatMap((el) => {\r\n                    if (el !== \"\" && el !== \" \") {\r\n                        return el.trim();\r\n                    }\r\n                    return [];\r\n                });\r\n            }\r\n            if (Obj[\"Lot Size\"] !== undefined) {\r\n                productData.lotSizeQty = Obj[\"Lot Size\"].split(\",\").flatMap((el) => {\r\n                    if (el !== \"\" && el !== \" \") {\r\n                        return el.trim();\r\n                    }\r\n                    return [];\r\n                });\r\n            }\r\n            if (Obj[\"MRP\"] !== undefined) {\r\n                productData.mrp = Number(Obj[\"MRP\"]);\r\n            }\r\n            if (Obj[\"GST\"] !== undefined) {\r\n                productData.gst = Number(Obj[\"GST\"]);\r\n            }\r\n            if (Obj[\"Seller Price\"] !== undefined) {\r\n                productData.seller_price = Number(Obj[\"Seller Price\"]);\r\n            }\r\n            if (Obj[\"Margin\"] !== undefined) {\r\n                productData.margin = Number(Obj[\"Margin\"]);\r\n            }\r\n            if (Obj[\"Selling GST\"] !== undefined) {\r\n                productData.sellingGST = Number(Obj[\"Selling GST\"]);\r\n            }\r\n            if (Obj[\"In Hand QTY\"] !== undefined) {\r\n                productData.qty_in_hand = Number(Obj[\"In Hand QTY\"]);\r\n            }\r\n            if (Obj[\"Min Order QTY\"] !== undefined) {\r\n                productData.min_order_qty = Number(Obj[\"Min Order QTY\"]);\r\n            }\r\n            if (Obj[\"Sole\"] !== undefined) {\r\n                productData.sole = Obj[\"Sole\"];\r\n            }\r\n            if (Obj[\"Material\"] !== undefined) {\r\n                productData.material = Obj[\"Material\"];\r\n            }\r\n            if (Obj[\"Packing Type\"] !== undefined) {\r\n                productData.packing_type = Obj[\"Packing Type\"];\r\n            }\r\n            if (Obj[\"Made In\"] !== undefined) {\r\n                productData.made_in = Obj[\"Made In\"];\r\n            }\r\n            if (Obj[\"Weight\"] !== undefined) {\r\n                productData.weight = Obj[\"Weight\"];\r\n            }\r\n            if (Obj[\"Description\"] !== undefined) {\r\n                productData.description = Obj[\"Description\"];\r\n            }\r\n            if (Obj[\"Thumbnail URL\"] !== undefined) {\r\n                productData.thumbnail_pic = Obj[\"Thumbnail URL\"];\r\n            }\r\n            if (Obj[\"Multiple Images\"] !== undefined) {\r\n                productData.multiple_pics = Obj[\"Multiple Images\"].split(\",\").map((el) => el.trim());\r\n            }\r\n            if (req.userModel === \"VENDOR\") {\r\n                productData.vendor_id = req.userId;\r\n            }\r\n            let statusX = await checkProductIds(req, res, productData);\r\n            if (statusX.status) {\r\n                if (req.userModel === \"ADMIN\") {\r\n                    if (vendorArr.indexOf(statusX.vendorId) === -1) {\r\n                        vendorArr.push(statusX.vendorId);\r\n                    }\r\n                    productData.vendor_id = statusX.vendorId;\r\n                    productData.status = \"Approved\";\r\n                }\r\n            } else {\r\n                return res.status(400).send({ status: false, message: statusX.message });\r\n            }\r\n\r\n            productDataArr.push(productData);\r\n            productData = {\r\n                vendor_id: \"\",\r\n                product_name: \"\",\r\n                sku_code: \"\",\r\n                hsn_code: \"\",\r\n                brandId: \"\",\r\n                color_id: \"\",\r\n                categoryId: \"\",\r\n                subCatId: \"\",\r\n                lotSizeQty: \"\",\r\n                mrp: \"\",\r\n                gst: \"\",\r\n                seller_price: \"\",\r\n                qty_in_hand: \"\",\r\n                min_order_qty: \"\",\r\n                sole: \"\",\r\n                material: \"\",\r\n                packing_type: \"\",\r\n                made_in: \"\",\r\n                weight: \"\",\r\n                description: \"\",\r\n                thumbnail_pic: \"\",\r\n                multiple_pics: [],\r\n            };\r\n            if (req.userModel === \"ADMIN\") {\r\n                productData.margin = \"\";\r\n                productData.sellingGST = \"\";\r\n            }\r\n        }\r\n        if (req.userModel === \"ADMIN\") {\r\n            let newProductObj = await productModel.insertMany(productDataArr);\r\n            let arr = [];\r\n            for (let vdr of vendorArr) {\r\n                let x = await vendorModel.findById(vdr);\r\n                arr.push(x);\r\n            }\r\n            for (let prdct of newProductObj) {\r\n                let obj = arr.find((e) => e._id.toString() === prdct.vendor_id.toString());\r\n                if (obj) {\r\n                    obj.products.push(prdct);\r\n                }\r\n            }\r\n            for (let vdr of arr) {\r\n                await vdr.save();\r\n            }\r\n        } else {\r\n            let vendorObj = await vendorModel.findById(req.userId);\r\n            let newProductObj = await productModel.insertMany(productDataArr);\r\n            vendorObj.products.push(...newProductObj);\r\n            await vendorObj.save();\r\n        }\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Bulk Product Added Successfully\",\r\n            data: { categoryIds, colorIds, vendorIds },\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst exportOrderReport = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let orders = await orderModel\r\n            .find({ _id: { $in: data } })\r\n            .populate([\r\n                \"vendorId\",\r\n                \"payment_id\",\r\n                \"order_status_id\",\r\n                \"ordered_products\",\r\n                \"purchaseInvoice\",\r\n                \"saleInvoice\",\r\n                { path: \"CouponCode\", strictPopulate: false },\r\n                { path: \"customer_id\", model: \"Customer\", strictPopulate: false, populate: { path: \"defaultAddress\", model: \"CustomerAddress\", strictPopulate: false } },\r\n            ]);\r\n        let ordersArr = [];\r\n        let orderData = {};\r\n        let productLength = 0;\r\n\r\n        for (let order of orders) {\r\n            orderData[\"orderId\"] = order.orderId;\r\n            orderData[\"orderDate\"] = dateToLocalDateTime(order.order_date);\r\n            orderData[\"invoiceNo\"] = order.saleInvoice ? order.saleInvoice.invoiceNo : \"\";\r\n            orderData[\"invoiceDate\"] = order.saleInvoice ? dateToLocalDateTime(order.saleInvoice.invoiceDate) : \"\";\r\n            orderData[\"productsLength\"] = order.ordered_products ? order.ordered_products.products.length : \"\";\r\n            if (order.ordered_products && order.ordered_products.products.length > productLength) {\r\n                productLength = order.ordered_products.products.length;\r\n            }\r\n            if (order.ordered_products) {\r\n                for (let x1 = 0; x1 < order.ordered_products.products.length; x1++) {\r\n                    orderData[`sale_sku_code_${x1 + 1}`] = order.ordered_products.products[x1].skuCode;\r\n                    orderData[`purchase_sku_code_${x1 + 1}`] = order.ordered_products.products[x1].skuCode;\r\n                    orderData[`sale_lotSize_${x1 + 1}`] = order.ordered_products.products[x1].lotSize;\r\n                    orderData[`purchase_lotSize_${x1 + 1}`] = order.ordered_products.products[x1].lotSize;\r\n                    orderData[`sale_gst_percentage_${x1 + 1}`] = order.ordered_products.products[x1].selling_gst;\r\n                    orderData[`purchase_gst_percentage_${x1 + 1}`] = order.ordered_products.products[x1].seller_gst;\r\n                }\r\n            }\r\n            orderData[\"soldByGst\"] = order.saleInvoice ? order.saleInvoice.soldBy.gst : \"\";\r\n            orderData[\"customerName\"] = order.customer_id.name;\r\n            orderData[\"customerPhone\"] = order.customer_id.phone;\r\n            orderData[\"customerAddress\"] = order.customer_id.defaultAddress.address;\r\n            orderData[\"customerCity\"] = order.customer_id.defaultAddress.city;\r\n            orderData[\"customerState\"] = order.customer_id.defaultAddress.state;\r\n            orderData[\"customerPincode\"] = order.customer_id.defaultAddress.pincode;\r\n            orderData[\"customerGstNo\"] = order.customer_id.gstNo;\r\n            orderData[\"customerAltPhone\"] = order.customer_id.alternate_phone;\r\n            orderData[\"saleGrandTotal\"] = order.grand_total;\r\n            orderData[\"saleInvGrandTotal\"] = order.grand_total;\r\n            orderData[\"saleDiscount\"] = order.discounted_amount;\r\n            orderData[\"saleNetTotal\"] = Number(order.grand_total) - Number(order.discounted_amount);\r\n            orderData[\"saleTaxableAmt\"] = order.total;\r\n            orderData[\"saleGstType\"] = order.saleInvoice ? order.saleInvoice.gstType : \"\";\r\n            orderData[\"saleGstAmt\"] = order.GST_amount;\r\n            orderData[\"sellerName\"] = order.vendorId.representativeName;\r\n            orderData[\"sellerPhone\"] = order.vendorId.mobileNo;\r\n            orderData[\"sellerAddress\"] = order.vendorId.pickupAddress;\r\n            orderData[\"sellerCity\"] = order.vendorId.pickupCity;\r\n            orderData[\"sellerState\"] = order.vendorId.pickupState;\r\n            orderData[\"sellerPincode\"] = order.vendorId.pickupPincode;\r\n            orderData[\"sellerGstNo\"] = order.vendorId.gstNo;\r\n            orderData[\"sellerAltNo\"] = order.vendorId.altMobileNo;\r\n            orderData[\"purchaseGrandTotal\"] = order.vendorAmtInfo.grandTotal;\r\n            orderData[\"purchaseInvGrandTotal\"] = order.vendorAmtInfo.grandTotal;\r\n            orderData[\"purchaseNetTotal\"] = order.vendorAmtInfo.grandTotal;\r\n            orderData[\"purchaseTaxableAmt\"] = order.vendorAmtInfo.total;\r\n            orderData[\"purchaseGstType\"] = order.purchaseInvoice ? order.purchaseInvoice.gstType : \"\";\r\n            orderData[\"purchaseGstAmt\"] = order.vendorAmtInfo.gstAmt;\r\n            orderData[\"orderJourneyFinalStatus\"] = order.order_status_id.status;\r\n            for (let orderStatusList of order.order_status_id.statusList) {\r\n                let actionTakenBy = \"\";\r\n                let updatedDate = dateToLocalDateTime(orderStatusList.updatedAt);\r\n                if (orderStatusList.updatedBy.admin) actionTakenBy = \"ADMIN\";\r\n                if (orderStatusList.updatedBy.vendor) actionTakenBy = \"SELLER\";\r\n                orderData[orderStatusList.status] = `${updatedDate} | ${actionTakenBy}`;\r\n            }\r\n            ordersArr.push(orderData);\r\n            orderData = {};\r\n        }\r\n        var workbook = new excelJs.Workbook();\r\n        var worksheet = workbook.addWorksheet(\"Order Report\");\r\n        let orderCol = [\r\n            { header: \"Order ID\", key: \"orderId\" },\r\n            { header: \"Order date and time\", key: \"orderDate\" },\r\n            { header: \"Invoice No\", key: \"invoiceNo\" },\r\n            { header: \"Invoice date\", key: \"invoiceDate\" },\r\n            { header: \"Order Quantity\", key: \"productsLength\" },\r\n            { header: \"factorEz GST\", key: \"soldByGst\" },\r\n            { header: \"STATE\", key: \"orderStatus\" },\r\n        ];\r\n        let buyerCol = [\r\n            { header: \"Buyer Name\", key: \"customerName\" },\r\n            { header: \"Buyer Phone Number\", key: \"customerPhone\" },\r\n            { header: \"Full Address\", key: \"customerAddress\" },\r\n            { header: \"Buyer City\", key: \"customerCity\" },\r\n            { header: \"Buyer State\", key: \"customerState\" },\r\n            { header: \"Pincode\", key: \"customerPincode\" },\r\n            { header: \"Gst No.\", key: \"customerGstNo\" },\r\n            { header: \"alternative phone\", key: \"customerAltPhone\" },\r\n        ];\r\n        let saleCol = [\r\n            { header: \"Total Amount\", key: \"saleGrandTotal\" },\r\n            { header: \"Discount\", key: \"saleDiscount\" },\r\n            { header: \"Final amount/ sales\", key: \"saleNetTotal\" },\r\n            { header: \"Invoice Value\", key: \"saleInvGrandTotal\" },\r\n            { header: \"Taxable value\", key: \"saleTaxableAmt\" },\r\n            { header: \"Gst Type\", key: \"saleGstType\" },\r\n            { header: \"Gst amount\", key: \"saleGstAmt\" },\r\n        ];\r\n        let sellerCol = [\r\n            { header: \"Seller name\", key: \"sellerName\" },\r\n            { header: \"Seller phone Number\", key: \"sellerPhone\" },\r\n            { header: \"Full Address\", key: \"sellerAddress\" },\r\n            { header: \"Seller City\", key: \"sellerCity\" },\r\n            { header: \"Seller State\", key: \"sellerState\" },\r\n            { header: \"Pincode\", key: \"sellerPincode\" },\r\n            { header: \"Gst No.\", key: \"sellerGstNo\" },\r\n            { header: \"alternative phone\", key: \"sellerAltNo\" },\r\n        ];\r\n        let purchaseCol = [\r\n            { header: \"Total Amount\", key: \"purchaseGrandTotal\" },\r\n            { header: \"Seller Discount\", key: \"purchaseDiscount\" },\r\n            { header: \"Final amount/ purchase\", key: \"purchaseNetTotal\" },\r\n            { header: \"invoice value\", key: \"purchaseInvGrandTotal\" },\r\n            { header: \"Taxable value\", key: \"purchaseTaxableAmt\" },\r\n            { header: \"Gst Type\", key: \"purchaseGstType\" },\r\n            { header: \"Gst amount\", key: \"purchaseGstAmt\" },\r\n        ];\r\n        let orderJourney = [\r\n            { header: \"Final Status\", key: \"orderJourneyFinalStatus\" },\r\n            { header: \"Delivered\", key: \"DELIVERED\" },\r\n            { header: \"Out For Delivery\", key: \"OUT_FOR_DELIVERY\" },\r\n            { header: \"Return delivered to seller/warehouse\", key: \"RETURNED_RTO_DELIVERED\" },\r\n            { header: \"Return\", key: \"RETURNED\" },\r\n            { header: \"Pickup-done/In transit\", key: \"PICKUP_DONE\" },\r\n            { header: \"Pickup-Aligned\", key: \"PICKUP_ALIGNED\" },\r\n            { header: \"Ready to dispatch\", key: \"READY_TO_DISPATCH\" },\r\n            { header: \"Confirmed/in-process\", key: \"CONFIRMED\" },\r\n            { header: \"cancelled\", key: \"CANCELLED\" },\r\n            { header: \"Remarks\", key: \"remarks\" },\r\n        ];\r\n        for (let m = 0; m < productLength; m++) {\r\n            let saleSkuCol = { header: `SKU code ${m + 1}`, key: `sale_sku_code_${m + 1}` };\r\n            let purchaseSkuCol = { header: `SKU code ${m + 1}`, key: `purchase_sku_code_${m + 1}` };\r\n            let saleGstCol = { header: `GST percentage ${m + 1}`, key: `sale_gst_percentage_${m + 1}` };\r\n            let purchaseGstCol = { header: `GST percentage ${m + 1}`, key: `purchase_gst_percentage_${m + 1}` };\r\n            let saleLotSizeCol = { header: `Lot Set/Size set ${m + 1}`, key: `sale_lotSize_${m + 1}` };\r\n            let purchaseLotSizeCol = { header: `Lot Set/Size set ${m + 1}`, key: `purchase_lotSize_${m + 1}` };\r\n            saleCol.push(saleSkuCol, saleLotSizeCol, saleGstCol);\r\n            purchaseCol.push(purchaseSkuCol, purchaseLotSizeCol, purchaseGstCol);\r\n        }\r\n        let columnData = [...orderCol, ...buyerCol, ...saleCol, ...sellerCol, ...purchaseCol, ...orderJourney];\r\n        worksheet.columns = columnData;\r\n        for (let x of ordersArr) {\r\n            worksheet.addRow(x);\r\n        }\r\n        let orderLen = orderCol.length;\r\n        let buyerLen = buyerCol.length + orderLen;\r\n        let saleLen = saleCol.length + buyerLen;\r\n        let sellerLen = sellerCol.length + saleLen;\r\n        let purchaseLen = purchaseCol.length + sellerLen;\r\n        let orderJLen = orderJourney.length + purchaseLen;\r\n        worksheet.getRow(1).height = 20;\r\n        worksheet.getRow(1).eachCell((cell, colNum) => {\r\n            cell.border = {\r\n                top: { style: \"thin\" },\r\n                right: { style: \"thin\" },\r\n                bottom: { style: \"thin\" },\r\n                left: { style: \"thin\" },\r\n            };\r\n            cell.font = { bold: true };\r\n            if (colNum <= orderLen) {\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"d7ff38\" },\r\n                };\r\n            } else if (colNum <= buyerLen) {\r\n                cell.font = { color: { argb: \"ffffff\" } };\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"2e397d\" },\r\n                };\r\n            } else if (colNum <= saleLen) {\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"cad1fa\" },\r\n                };\r\n            } else if (colNum <= sellerLen) {\r\n                cell.font = { color: { argb: \"ffffff\" } };\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"556b58\" },\r\n                };\r\n            } else if (colNum <= purchaseLen) {\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"07f027\" },\r\n                };\r\n            } else {\r\n                cell.font = { color: { argb: \"ffffff\" } };\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"288a70\" },\r\n                };\r\n            }\r\n        });\r\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n        res.setHeader(\"Content-Disposition\", `attachment; orderReport.xlsx`);\r\n        return workbook.xlsx.write(res).then(() => {\r\n            res.status(200);\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { exportProductAddDemoSheet, exportIDs, csvToJson, exportOrderReport };\r\n","const HomepageModel = require(\"../models/HomepageModel\");\r\n\r\nconst addFeaturedProducts = async (req, res) => {\r\n    try {\r\n        let { newArrival, featuredProduct, bestSelling } = req.body;\r\n        let home = await HomepageModel.find();\r\n        if (home.length > 0) {\r\n            if (featuredProduct) {\r\n                if (!home[0].featuredProduct.includes(featuredProduct)) {\r\n                    home[0].featuredProduct.push(featuredProduct);\r\n                }\r\n            }\r\n            if (newArrival) {\r\n                if (!home[0].newArrival.includes(newArrival)) {\r\n                    home[0].newArrival.push(newArrival);\r\n                }\r\n            }\r\n            if (bestSelling) {\r\n                if (!home[0].bestSelling.includes(bestSelling)) {\r\n                    home[0].bestSelling.push(bestSelling);\r\n                }\r\n            }\r\n            await home[0].save();\r\n        } else {\r\n            let data = {};\r\n            if (featuredProduct) {\r\n                data.featuredProduct = featuredProduct;\r\n            }\r\n            if (newArrival) {\r\n                data.newArrival = newArrival;\r\n            }\r\n            if (bestSelling) {\r\n                data.bestSelling = bestSelling;\r\n            }\r\n            await HomepageModel.create(data);\r\n        }\r\n\r\n        return res.status(200).send({ status: true, message: \"Product Added to respective sections...\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst getFeaturedProduct = async (req, res) => {\r\n    try {\r\n        let products = await HomepageModel.find().populate([\r\n            { path: \"featuredProduct\", model: \"Product\", populate: { path: \"vendor_id\", model: \"Vendor\" } },\r\n            { path: \"bestSelling\", model: \"Product\", populate: { path: \"vendor_id\", model: \"Vendor\" } },\r\n            { path: \"newArrival\", model: \"Product\", populate: { path: \"vendor_id\", model: \"Vendor\" } },\r\n        ]);\r\n        return res.status(200).send({ status: true, message: \"fetched...\", data: products[0] ? products[0] : null });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst removeFeaturedProduct = async (req, res) => {\r\n    try {\r\n        let { key, id } = req.body;\r\n        let home = await HomepageModel.find();\r\n        if (home.length > 0) {\r\n            if (key === \"featuredProduct\") {\r\n                let idx = home[0].featuredProduct.findIndex((e) => e._id.toString() === id);\r\n                if (idx >= 0) {\r\n                    home[0].featuredProduct.splice(idx, 1);\r\n                }\r\n            }\r\n            if (key === \"bestSelling\") {\r\n                let idx = home[0].bestSelling.findIndex((e) => e._id.toString() === id);\r\n                if (idx >= 0) {\r\n                    home[0].bestSelling.splice(idx, 1);\r\n                }\r\n            }\r\n            if (key === \"newArrival\") {\r\n                let idx = home[0].newArrival.findIndex((e) => e._id.toString() === id);\r\n                if (idx >= 0) {\r\n                    home[0].newArrival.splice(idx, 1);\r\n                }\r\n            }\r\n            await home[0].save();\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Removed...\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addFeaturedProducts,\r\n    getFeaturedProduct,\r\n    removeFeaturedProduct,\r\n};\r\n","// Generate Random ID of given length\r\nfunction generateRandomID(length, preFix) {\r\n    let id = preFix ? preFix : '';\r\n    const digits = \"0123456789\";\r\n    for (let i = 0; i < length - 5; i++) {\r\n        const randomIndex = Math.floor(Math.random() * digits.length);\r\n        id += digits[randomIndex];\r\n    }\r\n    id += Date.now().toString().slice(8);\r\n    return id;\r\n}\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n}\r\n\r\nmodule.exports = { generateRandomID, generateRandomAlphaNumericID };\r\n","const express = require(\"express\");\r\nconst { initializeApp } = require(\"firebase/app\");\r\nconst { getStorage, ref, getDownloadURL, uploadBytesResumable } = require(\"firebase/storage\");\r\nconst aws = require(\"aws-sdk\");\r\nrequire(\"aws-sdk/lib/maintenance_mode_message\").suppress = true;\r\nconst config = require(\"../middlewares/firebase\");\r\nconst { awsS3Bucket, awsAccessKey, awsSecretKey, awsS3Region } = require(\"../middlewares/config\");\r\n//Initialize a firebase application\r\ninitializeApp(config.firebaseConfig);\r\n\r\n// Initialize Cloud Storage and get a reference to the service\r\nconst storage = getStorage();\r\nconst uploadImage = async (blobFile) => {\r\n    const dateTime = giveCurrentDateTime();\r\n    const storageRef = ref(storage, `files/${dateTime.toString().replace(\" \", \"_\") + \"_\" + blobFile.name.replace(\" \", \"_\")}`);\r\n\r\n    // // Create file metadata including the content type\r\n    const metadata = {\r\n        contentType: blobFile.mimetype,\r\n    };\r\n\r\n    // // Upload the file in the bucket storage\r\n    const snapshot = await uploadBytesResumable(storageRef, blobFile.data, metadata);\r\n    //by using uploadBytesResumable we can control the progress of uploading like pause, resume, cancel\r\n\r\n    // Grab the public url\r\n    const downloadURL = await getDownloadURL(snapshot.ref);\r\n    return {\r\n        message: \"file uploaded to firebase storage\",\r\n        name: snapshot.metadata.name,\r\n        type: blobFile.mimetype,\r\n        imageURL: downloadURL,\r\n    };\r\n};\r\n\r\nconst giveCurrentDateTime = () => {\r\n    const today = new Date();\r\n    const date = today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\r\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    const dateTime = date + \" \" + time;\r\n    return dateTime;\r\n};\r\n\r\naws.config.update({\r\n    accessKeyId: awsAccessKey,\r\n    secretAccessKey: awsSecretKey,\r\n    region: awsS3Region,\r\n});\r\n\r\nlet uploadFile = async (image) => {\r\n    return new Promise(function (resolve, reject) {\r\n        let s3 = new aws.S3();\r\n        const dateTime = giveCurrentDateTime();\r\n        var uploadParams = {\r\n            Bucket: awsS3Bucket,\r\n            Key: \"images/\" + dateTime.toString().replace(\" \", \"_\") + \"_\" + image.name.replace(\" \", \"_\"),\r\n            Body: image.data,\r\n            ContentType: image.mimetype,\r\n        };\r\n        s3.upload(uploadParams, function (err, data) {\r\n            if (err) {\r\n                return reject({ error: err });\r\n            }\r\n            return resolve(data.Location);\r\n        });\r\n    });\r\n};\r\n\r\nmodule.exports = { uploadImage, uploadFile };\r\n","const customerModel = require(\"../models/customerModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst businessModel = require(\"../models/businessModel\");\r\nconst invoiceModel = require(\"../models/invoiceModel\");\r\nconst invoiceNoModel = require(\"../models/invoiceNoModel\");\r\nconst customerAddressModel = require(\"../models/customerAddressModel\");\r\nconst orderedProductModel = require(\"../models/orderedProductModel\");\r\nconst { generatePdf } = require(\"../utils/generatePdf\");\r\nconst { dateToLocalDateTime } = require(\"../utils/dateUtils\");\r\nconst { financialYear } = require(\"../utils/getFinancialYear\");\r\n\r\nconst generatePurchaseInvoice = async (data) => {\r\n    try {\r\n        let { vendor_id, order_id, gstAmount, totalAmount } = data;\r\n        let vendor = await vendorModel.findById(vendor_id);\r\n        let business = await businessModel.find();\r\n        if (business.length === 0 || !business[0].defaultGST) {\r\n            return { status: false, err: \"Default gst not found\" };\r\n        }\r\n\r\n        let invNo = await invoiceNoModel.findOne({ invoiceNoType: \"PURCHASE\" });\r\n        let fY = financialYear();\r\n        if (!invNo) {\r\n            invNo = await invoiceNoModel.create({\r\n                invoiceNo: 1,\r\n                invoiceYear: fY,\r\n                invoiceNoLength: 6,\r\n                invoiceNoType: \"PURCHASE\",\r\n            });\r\n        }\r\n        if (Number(fY) !== invNo.invoiceYear) {\r\n            invNo.invoiceNo = 1;\r\n            invNo.invoiceYear = fY;\r\n        }\r\n        let strInvNumber = \"0000000000\" + invNo.invoiceNo;\r\n        let invNumber = `FPIN${invNo.invoiceYear}${strInvNumber.substring(strInvNumber.length - invNo.invoiceNoLength)}`;\r\n        invNo.invoiceNo += 1;\r\n        let generateDate = new Date();\r\n        let invData = {\r\n            invoiceNo: invNumber,\r\n            invoiceDate: generateDate,\r\n            vendor_id,\r\n            order_id,\r\n            gstAmount: gstAmount.toFixed(2),\r\n            totalAmount: totalAmount.toFixed(2),\r\n            invoiceType: \"PURCHASE\",\r\n        };\r\n        if (vendor.gstNo.substring(0, 2) === business[0].defaultGST.gstNo.substring(0, 2)) {\r\n            invData.gstType = \"CGST_SGST\";\r\n        } else {\r\n            invData.gstType = \"IGST\";\r\n        }\r\n\r\n        invData.soldBy = {\r\n            name: vendor.firmName,\r\n            address: vendor.invoiceAddress,\r\n            phone: vendor.mobileNo,\r\n            gst: vendor.gstNo,\r\n        };\r\n\r\n        invData.shippingAddress = {\r\n            name: business[0].business_name,\r\n            address: business[0].defaultGST.pickupAddress,\r\n            phone: business[0].contactNo,\r\n            gst: business[0].defaultGST.gstNo,\r\n        };\r\n        invData.billingAddress = {\r\n            name: business[0].business_name,\r\n            address: business[0].defaultGST.pickupAddress,\r\n            phone: business[0].contactNo,\r\n            gst: business[0].defaultGST.gstNo,\r\n        };\r\n        let invRes = await invoiceModel.create(invData);\r\n        await invNo.save();\r\n        return { status: true, invoice: invRes };\r\n    } catch (err) {\r\n        return { status: false, err: err };\r\n    }\r\n};\r\nconst generateSaleInvoice = async (data) => {\r\n    try {\r\n        let { customer_id, order_id, gstAmount, totalAmount, address } = data;\r\n        let customer = await customerModel.findById(customer_id);\r\n        let business = await businessModel.find();\r\n        if (business.length === 0 || !business[0].defaultGST) {\r\n            return { status: false, err: \"Default gst not found\" };\r\n        }\r\n\r\n        let invNo = await invoiceNoModel.findOne({ invoiceNoType: \"SALE\" });\r\n        let fY = financialYear();\r\n        if (!invNo) {\r\n            invNo = await invoiceNoModel.create({\r\n                invoiceNo: 1,\r\n                invoiceYear: fY,\r\n                invoiceNoLength: 6,\r\n                invoiceNoType: \"SALE\",\r\n            });\r\n        }\r\n        if (Number(fY) !== invNo.invoiceYear) {\r\n            invNo.invoiceNo = 1;\r\n            invNo.invoiceYear = fY;\r\n        }\r\n        let strInvNumber = \"0000000000\" + invNo.invoiceNo;\r\n        let invNumber = `FSIN${invNo.invoiceYear}${strInvNumber.substring(strInvNumber.length - invNo.invoiceNoLength)}`;\r\n        invNo.invoiceNo += 1;\r\n        let generateDate = new Date();\r\n        let invData = {\r\n            invoiceNo: invNumber,\r\n            invoiceDate: generateDate,\r\n            customer_id,\r\n            order_id,\r\n            gstAmount: gstAmount.toFixed(2),\r\n            totalAmount: totalAmount.toFixed(2),\r\n            invoiceType: \"SALE\",\r\n        };\r\n\r\n        if (customer.defaultAddress.stateCode === business[0].defaultGST.gstNo.substring(0, 2)) {\r\n            invData.gstType = \"CGST_SGST\";\r\n        } else {\r\n            invData.gstType = \"IGST\";\r\n        }\r\n        invData.soldBy = {\r\n            name: business[0].business_name,\r\n            address: business[0].defaultGST.pickupAddress,\r\n            phone: business[0].contactNo,\r\n            gst: business[0].defaultGST.gstNo,\r\n        };\r\n        invData.shippingAddress = {\r\n            name: customer.name,\r\n            address: address.address,\r\n            phone: customer.phone,\r\n            gst: customer.gstNo,\r\n        };\r\n        invData.billingAddress = {\r\n            name: customer.name,\r\n            address: address.address,\r\n            phone: customer.phone,\r\n            gst: customer.gstNo,\r\n        };\r\n        let invRes = await invoiceModel.create(invData);\r\n\r\n        await invNo.save();\r\n        return { status: true, invoice: invRes };\r\n    } catch (err) {\r\n        return { status: false, err: err };\r\n    }\r\n};\r\n\r\nconst getAllSaleInvoice = async (req, res) => {\r\n    try {\r\n        let userType = req.userModel;\r\n        let invoices = null;\r\n        if (userType === \"ADMIN\") {\r\n            invoices = await invoiceModel.find({ invoiceType: \"SALE\" });\r\n        } else {\r\n            invoices = await invoiceModel.find({ invoiceType: \"PURCHASE\" });\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Invoice fetched successfully...\", data: invoices });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst getAllPurchaseInvoice = async (req, res) => {\r\n    try {\r\n        let invoices = [];\r\n        if (req.userModel === \"ADMIN\") {\r\n            invoices = await invoiceModel.find({ invoiceType: \"PURCHASE\" });\r\n        }\r\n        if (req.userModel === \"VENDOR\") {\r\n            invoices = await invoiceModel.find({ invoiceType: \"PURCHASE\", vendor_id: req.userId });\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Invoice fetched successfully...\", data: invoices });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst data = {\r\n    logo: \"\",\r\n    brandName: \"\",\r\n    soldBy: \"\",\r\n    soldByAddress: \"\",\r\n    soldByGst: \"\",\r\n    invoiceNo: \"\",\r\n    orderId: \"\",\r\n    orderDate: \"\",\r\n    invoiceDate: \"\",\r\n    billToName: \"\",\r\n    billToAddress: \"\",\r\n    billToPhone: \"\",\r\n    billToGST: \"\",\r\n    shipToName: \"\",\r\n    shipToAddress: \"\",\r\n    shipToPhone: \"\",\r\n    shipToGST: \"\",\r\n    tableRow: [],\r\n    totalAmt: \"\",\r\n    totalCGSTAmt: \"\",\r\n    totalSGSTAmt: \"\",\r\n    totalIGSTAmt: \"\",\r\n    taxableAmt: \"\",\r\n    totalTaxAmt: \"\",\r\n    grossTotalAmt: \"\",\r\n    discountAmt: \"\",\r\n    netPayableAmount: \"\",\r\n};\r\ndata.tableRow = [\r\n    {\r\n        sno: \"1\",\r\n        productName: \"Demo Product 1\",\r\n        color: \"Black\",\r\n        sizeSet: \"5/2 7/2 8/2 9/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"5\",\r\n        rate: \"800\",\r\n        total: \"4000\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"480\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"480\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"2\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"3\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"4\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"5\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"6\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"7\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"8\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"9\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"10\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"11\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"12\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"13\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"14\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"15\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n];\r\ndata.logo = \"https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png\";\r\ndata.brandName = \"Shoes House\";\r\ndata.soldBy = \"Mohit Shoes\";\r\ndata.soldByAddress = \"Vinayak logistic Park, Village Hinaura,hasanganj, Unnao-209859, Uttar Pradesh, Lucknow, UTTAR PRADESH, India - 209859, IN-UP\";\r\ndata.soldByGst = \"07AABCU9603R1ZX\";\r\ndata.invoiceNo = \"FSIN2300000007\";\r\n\r\nconst downoadInvoiceByInvoiceNumber = async (req, res) => {\r\n    try {\r\n        let invoiceNumber = req.params.invoicenumber;\r\n        let invoicetype = req.params.invoicetype;\r\n\r\n        let invoice = await invoiceModel.findOne({ invoiceNo: invoiceNumber }).populate(\"order_id\");\r\n        if (!invoice) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (invoicetype === \"PURCHASE\" && !invoice.vendor_id) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let orderedProduct = await orderedProductModel.findOne({ order_id: invoice.order_id }).populate({ path: \"products.product_id\", model: \"Product\" });\r\n        if (!orderedProduct) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let business = await businessModel.find();\r\n        if (business.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (invoicetype === \"PURCHASE\") {\r\n            let invData = {\r\n                logo: business[0].invoiceLogo,\r\n                brandName: business[0].business_name,\r\n                soldBy: invoice.soldBy.name,\r\n                soldByAddress: invoice.soldBy.address,\r\n                soldByPhone: invoice.soldBy.phone,\r\n                soldByGst: invoice.soldBy.gst,\r\n                invoiceNo: invoiceNumber,\r\n                orderId: invoice.order_id.orderId,\r\n                orderDate: dateToLocalDateTime(invoice.order_id.order_date),\r\n                invoiceDate: dateToLocalDateTime(invoice.invoiceDate),\r\n                billToName: invoice.billingAddress.name,\r\n                billToAddress: invoice.billingAddress.address,\r\n                billToPhone: invoice.billingAddress.phone,\r\n                billToGST: invoice.billingAddress.gst,\r\n                shipToName: invoice.shippingAddress.name,\r\n                shipToAddress: invoice.shippingAddress.address,\r\n                shipToPhone: invoice.shippingAddress.phone,\r\n                shipToGST: invoice.shippingAddress.gst,\r\n                tableRow: [],\r\n                totalAmt: \"₹\" + invoice.totalAmount,\r\n                totalCGSTAmt: \"\",\r\n                totalSGSTAmt: \"\",\r\n                totalIGSTAmt: \"\",\r\n                taxableAmt: invoice.totalAmount,\r\n                totalTaxAmt: invoice.gstAmount,\r\n                grossTotalAmt: (Number(invoice.gstAmount) + Number(invoice.totalAmount)).toFixed(2),\r\n                discountAmt: \"0\",\r\n                netPayableAmount: (Number(invoice.gstAmount) + Number(invoice.totalAmount)).toFixed(2),\r\n            };\r\n            if (invoice.soldBy.gst.substring(0, 2) === invoice.billingAddress.gst.substring(0, 2)) {\r\n                invData.totalCGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                invData.totalSGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                let count = 1;\r\n                for (let product of orderedProduct.products) {\r\n                    if (!product.isRemoved) {\r\n                        let trData = {\r\n                            sno: count,\r\n                            productName: \"\",\r\n                            color: \"\",\r\n                            sizeSet: \"\",\r\n                            hsnCode: \"\",\r\n                            qty: \"\",\r\n                            rate: \"\",\r\n                            total: \"\",\r\n                            cgstPercentage: \"\",\r\n                            cgstAmount: \"\",\r\n                            sgstPercentage: \"\",\r\n                            sgstAmount: \"\",\r\n                            igstPercentage: \"\",\r\n                            igstAmount: \"\",\r\n                        };\r\n                        count += 1;\r\n                        trData.productName = product.product_id.product_name;\r\n                        trData.color = product.color.colorName;\r\n                        trData.sizeSet = product.lotSize;\r\n                        trData.hsnCode = product.hsnCode;\r\n                        trData.qty = product.qty;\r\n                        trData.rate = product.seller_price;\r\n                        trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                        trData.cgstPercentage = Number(product.seller_gst) / 2;\r\n                        trData.cgstAmount = ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                        trData.sgstPercentage = Number(product.seller_gst) / 2;\r\n                        trData.sgstAmount = ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                        trData.igstPercentage = \"\";\r\n                        trData.igstAmount = \"\";\r\n                        invData.tableRow.push(trData);\r\n                    }\r\n                }\r\n            } else {\r\n                invData.totalIGSTAmt = invoice.gstAmount;\r\n                let count = 1;\r\n                for (let product of orderedProduct.products) {\r\n                    if (!product.isRemoved) {\r\n                        let trData = {\r\n                            sno: count,\r\n                            productName: \"\",\r\n                            color: \"\",\r\n                            sizeSet: \"\",\r\n                            hsnCode: \"\",\r\n                            qty: \"\",\r\n                            rate: \"\",\r\n                            total: \"\",\r\n                            cgstPercentage: \"\",\r\n                            cgstAmount: \"\",\r\n                            sgstPercentage: \"\",\r\n                            sgstAmount: \"\",\r\n                            igstPercentage: \"\",\r\n                            igstAmount: \"\",\r\n                        };\r\n                        count += 1;\r\n                        trData.productName = product.product_id.product_name;\r\n                        trData.color = product.color.colorName;\r\n                        trData.sizeSet = product.lotSize;\r\n                        trData.hsnCode = product.hsnCode;\r\n                        trData.qty = product.qty;\r\n                        trData.rate = product.seller_price;\r\n                        trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                        trData.cgstPercentage = \"\";\r\n                        trData.cgstAmount = \"\";\r\n                        trData.sgstPercentage = \"\";\r\n                        trData.sgstAmount = \"\";\r\n                        trData.igstPercentage = product.seller_gst;\r\n                        trData.igstAmount = \"₹\" + ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                        invData.tableRow.push(trData);\r\n                    }\r\n                }\r\n            }\r\n            let pdf = await generatePdf(invData, \"factorEz.com\");\r\n            res.setHeader(\"Content-Type\", \"application/pdf\");\r\n            res.setHeader(\"Content-Disposition\", \"attachment; invoice.pdf\");\r\n            return res.send(pdf);\r\n        } else {\r\n            let customerAddress = await customerAddressModel.findOne({ customerId: invoice.customer_id });\r\n            let invData = {\r\n                logo: business[0].invoiceLogo,\r\n                brandName: business[0].business_name,\r\n                soldBy: invoice.soldBy.name,\r\n                soldByAddress: invoice.soldBy.address,\r\n                soldByGst: invoice.soldBy.gst,\r\n                soldByPhone: invoice.soldBy.phone,\r\n                invoiceNo: invoiceNumber,\r\n                orderId: invoice.order_id.orderId,\r\n                orderDate: dateToLocalDateTime(invoice.order_id.order_date),\r\n                invoiceDate: dateToLocalDateTime(invoice.invoiceDate),\r\n                billToName: invoice.billingAddress.name,\r\n                billToAddress: invoice.billingAddress.address,\r\n                billToPhone: invoice.billingAddress.phone,\r\n                billToGST: invoice.billingAddress.gst,\r\n                shipToName: invoice.shippingAddress.name,\r\n                shipToAddress: invoice.shippingAddress.address,\r\n                shipToPhone: invoice.shippingAddress.phone,\r\n                shipToGST: invoice.shippingAddress.gst,\r\n                totalAmt: \"₹\" + invoice.totalAmount,\r\n                tableRow: [],\r\n                totalCGSTAmt: \"\",\r\n                totalSGSTAmt: \"\",\r\n                totalIGSTAmt: \"\",\r\n                taxableAmt: invoice.totalAmount,\r\n                totalTaxAmt: invoice.gstAmount,\r\n                grossTotalAmt: (Number(invoice.gstAmount) + Number(invoice.totalAmount)).toFixed(2),\r\n                discountAmt: \"\",\r\n                netPayableAmount: \"\",\r\n            };\r\n            if (invoice.billingAddress.gst) {\r\n                if (invoice.soldBy.gst.substring(0, 2) === invoice.billingAddress.gst.substring(0, 2)) {\r\n                    invData.totalCGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                    invData.totalSGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                    let count = 1;\r\n                    for (let product of orderedProduct.products) {\r\n                        if (!product.isRemoved) {\r\n                            let trData = {\r\n                                sno: count,\r\n                                productName: \"\",\r\n                                color: \"\",\r\n                                sizeSet: \"\",\r\n                                hsnCode: \"\",\r\n                                qty: \"\",\r\n                                rate: \"\",\r\n                                total: \"\",\r\n                                cgstPercentage: \"\",\r\n                                cgstAmount: \"\",\r\n                                sgstPercentage: \"\",\r\n                                sgstAmount: \"\",\r\n                                igstPercentage: \"\",\r\n                                igstAmount: \"\",\r\n                            };\r\n                            count += 1;\r\n                            trData.productName = product.product_id.product_name;\r\n                            trData.color = product.color.colorName;\r\n                            trData.sizeSet = product.lotSize;\r\n                            trData.hsnCode = product.hsnCode;\r\n                            trData.qty = product.qty;\r\n                            trData.rate = product.seller_price;\r\n                            trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                            trData.cgstPercentage = Number(product.seller_gst) / 2;\r\n                            trData.cgstAmount = ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                            trData.sgstPercentage = Number(product.seller_gst) / 2;\r\n                            trData.sgstAmount = ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                            trData.igstPercentage = \"\";\r\n                            trData.igstAmount = \"\";\r\n                            invData.tableRow.push(trData);\r\n                        }\r\n                    }\r\n                } else {\r\n                    invData.totalIGSTAmt = invoice.gstAmount;\r\n                    let count = 1;\r\n                    for (let product of orderedProduct.products) {\r\n                        if (!product.isRemoved) {\r\n                            let trData = {\r\n                                sno: count,\r\n                                productName: \"\",\r\n                                color: \"\",\r\n                                sizeSet: \"\",\r\n                                hsnCode: \"\",\r\n                                qty: \"\",\r\n                                rate: \"\",\r\n                                total: \"\",\r\n                                cgstPercentage: \"\",\r\n                                cgstAmount: \"\",\r\n                                sgstPercentage: \"\",\r\n                                sgstAmount: \"\",\r\n                                igstPercentage: \"\",\r\n                                igstAmount: \"\",\r\n                            };\r\n                            count += 1;\r\n                            trData.productName = product.product_id.product_name;\r\n                            trData.color = product.color.colorName;\r\n                            trData.sizeSet = product.lotSize;\r\n                            trData.hsnCode = product.hsnCode;\r\n                            trData.qty = product.qty;\r\n                            trData.rate = product.seller_price;\r\n                            trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                            trData.cgstPercentage = \"\";\r\n                            trData.cgstAmount = \"\";\r\n                            trData.sgstPercentage = \"\";\r\n                            trData.sgstAmount = \"\";\r\n                            trData.igstPercentage = product.seller_gst;\r\n                            trData.igstAmount = \"₹\" + ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                            invData.tableRow.push(trData);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (invoice.soldBy.gst.substring(0, 2) === customerAddress.stateCode) {\r\n                    invData.totalCGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                    invData.totalSGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                    let count = 1;\r\n                    for (let product of orderedProduct.products) {\r\n                        if (!product.isRemoved) {\r\n                            let trData = {\r\n                                sno: count,\r\n                                productName: \"\",\r\n                                color: \"\",\r\n                                sizeSet: \"\",\r\n                                hsnCode: \"\",\r\n                                qty: \"\",\r\n                                rate: \"\",\r\n                                total: \"\",\r\n                                cgstPercentage: \"\",\r\n                                cgstAmount: \"\",\r\n                                sgstPercentage: \"\",\r\n                                sgstAmount: \"\",\r\n                                igstPercentage: \"\",\r\n                                igstAmount: \"\",\r\n                            };\r\n                            count += 1;\r\n                            trData.productName = product.product_id.product_name;\r\n                            trData.color = product.color.colorName;\r\n                            trData.sizeSet = product.lotSize;\r\n                            trData.hsnCode = product.hsnCode;\r\n                            trData.qty = product.qty;\r\n                            trData.rate = Number(product.seller_price) + (Number(product.seller_price) * Number(product.margin)) / 100;\r\n                            trData.total = (Number(trData.rate) * Number(product.qty)).toFixed(2);\r\n                            trData.cgstPercentage = Number(product.selling_gst) / 2;\r\n                            let mrginAmt = Number(product.seller_price) * Number(product.qty) + (Number(product.seller_price) * Number(product.qty) * Number(product.margin)) / 100;\r\n                            trData.cgstAmount = ((mrginAmt * Number(product.selling_gst)) / 100).toFixed(2);\r\n                            trData.sgstPercentage = Number(product.selling_gst) / 2;\r\n                            trData.sgstAmount = ((mrginAmt * Number(product.selling_gst)) / 100).toFixed(2);\r\n                            trData.igstPercentage = \"\";\r\n                            trData.igstAmount = \"\";\r\n                            invData.tableRow.push(trData);\r\n                        }\r\n                    }\r\n                } else {\r\n                    invData.totalIGSTAmt = invoice.gstAmount;\r\n                    let count = 1;\r\n                    for (let product of orderedProduct.products) {\r\n                        if (!product.isRemoved) {\r\n                            let trData = {\r\n                                sno: count,\r\n                                productName: \"\",\r\n                                color: \"\",\r\n                                sizeSet: \"\",\r\n                                hsnCode: \"\",\r\n                                qty: \"\",\r\n                                rate: \"\",\r\n                                total: \"\",\r\n                                cgstPercentage: \"\",\r\n                                cgstAmount: \"\",\r\n                                sgstPercentage: \"\",\r\n                                sgstAmount: \"\",\r\n                                igstPercentage: \"\",\r\n                                igstAmount: \"\",\r\n                            };\r\n                            count += 1;\r\n                            trData.productName = product.product_id.product_name;\r\n                            trData.color = product.color.colorName;\r\n                            trData.sizeSet = product.lotSize;\r\n                            trData.hsnCode = product.hsnCode;\r\n                            trData.qty = product.qty;\r\n                            trData.rate = product.seller_price;\r\n                            trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                            trData.cgstPercentage = \"\";\r\n                            trData.cgstAmount = \"\";\r\n                            trData.sgstPercentage = \"\";\r\n                            trData.sgstAmount = \"\";\r\n                            trData.igstPercentage = product.seller_gst;\r\n                            trData.igstAmount = \"₹\" + ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                            invData.tableRow.push(trData);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (invoice.order_id.discounted_amount) {\r\n                invData.discountAmt = \"₹\" + invoice.order_id.discounted_amount;\r\n                invData.netPayableAmount = Number(invoice.gstAmount) + Number(invoice.totalAmount) - Number(invoice.order_id.discounted_amount);\r\n            } else {\r\n                invData.discountAmt = 0;\r\n                invData.netPayableAmount = invData.grossTotalAmt;\r\n            }\r\n            let pdf = await generatePdf(invData, \"factorEz.com\");\r\n\r\n            res.setHeader(\"Content-Type\", \"application/pdf\");\r\n            res.setHeader(\"Content-Disposition\", \"attachment; invoice.pdf\");\r\n            return res.send(pdf);\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { generatePurchaseInvoice, generateSaleInvoice, getAllSaleInvoice, getAllPurchaseInvoice, downoadInvoiceByInvoiceNumber };\r\n","const orderModel = require(\"../models/orderModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst customerAddressModel = require(\"../models/customerAddressModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst paymentModel = require(\"../models/paymentModel\");\r\nconst cancelledReasonModel = require(\"../models/cancelledReasonModel\");\r\n\r\nconst { generateRandomID, generateRandomAlphaNumericID } = require(\"../controllers/idGeneratorController\");\r\n\r\nconst orderedProductModel = require(\"../models/orderedProductModel\");\r\nconst orderStatusTableModel = require(\"../models/orderStatusTableModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst couponCodeModel = require(\"../models/couponCodeModel\");\r\nconst { createPayment } = require(\"./paymentController\");\r\nconst { generatePurchaseInvoice, generateSaleInvoice } = require(\"./invoiceController\");\r\nconst { isExpiryCoupon } = require(\"../utils/couponExpireUtil\");\r\n// CREATE ORDER\r\nconst createOrder = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let data = req.body;\r\n\r\n        let { address_id, payment_mode, couponCode, paymentAmt, transaction_id } = data;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id request\" });\r\n        }\r\n        if (!isValidObjectId(address_id)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Address id request\" });\r\n        }\r\n\r\n        if (!payment_mode) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (payment_mode !== \"CUSTOM\" && payment_mode !== \"TWENTY_ADV\" && payment_mode !== \"PREPAID\" && payment_mode !== \"COD\") {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        if ((payment_mode === \"CUSTOM\" || payment_mode === \"TWENTY_ADV\" || payment_mode === \"PREPAID\") && !transaction_id) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        let customer = await customerModel.findById(customerId);\r\n        let address = await customerAddressModel.findById(address_id);\r\n        if (!customer || !address) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let cart = await cartModel.findOne({ customer_id: customerId }).populate({\r\n            path: \"products.product_id\",\r\n            model: \"Product\",\r\n        });\r\n\r\n        let demoObj = {};\r\n        let coupon = null;\r\n        if (couponCode) {\r\n            coupon = await couponCodeModel.findOne({\r\n                couponCode: couponCode,\r\n                isDeleted: false,\r\n                isExpired: false,\r\n            });\r\n            if (!coupon) {\r\n                return res.status(400).send({ status: false, message: \"Invalid Coupon Code\" });\r\n            }\r\n            if (coupon && isExpiryCoupon(coupon.validTill)) {\r\n                coupon.isExpired = true;\r\n                await coupon.save();\r\n                return res.status(400).send({ status: false, message: \"Coupon Code Expired\" });\r\n            }\r\n            if (coupon.customer_id.includes(customerId)) {\r\n                return res.status(200).send({ status: false, message: \"Coupon Already applied\" });\r\n            }\r\n        }\r\n\r\n        if (!cart) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request\" });\r\n        }\r\n        let orderAmt = 0;\r\n        for (let product of cart.products) {\r\n            let mAmt = product.product_id.seller_price + (product.product_id.margin * product.product_id.seller_price) / 100;\r\n            let totalamt = mAmt + (mAmt * product.product_id.sellingGST) / 100;\r\n            orderAmt += product.qty * totalamt;\r\n            let key = product.product_id.vendor_id.toString();\r\n            if (key in demoObj) {\r\n                demoObj[key].push(product);\r\n            } else {\r\n                demoObj[key] = [product];\r\n            }\r\n        }\r\n        if (coupon && coupon.minOrderAmt > orderAmt) {\r\n            return res.status(200).send({ status: false, message: `Coupon not applied, minimum order should be ${coupon.minOrderAmt}` });\r\n        }\r\n        let orders = [];\r\n        let grandTotal = 0;\r\n        for (let vendor of Object.keys(demoObj)) {\r\n            let orderedProduct = null;\r\n            let vendorAmtInfo = {\r\n                grandTotal: 0,\r\n                gstAmt: 0,\r\n                total: 0,\r\n            };\r\n            let total = 0;\r\n            let GST_amount = 0;\r\n            for (let p of demoObj[vendor]) {\r\n                let x = {\r\n                    product_id: \"\",\r\n                    vendor_id: \"\",\r\n                    mrp: \"\",\r\n                    seller_price: \"\",\r\n                    seller_gst: \"\",\r\n                    selling_price: \"\",\r\n                    selling_gst: \"\",\r\n                    margin: \"\",\r\n                    lotSize: \"\",\r\n                    color: {\r\n                        colorName: \"\",\r\n                        colorHex: \"\",\r\n                    },\r\n                    hsnCode: \"\",\r\n                    skuCode: \"\",\r\n                    qty: \"\",\r\n                    addedAt: \"\",\r\n                };\r\n                x.product_id = p.product_id._id;\r\n                x.vendor_id = vendor;\r\n                x.mrp = p.product_id.mrp;\r\n                x.seller_price = p.product_id.seller_price;\r\n                x.seller_gst = p.product_id.gst;\r\n                let marginAmt = (Number(p.product_id.seller_price) * Number(p.product_id.margin)) / 100;\r\n                let sellingGstAmt = ((Number(p.product_id.seller_price) + marginAmt) * Number(p.product_id.sellingGST)) / 100;\r\n                x.selling_price = (Number(p.product_id.seller_price) + marginAmt + sellingGstAmt).toFixed(2);\r\n                x.selling_gst = p.product_id.sellingGST;\r\n                x.lotSize = p.lotSize;\r\n                x.color = {\r\n                    colorName: p.color.colorName,\r\n                    colorHex: p.color.colorHex,\r\n                };\r\n                x.hsnCode = p.product_id.hsn_code;\r\n                x.skuCode = p.product_id.sku_code;\r\n                x.margin = p.product_id.margin;\r\n                x.qty = p.qty;\r\n                x.lotSize = p.lotSize;\r\n                x.addedAt = p.addedAt;\r\n                let currentTotal = (Number(p.product_id.seller_price) + marginAmt) * Number(p.qty);\r\n                total += Number(currentTotal);\r\n                GST_amount += sellingGstAmt * Number(p.qty);\r\n\r\n                let vdrAmt = Number(p.product_id.seller_price) * Number(p.qty);\r\n                let vdrGstAmt = (vdrAmt * Number(p.product_id.gst)) / 100;\r\n                vendorAmtInfo.grandTotal += vdrAmt + vdrGstAmt;\r\n                vendorAmtInfo.gstAmt += vdrGstAmt;\r\n                vendorAmtInfo.total += vdrAmt;\r\n\r\n                if (orderedProduct === null) {\r\n                    orderedProduct = await orderedProductModel.create({\r\n                        products: [x],\r\n                    });\r\n                } else {\r\n                    orderedProduct.products.push(x);\r\n                }\r\n            }\r\n            await orderedProduct.save();\r\n            let odrObj = {\r\n                orderId: generateRandomID(10, \"FZ\"),\r\n                vendorId: vendor,\r\n                order_date: new Date(),\r\n                ordered_products: orderedProduct,\r\n                customer_id: customerId,\r\n                address_id: address_id,\r\n                GST_amount: GST_amount.toFixed(2),\r\n                total: total.toFixed(2),\r\n                grand_total: (Number(GST_amount) + Number(total)).toFixed(2),\r\n                vendorAmtInfo: vendorAmtInfo,\r\n            };\r\n            if (coupon !== null) {\r\n                odrObj.couponCode = coupon._id;\r\n            }\r\n            grandTotal += Number(total) + Number(GST_amount);\r\n            let addedOrder = await orderModel.create(odrObj);\r\n            let status = await orderStatusTableModel.create({\r\n                order_id: addedOrder._id,\r\n            });\r\n            addedOrder.order_status_id = status;\r\n            await addedOrder.save();\r\n            orderedProduct.order_id = addedOrder._id;\r\n            await orderedProduct.save();\r\n            orders.push(addedOrder);\r\n        }\r\n        cart.products = [];\r\n        await cart.save();\r\n        if (coupon !== null && coupon.maxDiscPrice < grandTotal) {\r\n            let maxDiscount = 0;\r\n            if (coupon.discountType === \"PERCENTAGE\") {\r\n                let discAmt = (Number(grandTotal) * Number(coupon.discountAmt)) / 100;\r\n                if (discAmt > coupon.maxDiscPrice) {\r\n                    maxDiscount = coupon.maxDiscPrice;\r\n                } else {\r\n                    maxDiscount = discAmt;\r\n                }\r\n            } else if (coupon.discountType === \"PRICE\") {\r\n                maxDiscount = coupon.discountAmt;\r\n            }\r\n\r\n            if (payment_mode === \"PREPAID\" && Number(paymentAmt) < Number(grandTotal) - Number(maxDiscount)) {\r\n                return res.status(400).send({ status: false, message: \"payment should be equal to grand total amount\" });\r\n            }\r\n\r\n            for (let singleOrder of orders) {\r\n                let percentage = Number(((Number(singleOrder.grand_total) * 100) / Number(grandTotal)).toFixed(2));\r\n                let discountAmt = Number(((Number(maxDiscount) * Number(percentage)) / 100).toFixed(2));\r\n                let partPayment = 0;\r\n                if (payment_mode === \"CUSTOM\" || payment_mode === \"TWENTY_ADV\") {\r\n                    partPayment = Number(((Number(paymentAmt) * Number(percentage)) / 100).toFixed(2));\r\n                }\r\n                if (payment_mode === \"PREPAID\") {\r\n                    partPayment = Number(singleOrder.grand_total) - Number(discountAmt);\r\n                }\r\n                singleOrder.discounted_amount = discountAmt;\r\n                let payment = await createPayment(\r\n                    singleOrder.order_status_id.status,\r\n                    payment_mode,\r\n                    singleOrder.orderId,\r\n                    singleOrder._id,\r\n                    singleOrder.grand_total,\r\n                    discountAmt,\r\n                    partPayment,\r\n                    customerId,\r\n                    transaction_id\r\n                );\r\n                if (payment.status) {\r\n                    singleOrder.payment_id = payment.paymentId;\r\n                } else {\r\n                    return res.status(400).send({ status: false, message: \"Bad request\" });\r\n                }\r\n                singleOrder.shipping_address = {\r\n                    stateCode: address.stateCode,\r\n                    state: address.state,\r\n                    address: address.address,\r\n                };\r\n                await singleOrder.save();\r\n                customer.orders.push(singleOrder._id);\r\n            }\r\n            coupon.customer_id.push(customerId);\r\n            await coupon.save();\r\n            await customer.save();\r\n        } else {\r\n            for (let singleOrder of orders) {\r\n                let percentage = Number(((Number(singleOrder.grand_total) * 100) / Number(grandTotal)).toFixed(2));\r\n                let discountAmt = 0;\r\n                let partPayment = 0;\r\n                if (payment_mode === \"CUSTOM\" || payment_mode === \"TWENTY_ADV\") {\r\n                    partPayment = Number(((paymentAmt * percentage) / 100).toFixed(2));\r\n                }\r\n                if (payment_mode === \"PREPAID\") {\r\n                    partPayment = Number(singleOrder.grand_total) - Number(discountAmt);\r\n                }\r\n                let payment = await createPayment(\r\n                    singleOrder.order_status_id.status,\r\n                    payment_mode,\r\n                    singleOrder.orderId,\r\n                    singleOrder._id,\r\n                    singleOrder.grand_total,\r\n                    discountAmt,\r\n                    partPayment,\r\n                    customerId,\r\n                    transaction_id\r\n                );\r\n                if (payment.status) {\r\n                    singleOrder.payment_id = payment.paymentId;\r\n                } else {\r\n                    return res.status(400).send({ status: false, message: \"Bad request\" });\r\n                }\r\n                singleOrder.shipping_address = {\r\n                    stateCode: address.stateCode,\r\n                    state: address.state,\r\n                    address: address.address,\r\n                };\r\n                await singleOrder.save();\r\n                customer.orders.push(singleOrder._id);\r\n            }\r\n            await customer.save();\r\n        }\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order Created Successfully\",\r\n            data: \"orders\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ORDERS\r\nconst getAllOrders = async (req, res) => {\r\n    try {\r\n        let orders = null;\r\n        if (req.userModel === \"VENDOR\") {\r\n            orders = await orderModel\r\n                .find({ vendorId: req.userId })\r\n                .populate([\"vendorId\", \"order_status_id\", \"ordered_products\", \"purchaseInvoice\"])\r\n                .select([\"-shipping_address\", \"-couponCode\", \"-customer_id\"])\r\n                .sort({ createdAt: -1 });\r\n            // .populate({ path: \"ordered_products\", model: \"Ordered_Product\", populate: { path: \"products.product_id\", model: \"Product\" } });\r\n        } else {\r\n            orders = await orderModel\r\n                .find()\r\n                .populate([\r\n                    \"vendorId\",\r\n                    \"payment_id\",\r\n                    \"order_status_id\",\r\n                    \"ordered_products\",\r\n                    \"purchaseInvoice\",\r\n                    \"saleInvoice\",\r\n                    { path: \"CouponCode\", strictPopulate: false },\r\n                    { path: \"customer_id\", model: \"Customer\", populate: { path: \"defaultAddress\", model: \"CustomerAddress\" } },\r\n                ])\r\n                .sort({ createdAt: -1 });\r\n            // .select(\"-vendorAmtInfo\")\r\n            // .populate({\r\n            //     path: \"ordered_products\",\r\n            //     model: \"Ordered_Product\",\r\n            //     populate: { path: \"products.product_id\", model: \"Product\", populate: { path: \"product_id.brandId\", model: \"Brand\" } },\r\n            // });\r\n        }\r\n        return res.status(200).send({ status: true, data: orders });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ORDER BY ORDER ID\r\nconst getOrderByOrderId = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        let customerId = req.params.customerId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        let order = await orderModel\r\n            .findOne({ customer_id: customerId, orderId: orderId })\r\n            .populate([\r\n                \"payment_id\",\r\n                \"order_status_id\",\r\n                { path: \"ordered_products\", model: \"Ordered_Product\", populate: { path: \"products.product_id\", model: \"Product\" } },\r\n                \"saleInvoice\",\r\n                { path: \"CouponCode\", strictPopulate: false },\r\n            ])\r\n            .select(\"-purchaseInvoice\");\r\n        if (!order) {\r\n            return res.status(404).send({ status: false, message: \"Order not found\" });\r\n        }\r\n        return res.status(200).send({ status: true, data: order });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ORDERS OF A CUSTOMER\r\nconst getOrdersByCustomerId = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let customerOrders = await orderModel.find({ customer_id: customerId }).populate([\"vendorId\", \"customer_id\", \"payment_id\", \"order_status_id\", \"ordered_products\"]);\r\n\r\n        return res.status(200).send({ status: true, data: customerOrders });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// CANCEL ORDER BY ORDER ID\r\nconst cancelOrderByOrderId = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Order Id\" });\r\n        }\r\n\r\n        let order = await orderModel.findOne({ _id: orderId });\r\n\r\n        if (!order) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order not found with this order id\",\r\n            });\r\n        }\r\n\r\n        let data = req.body;\r\n\r\n        let { Status } = data;\r\n\r\n        if (order.Status === \"Cancelled\") {\r\n            return res.status(400).send({ status: false, message: \"Order is already cancelled\" });\r\n        }\r\n\r\n        let orderStatus = await orderModel.findOneAndUpdate({ _id: orderId }, { $set: { Status: \"Cancelled\" } }, { new: true });\r\n\r\n        await order.save();\r\n\r\n        return res.status(202).send({ status: true, message: \"Order Cancelled Successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE ORDER BY ORDER ID\r\nconst updateOrderByOrderId = async (req, res) => {\r\n    try {\r\n        //CONFIRM, PARTIAL, CANCEL\r\n        let orderId = req.params.orderId;\r\n        let { orderType, cancelMessage, questionId, removedProductIds } = req.body;\r\n        if (!orderType || !orderId) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let order = await orderModel.findOne({ orderId: orderId }).populate([\"ordered_products\", \"order_status_id\"]);\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        if (order.order_status_id.status !== \"PENDING\" && req.userModel === \"VENDOR\") {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        let payment = await paymentModel.findById(order.payment_id._id);\r\n        if (!payment) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        if (orderType === \"PARTIAL_CONFIRMED\") {\r\n            let orderedProduct = order.ordered_products;\r\n            let partialCanceledAmt = 0;\r\n            let partialCanceledGstAmt = 0;\r\n            let orderedProductAmtInfo = {\r\n                productQty: 0,\r\n                total: 0,\r\n                GST_amount: 0,\r\n                grand_total: 0,\r\n            };\r\n            let orderedAmtInfo = {\r\n                grand_total: 0,\r\n                total: 0,\r\n                GST_amount: 0,\r\n                discounted_amount: 0,\r\n            };\r\n            for (let s_product of orderedProduct.products) {\r\n                if (s_product.isRemoved === false && removedProductIds.includes(s_product._id.toString())) {\r\n                    s_product.isRemoved = true;\r\n                    let canceledAmt = Number(s_product.seller_price) * Number(s_product.qty);\r\n                    partialCanceledAmt += canceledAmt;\r\n                    partialCanceledGstAmt += Number(((canceledAmt * Number(s_product.seller_gst)) / 100).toFixed(2));\r\n                    let adminCancelledAmt = canceledAmt + (canceledAmt * s_product.margin) / 100;\r\n                    orderedProductAmtInfo.productQty += 1;\r\n                    orderedProductAmtInfo.total += Number(adminCancelledAmt.toFixed(2));\r\n                    orderedProductAmtInfo.GST_amount += Number(((adminCancelledAmt * s_product.selling_gst) / 100).toFixed(2));\r\n                    orderedProductAmtInfo.grand_total += adminCancelledAmt + Number(((adminCancelledAmt * s_product.selling_gst) / 100).toFixed(2));\r\n                }\r\n            }\r\n            order.order_status_id.status = orderType;\r\n            payment.order_status = \"PARTIAL_CONFIRMED\";\r\n            let updatedByObj = {};\r\n            if (req.userModel === \"VENDOR\") {\r\n                updatedByObj.vendor = req.userId;\r\n            } else if (req.userModel === \"ADMIN\") {\r\n                updatedByObj.admin = req.userId;\r\n            }\r\n            let statusObj = {\r\n                status: orderType,\r\n                updatedBy: updatedByObj,\r\n                updatedAt: new Date(),\r\n                description: cancelMessage,\r\n            };\r\n            order.order_status_id.statusList.push(statusObj);\r\n            order.vendorAmtInfo.gstAmt -= partialCanceledGstAmt;\r\n            order.vendorAmtInfo.total -= partialCanceledAmt;\r\n            order.vendorAmtInfo.grandTotal -= partialCanceledGstAmt + partialCanceledAmt;\r\n            orderedAmtInfo.GST_amount = order.GST_amount;\r\n            orderedAmtInfo.total = order.total;\r\n            orderedAmtInfo.grand_total = order.grand_total;\r\n            order.GST_amount -= orderedProductAmtInfo.GST_amount;\r\n            order.total -= orderedProductAmtInfo.total;\r\n            order.grand_total -= orderedProductAmtInfo.grand_total;\r\n            order.partialCancelOrderInfo = {\r\n                orderedAmtInfo,\r\n                orderedProductAmtInfo,\r\n            };\r\n            await orderedProduct.save();\r\n            await order.order_status_id.save();\r\n            let purchaseGstAmount = 0;\r\n            let purchaseTotalAmount = 0;\r\n            for (let singleOrderProduct of order.ordered_products.products) {\r\n                purchaseGstAmount += (singleOrderProduct.seller_price * singleOrderProduct.qty * singleOrderProduct.seller_gst) / 100;\r\n                purchaseTotalAmount += singleOrderProduct.seller_price * singleOrderProduct.qty;\r\n            }\r\n\r\n            let invDataPurchase = {\r\n                vendor_id: order.vendorId,\r\n                order_id: order._id,\r\n                gstAmount: purchaseGstAmount,\r\n                totalAmount: purchaseTotalAmount,\r\n            };\r\n            let invDataSale = {\r\n                customer_id: order.customer_id,\r\n                order_id: order._id,\r\n                gstAmount: order.GST_amount,\r\n                totalAmount: order.total,\r\n                address: order.shipping_address,\r\n            };\r\n            if ((payment.payment_mode === \"CUSTOM\" || payment.payment_mode === \"TWENTY_ADV\") && payment.partial_payment.payment_amount >= Number(order.grand_total) - Number(order.discounted_amount)) {\r\n                payment.return_amount = (Number(payment.partial_payment.payment_amount) - (Number(order.grand_total) - Number(order.discounted_amount))).toFixed(2);\r\n                payment.balance_amount = 0;\r\n            } else if ((payment.payment_mode === \"CUSTOM\" || payment.payment_mode === \"TWENTY_ADV\") && payment.partial_payment.payment_amount < order.grand_total) {\r\n                payment.return_amount = 0;\r\n                let x = Number(order.grand_total) - Number(order.discounted_amount);\r\n                payment.balance_amount = x - Number(payment.partial_payment.payment_amount).toFixed(2);\r\n            } else if (payment.payment_mode === \"PREPAID\" && payment.payment_amount >= Number(order.grand_total) - Number(order.discounted_amount)) {\r\n                payment.return_amount = (Number(payment.payment_amount) - (Number(order.grand_total) - Number(order.discounted_amount))).toFixed(2);\r\n                payment.balance_amount = 0;\r\n            } else if (payment.payment_mode === \"COD\") {\r\n                payment.return_amount = 0;\r\n                payment.balance_amount = Number(order.grand_total) - Number(order.discounted_amount);\r\n            }\r\n            payment.order_amount = order.grand_total;\r\n            let resData = await generatePurchaseInvoice(invDataPurchase);\r\n            let resData2 = await generateSaleInvoice(invDataSale);\r\n            if (resData.status) {\r\n                order.purchaseInvoice = resData.invoice._id;\r\n            }\r\n            if (resData2.status) {\r\n                order.saleInvoice = resData2.invoice._id;\r\n            }\r\n        }\r\n        if (orderType === \"CANCEL\") {\r\n            order.order_status_id.status = \"CANCELLED\";\r\n            payment.order_status = \"CANCELLED\";\r\n            let updatedByObj = {};\r\n            if (req.userModel === \"VENDOR\") {\r\n                updatedByObj.vendor = req.userId;\r\n            } else if (req.userModel === \"ADMIN\") {\r\n                updatedByObj.admin = req.userId;\r\n            } else {\r\n                updatedByObj.customer = req.userId;\r\n            }\r\n            order.order_status_id.cancelled.userId = updatedByObj;\r\n            order.order_status_id.cancelled.question = questionId;\r\n            order.order_status_id.cancelled.description = cancelMessage;\r\n            order.order_status_id.cancelledStatus = \"CANCELLED\";\r\n            let objOfCancelledStatusList = {\r\n                status: \"CANCELLED\",\r\n                updatedBy: updatedByObj,\r\n                updatedAt: new Date(),\r\n            };\r\n            order.order_status_id.cancelledStatusList.push(objOfCancelledStatusList);\r\n            if (payment.payment_mode === \"CUSTOM\" || payment.payment_mode === \"PREPAID\" || payment.payment_mode === \"TWENTY_ADV\") {\r\n                if (payment.payment_mode === \"CUSTOM\") {\r\n                    payment.return_amount = Number(payment.partial_payment.payment_amount) + Number(payment.cod_received);\r\n                    payment.balance_amount = 0;\r\n                } else if (payment.payment_mode === \"PREPAID\") {\r\n                    payment.return_amount = payment.payment_amount;\r\n                    payment.balance_amount = 0;\r\n                } else if (payment.payment_mode === \"TWENTY_ADV\") {\r\n                    payment.return_amount = payment.partial_payment.payment_amount + Number(payment.cod_received);\r\n                    payment.balance_amount = 0;\r\n                }\r\n            } else if (payment.payment_mode === \"COD\") {\r\n                payment.return_amount = Number(payment.cod_received);\r\n                payment.balance_amount = 0;\r\n            }\r\n            await order.order_status_id.save();\r\n        }\r\n        if (orderType === \"CONFIRMED\") {\r\n            order.order_status_id.status = orderType;\r\n            payment.order_status = \"CONFIRMED\";\r\n            let updatedByObj = {};\r\n            if (req.userModel === \"VENDOR\") {\r\n                updatedByObj.vendor = req.userId;\r\n            } else if (req.userModel === \"ADMIN\") {\r\n                updatedByObj.admin = req.userId;\r\n            }\r\n            let statusObj = {\r\n                status: orderType,\r\n                updatedBy: updatedByObj,\r\n                updatedAt: new Date(),\r\n            };\r\n            order.order_status_id.statusList.push(statusObj);\r\n            await order.order_status_id.save();\r\n            let purchaseGstAmount = 0;\r\n            let purchaseTotalAmount = 0;\r\n            for (let singleOrderProduct of order.ordered_products.products) {\r\n                purchaseGstAmount += (singleOrderProduct.seller_price * singleOrderProduct.qty * singleOrderProduct.seller_gst) / 100;\r\n                purchaseTotalAmount += singleOrderProduct.seller_price * singleOrderProduct.qty;\r\n            }\r\n\r\n            let invDataPurchase = {\r\n                vendor_id: order.vendorId,\r\n                order_id: order._id,\r\n                gstAmount: purchaseGstAmount,\r\n                totalAmount: purchaseTotalAmount,\r\n            };\r\n            let invDataSale = {\r\n                customer_id: order.customer_id,\r\n                order_id: order._id,\r\n                gstAmount: order.GST_amount,\r\n                totalAmount: order.total,\r\n                address: order.shipping_address,\r\n            };\r\n            let resData = await generatePurchaseInvoice(invDataPurchase);\r\n            let resData2 = await generateSaleInvoice(invDataSale);\r\n            if (resData.status) {\r\n                order.purchaseInvoice = resData.invoice._id;\r\n            } else {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: resData.err,\r\n                });\r\n            }\r\n            if (resData2.status) {\r\n                order.saleInvoice = resData2.invoice._id;\r\n            } else {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: resData2.err,\r\n                });\r\n            }\r\n        }\r\n        await payment.save();\r\n        await order.save();\r\n        return res.status(202).send({\r\n            status: true,\r\n            message: \"Order updated successfully\",\r\n            data: order,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getOrderedProduct = async (req, res) => {\r\n    try {\r\n        let id = req.params.orderedproductid;\r\n        let obj = await orderedProductModel.findById(id).populate(\"products.product_id\");\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"details fetched successfully...\",\r\n            data: obj,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst patchTrackingIdByOrderId = async (req, res) => {\r\n    try {\r\n        let id = req.params.orderId;\r\n        let { t_id } = req.body;\r\n        if (!id || !t_id) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let obj = await orderModel.findOne({ orderId: id }).populate(\"order_status_id\");\r\n        if (!obj) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (obj.order_status_id.status === \"PENDING\") {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        obj.tracking_id = t_id;\r\n        await obj.save();\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Tracking ID Updated successfully...\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllCancelledOrder = async (req, res) => {\r\n    try {\r\n        let userModel = req.userModel;\r\n        let userId = req.userId;\r\n        let orders = null;\r\n        if (userModel === \"VENDOR\") {\r\n            orders = await orderModel\r\n                .find({ vendorId: req.userId })\r\n                .populate([\"vendorId\", \"order_status_id\", \"ordered_products\"])\r\n                .select([\"-shipping_address\", \"-couponCode\", \"-customer_id\"])\r\n                .sort({ createdAt: -1 });\r\n        } else {\r\n            orders = await orderModel.find().populate([\"vendorId\", \"customer_id\", \"payment_id\", \"order_status_id\", \"ordered_products\"]).sort({ createdAt: -1 });\r\n        }\r\n\r\n        if (!orders) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let cancelledOrders = [];\r\n        for (let order of orders) {\r\n            if (order.order_status_id.status === \"CANCELLED\") {\r\n                cancelledOrders.push(order);\r\n            }\r\n        }\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Cancelled orders fetched...\",\r\n            data: cancelledOrders,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createOrder,\r\n    getAllOrders,\r\n    getOrderByOrderId,\r\n    getOrdersByCustomerId,\r\n    cancelOrderByOrderId,\r\n    updateOrderByOrderId,\r\n    getOrderedProduct,\r\n    patchTrackingIdByOrderId,\r\n    getAllCancelledOrder,\r\n};\r\n","const orderStatusTableModel = require(\"../models/orderStatusTableModel\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst cancelledReasonModel = require(\"../models/cancelledReasonModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// CREATE ORDER STATUS TABLE\r\nconst createOrderStatusTable = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Order Id\" });\r\n        }\r\n\r\n        let order = await orderModel.findOne({ _id: orderId });\r\n\r\n        if (!order) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order not found with this order id\",\r\n            });\r\n        }\r\n\r\n        let data = req.body;\r\n\r\n        let { questions, customerAnswer } = data;\r\n\r\n        let orderStatus = await orderModel.findOneAndUpdate({ _id: orderId }, { $set: { Status: \"Cancelled\" } }, { new: true });\r\n\r\n        await order.save();\r\n\r\n        let cancelledReasonData = {\r\n            questions,\r\n            customerAnswer,\r\n        };\r\n\r\n        let newCancelledReason = await cancelledReasonModel.create(cancelledReasonData);\r\n\r\n        let cancelledObj = {\r\n            cancelledBy: req.body.cancelledBy,\r\n            userId: req.body.userId,\r\n            reason: newCancelledReason._id,\r\n        };\r\n\r\n        let orderStatusTableData = await orderStatusTableModel.create({\r\n            order_id: order._id,\r\n            status: \"Cancelled\",\r\n            isCompleted: false,\r\n            cancelled: cancelledObj,\r\n        });\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: {\r\n                OrderStatusTableData: orderStatusTableData,\r\n                cancelledReasonData: newCancelledReason,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ORDER STATUS TABLES\r\nconst getAllOrderStatusTables = async (req, res) => {\r\n    try {\r\n        let allOrderStatusTables = await orderStatusTableModel.find();\r\n        return res.status(200).send({ status: true, data: allOrderStatusTables });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ORDER STATUS TABLE BY ID\r\nconst getOrderStatusTableById = async (req, res) => {\r\n    try {\r\n        let orderStatusTableId = req.params.orderStatusTableId;\r\n\r\n        if (!isValidObjectId(orderStatusTableId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid order status table id\",\r\n            });\r\n        }\r\n\r\n        let orderStatusTable = await orderStatusTableModel.findOne({\r\n            _id: orderStatusTableId,\r\n        });\r\n\r\n        if (!orderStatusTable) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order Status Table not found\",\r\n            });\r\n        }\r\n\r\n        return res.status(200).send({ status: true, data: orderStatusTable });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE ORDER STATUS TABLE BY ORDER ID\r\nconst updateOrderStatusByOrderId = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        let { status } = req.body;\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid order id\" });\r\n        }\r\n\r\n        let orderStatusTable = await orderStatusTableModel.findOne({\r\n            order_id: orderId,\r\n        });\r\n\r\n        if (!orderStatusTable) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order status table not found\",\r\n            });\r\n        }\r\n        if (!status) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        orderStatusTable.status = status;\r\n\r\n        let updatedByObj = {};\r\n        if (req.userModel === \"VENDOR\") {\r\n            updatedByObj.vendor = req.userId;\r\n        } else if (req.userModel === \"ADMIN\") {\r\n            updatedByObj.admin = req.userId;\r\n        }\r\n        let statusObj = {\r\n            status: status,\r\n            updatedBy: updatedByObj,\r\n            updatedAt: new Date(),\r\n        };\r\n        orderStatusTable.statusList.push(statusObj);\r\n        await orderStatusTable.save();\r\n        return res.status(202).send({ status: true, message: \"Success\", data: orderStatusTable });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst bulkOrderProcess = async (req, res) => {\r\n    try {\r\n        let { status, orderIds } = req.body;\r\n        // let const records = await Model.find({ '_id': { $in: ids } });\r\n\r\n        let orderStatusTables = await orderStatusTableModel.find({ order_id: { $in: orderIds } });\r\n        let updatedByObj = {};\r\n        if (req.userModel === \"VENDOR\") {\r\n            updatedByObj.vendor = req.userId;\r\n        } else if (req.userModel === \"ADMIN\") {\r\n            updatedByObj.admin = req.userId;\r\n        }\r\n        let statusObj = {\r\n            status: status,\r\n            updatedBy: updatedByObj,\r\n            updatedAt: new Date(),\r\n        };\r\n        for await (let orderStatusTable of orderStatusTables) {\r\n            if (orderStatusTable.status !== \"CANCELLED\" && orderStatusTable.status !== \"PENDING\") {\r\n                orderStatusTable.status = status;\r\n                orderStatusTable.statusList.push(statusObj);\r\n                await orderStatusTable.save();\r\n            }\r\n        }\r\n        return res.status(202).send({ status: true, message: \"Orders Processed\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst cancelOrderReturnById = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        let { status } = req.body;\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid order id\" });\r\n        }\r\n\r\n        let orderStatusTable = await orderStatusTableModel.findOne({\r\n            order_id: orderId,\r\n        });\r\n\r\n        if (!orderStatusTable) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order status table not found\",\r\n            });\r\n        }\r\n        if (!status) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        orderStatusTable.cancelledStatus = status;\r\n        let updatedByObj = {};\r\n        if (req.userModel === \"VENDOR\") {\r\n            updatedByObj.vendor = req.userId;\r\n        } else if (req.userModel === \"ADMIN\") {\r\n            updatedByObj.admin = req.userId;\r\n        } else {\r\n            updatedByObj.customer = req.userId;\r\n        }\r\n        let objOfCancelledStatusList = {\r\n            status: status,\r\n            updatedBy: updatedByObj,\r\n            updatedAt: new Date(),\r\n        };\r\n        orderStatusTable.cancelledStatusList.push(objOfCancelledStatusList);\r\n        await orderStatusTable.save();\r\n        return res.status(202).send({ status: true, message: \"Return Status Updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createOrderStatusTable,\r\n    getAllOrderStatusTables,\r\n    getOrderStatusTableById,\r\n    updateOrderStatusByOrderId,\r\n    bulkOrderProcess,\r\n    cancelOrderReturnById\r\n};\r\n","const jwt = require(\"jsonwebtoken\");\r\nconst { twilioAccSID, twilioAuthToken, twilioVerifySID, tokenSecretKey, customerTokenSecretKey } = require(\"../middlewares/config\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst accountSid = twilioAccSID;\r\nconst authToken = twilioAuthToken;\r\nconst verifySid = twilioVerifySID;\r\nconst client = require(\"twilio\")(accountSid, authToken);\r\n\r\nconst sendOTP = async (req, res) => {\r\n    try {\r\n        let phone = req.params.phone;\r\n        // console.log(req.params);\r\n        if (!phone) {\r\n            return res.status(400).send({ status: false, message: \"phone number are required\" });\r\n        }\r\n        // console.log(phone);\r\n        let isSent = false;\r\n        await client.verify.v2\r\n            .services(verifySid)\r\n            .verifications.create({ to: `+91${phone}`, channel: \"sms\" })\r\n            .then((verification) => {\r\n                isSent = true;\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n        if (isSent) {\r\n            return res.status(200).send({ status: true, message: \"OTP send successfully\" });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Otp not send\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst createAccountAndToken = async (phone) => {\r\n    try {\r\n        let customer = await customerModel.findOne({ phone: phone, isDeleted: false });\r\n\r\n        if (!customer) {\r\n            customer = await customerModel.create({ phone });\r\n        }\r\n        if (customer.isBlocked) {\r\n            return { statusCode: 403, status: false, message: \"This account has been blocked\" };\r\n        }\r\n        if (!customer.isActivated) {\r\n            return { statusCode: 200, status: true, isActivated: false, data: { customerId: customer._id }, message: \"Account is not active, Please fill your information\" };\r\n        }\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            userType: \"CUSTOMER\",\r\n            customerId: customer._id.toString(),\r\n            phone: customer.phone,\r\n            isActivated: customer.isActivated,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n\r\n        let date = Date.now();\r\n        let issueTime = Math.floor(date / 1000);\r\n        let token = jwt.sign(\r\n            {\r\n                userId: customer._id.toString(),\r\n                phone: customer.phone,\r\n                userModel: \"CUSTOMER\",\r\n                iat: issueTime,\r\n            },\r\n            customerTokenSecretKey,\r\n            { expiresIn: \"24h\" }\r\n        );\r\n        data.token = token;\r\n        return { statusCode: 200, status: true, message: \"Login successfully\", data: data };\r\n    } catch (error) {\r\n        return { statusCode: 500, status: false, message: \"something went wrong\" };\r\n    }\r\n};\r\n\r\nconst updatePassword = async (phone, password) => {\r\n    try {\r\n        let customer = await customerModel.findOne({ phone: phone, isDeleted: false });\r\n        if (!customer) {\r\n            customer = await customerModel.create({ phone });\r\n        }\r\n        if (customer.isBlocked) {\r\n            return { statusCode: 403, status: false, message: \"This account has been blocked\" };\r\n        }\r\n        if (!customer.isActivated) {\r\n            return { statusCode: 200, status: true, isActivated: false, data: { customerId: customer._id }, message: \"Account is not active, Please fill your information\" };\r\n        }\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        customer.password = hashedPassword;\r\n\r\n        await customer.save();\r\n        return { statusCode: 200, status: true, message: \"Password updated successfully\" };\r\n    } catch (error) {\r\n        return { statusCode: 500, status: false, message: \"something went wrong\" };\r\n    }\r\n};\r\n\r\nconst verityOTP = async (req, res) => {\r\n    try {\r\n        let phone = req.params.phone;\r\n        let otpCode = req.params.otpCode;\r\n        if (!phone || !otpCode) {\r\n            return res.status(400).send({ status: false, message: \"phone number and otp are required\" });\r\n        }\r\n        let isValid = false;\r\n        await client.verify.v2\r\n            .services(verifySid)\r\n            .verificationChecks.create({ to: `+91${phone}`, code: otpCode })\r\n            .then((verification_check) => {\r\n                // console.log(\"verification_check.status\", verification_check.status);\r\n                // console.log(\"verification_check\", verification_check);\r\n                if (verification_check.status === \"approved\" || verification_check.valid === true) {\r\n                    isValid = true;\r\n                }\r\n            })\r\n            .catch((err) => {});\r\n        if (isValid) {\r\n            let resAcc = await createAccountAndToken(phone);\r\n            // console.log(resAcc);\r\n            if (resAcc.statusCode === 403) {\r\n                return res.status(403).send({ status: false, message: resAcc.message });\r\n            } else if (resAcc.statusCode === 200 && resAcc.isActivated) {\r\n                res.setHeader(\"Authorization\", \"Bearer \" + resAcc.data.token);\r\n                return res.status(200).send({ status: true, isActivated: true, message: resAcc.message, data: resAcc.data });\r\n            } else if (resAcc.statusCode === 200 && !resAcc.isActivated) {\r\n                return res.status(200).send({ status: true, isActivated: false, message: resAcc.message, data: resAcc.data });\r\n            } else if (resAcc.statusCode === 500) {\r\n                return res.status(500).send({ status: false, message: resAcc.message });\r\n            } else {\r\n                return res.status(400).send({ status: false, message: \"Something went wrong...\" });\r\n            }\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"otp not verified\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst forgetPasswordUsingOtp = async (req, res) => {\r\n    try {\r\n        let phone = req.params.phone;\r\n        let otpCode = req.params.otpCode;\r\n        let { password } = req.body;\r\n\r\n        if (!phone || !otpCode || !password) {\r\n            return res.status(400).send({ status: false, message: \"Phone number, password and otp are required\" });\r\n        }\r\n\r\n        let isValid = false;\r\n        await client.verify.v2\r\n            .services(verifySid)\r\n            .verificationChecks.create({ to: `+91${phone}`, code: otpCode })\r\n            .then((verification_check) => {\r\n                if (verification_check.status === \"approved\" || verification_check.valid === true) {\r\n                    isValid = true;\r\n                }\r\n            })\r\n            .catch((err) => {});\r\n        if (isValid) {\r\n            let resAcc = await updatePassword(phone, password);\r\n            return res.status(resAcc.statusCode).send({ status: resAcc.status, message: resAcc.message });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"OTP not verified\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { sendOTP, verityOTP, forgetPasswordUsingOtp };\r\n","const paymentModel = require(\"../models/paymentModel\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst customerModel = require(\"../models/customerAddressModel\");\r\nconst { generateRandomID } = require(\"./idGeneratorController\");\r\n\r\n// CREATE PAYMENT\r\nconst createPayment = async (order_status, payment_mode, order_sortId, order_id, orderAmt, discountAmt, paymentAmt, customer_id, transaction_id) => {\r\n    try {\r\n        // let orderId = req.params.orderId;\r\n        // let { payment_mode, paymentAmt, customer_id, transaction_id } = req.body;\r\n\r\n        if (!payment_mode || !customer_id) {\r\n            return { status: false };\r\n        }\r\n        let paymentData = {\r\n            order_status,\r\n            paymentId: generateRandomID(20),\r\n            customer_id,\r\n            payment_status: \"\",\r\n            payment_mode,\r\n            order_amount: orderAmt,\r\n            discount_amt: discountAmt,\r\n            balance_amount: 0,\r\n            order_id: {\r\n                orderId: order_id,\r\n                order_custom_id: order_sortId,\r\n            },\r\n        };\r\n        if (payment_mode === \"CUSTOM\" || payment_mode === \"TWENTY_ADV\") {\r\n            paymentData.partial_payment = {\r\n                payment_amount: paymentAmt.toFixed(2),\r\n                date: new Date(),\r\n                transactionId: transaction_id,\r\n            };\r\n            paymentData.payment_status = \"PARTIAL_PAID\";\r\n            if (orderAmt > paymentAmt) {\r\n                paymentData.balance_amount = (orderAmt - paymentAmt - discountAmt).toFixed(2);\r\n            }\r\n        } else if (payment_mode === \"PREPAID\") {\r\n            paymentData.transactionId = transaction_id;\r\n            paymentData.payment_amount = paymentAmt.toFixed(2);\r\n            paymentData.payment_status = \"RECEIVED\";\r\n            paymentData.payment_date = new Date();\r\n            paymentData.balance_amount = 0;\r\n        } else if (payment_mode === \"COD\") {\r\n            paymentData.payment_status = \"PENDING\";\r\n            paymentData.balance_amount = (orderAmt - paymentAmt - discountAmt).toFixed(2);\r\n        }\r\n\r\n        let paymentObj = await paymentModel.create(paymentData);\r\n        return { status: true, paymentId: paymentObj._id };\r\n    } catch (error) {\r\n        return { status: false };\r\n    }\r\n};\r\n\r\n// UPDATE PAYMENT API\r\nconst updatePaymentStatus = async (req, res) => {\r\n    try {\r\n        let paymentId = req.params.paymentId;\r\n        let { payment_date, payment_amount, payment_status } = req.body;\r\n        console.log(req.body);\r\n        // console.log(paymentId);\r\n        let payment = await paymentModel.findById(paymentId);\r\n        // console.log(payment);\r\n        if (!payment) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Payment not found with this payment id\",\r\n            });\r\n        }\r\n\r\n        if (!payment_date || !payment_amount || !payment_status) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\",\r\n            });\r\n        }\r\n\r\n        payment.payment_date = new Date(payment_date);\r\n        switch (payment_status) {\r\n            case \"RECEIVED\": {\r\n                if (Number(payment.balance_amount) !== Number(payment_amount)) {\r\n                    return res.status(400).send({\r\n                        status: false,\r\n                        message: \"Received amount should be equal to balance amount\",\r\n                    });\r\n                } else {\r\n                    payment.payment_amount += Number(payment_amount);\r\n                    payment.cod_received = Number(payment_amount);\r\n                    payment.payment_status = payment_status;\r\n                    payment.balance_amount = 0;\r\n                }\r\n                break;\r\n            }\r\n            case \"REFUNDED\": {\r\n                if (Number(payment.return_amount) !== Number(payment_amount)) {\r\n                    return res.status(400).send({\r\n                        status: false,\r\n                        message: \"Cancelled amount should be equal to refund amount\",\r\n                    });\r\n                } else if (payment.order_status === \"CANCELLED\") {\r\n                    payment.payment_status = \"REFUNDED\";\r\n                    payment.return_amount = Number(payment_amount);\r\n                    payment.balance_amount = 0;\r\n                } else if (payment.order_status === \"PARTIAL_CONFIRMED\") {\r\n                    payment.payment_status = \"PARTIAL_REFUNDED\";\r\n                    payment.return_amount = Number(payment_amount);\r\n                    payment.balance_amount = 0;\r\n                } else {\r\n                    payment.payment_status = \"REFUNDED\";\r\n                    payment.return_amount = Number(payment_amount);\r\n                    payment.balance_amount = 0;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n        await payment.save();\r\n        return res.status(202).send({\r\n            status: true,\r\n            message: \"Payment status updated successfully\",\r\n            data: payment,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// CREATE PAYMENT\r\nconst addPayment = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        let data = req.body;\r\n        let payment = 856.8;\r\n\r\n        let { payment_mode } = data;\r\n\r\n        let order = await orderModel.findOne({ _id: orderId });\r\n\r\n        if (!order) {\r\n            return res.status(404).send({ status: false, message: \"Order not found\" });\r\n        }\r\n\r\n        if (payment > order.grand_total) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Paid amount can not be greater than the Grand Total\",\r\n            });\r\n        }\r\n\r\n        let paymentDetails = {\r\n            paymentId: generateRandomID(10),\r\n            order_id: order._id,\r\n            customer_id: order.customer_id,\r\n            payment_status: \"Pending\",\r\n            payment_mode,\r\n            transactionId: generateRandomID(25),\r\n            payment_amount: payment,\r\n            payment_date: new Date().toLocaleString(),\r\n            partial_mode: null,\r\n        };\r\n\r\n        if (payment_mode === \"TEN_ADV\") {\r\n            let ten_percent_amount = order.grand_total * 0.1;\r\n            let partialPaymentDetails = {\r\n                payment_mode: \"TEN_ADV\",\r\n                amount: ten_percent_amount,\r\n                date: new Date(),\r\n                transactionId: generateRandomID(25),\r\n            };\r\n\r\n            // paymentDetailsData.push(partialPaymentDetails);\r\n\r\n            let firstPartialPayment = await partialPaymentModel.findOne({});\r\n\r\n            if (firstPartialPayment) {\r\n                let partialPaymentDetails = {\r\n                    payment_mode: \"TEN_ADV\",\r\n                    amount: order.grand_total - ten_percent_amount,\r\n                    date: new Date(),\r\n                    transactionId: generateRandomID(25),\r\n                };\r\n                firstPartialPayment.paymentDetails.push(partialPaymentDetails);\r\n\r\n                await firstPartialPayment.save();\r\n            }\r\n\r\n            let partialPaymentData = {\r\n                paymentDetails: partialPaymentDetails,\r\n                remaining_amount: order.grand_total - partialPaymentDetails.amount,\r\n            };\r\n\r\n            newPartialPayment = await partialPaymentModel.create(partialPaymentData);\r\n\r\n            paymentDetails.partial_mode = newPartialPayment._id;\r\n\r\n            paymentDetails.payment_status = \"Pending\";\r\n            paymentDetails.payment_amount = ten_percent_amount;\r\n\r\n            paymentDetails.paymentDetails = [partialPaymentDetails];\r\n\r\n            let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: {\r\n                    partialPaymentData: newPartialPayment,\r\n                    paymentData: newPayment,\r\n                },\r\n            });\r\n        } else if (payment_mode === \"TWENTY_ADV\") {\r\n            let twenty_percent_amount = order.grand_total * 0.2;\r\n            let partialPaymentDetails = {\r\n                payment_mode: \"TWENTY_ADV\",\r\n                amount: twenty_percent_amount,\r\n                date: new Date(),\r\n                transactionId: generateRandomID(25),\r\n            };\r\n\r\n            let firstPartialPayment = await partialPaymentModel.findOne({\r\n                payment_mode: \"TWENTY_ADV\",\r\n            });\r\n\r\n            if (firstPartialPayment) {\r\n                let partialPaymentDetails = {\r\n                    payment_mode: \"TWENTY_ADV\",\r\n                    amount: order.grand_total - twenty_percent_amount,\r\n                    date: new Date(),\r\n                    transactionId: generateRandomID(25),\r\n                };\r\n                firstPartialPayment.paymentDetails.push(partialPaymentDetails);\r\n\r\n                await firstPartialPayment.save();\r\n            }\r\n\r\n            let partialPaymentData = {\r\n                paymentDetails: partialPaymentDetails,\r\n                remaining_amount: order.grand_total - partialPaymentDetails.amount,\r\n            };\r\n\r\n            newPartialPayment = await partialPaymentModel.create(partialPaymentData);\r\n\r\n            paymentDetails.partial_mode = newPartialPayment._id;\r\n            paymentDetails.payment_status = \"PENDING\";\r\n            paymentDetails.payment_amount = twenty_percent_amount;\r\n\r\n            paymentDetails.paymentDetails = [partialPaymentDetails];\r\n\r\n            let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: {\r\n                    partialPaymentData: newPartialPayment,\r\n                    paymentData: newPayment,\r\n                },\r\n            });\r\n        } else if (payment_mode === \"COD\") {\r\n            if (payment < order.grand_total) {\r\n                let partialPaymentDetails = {\r\n                    payment_mode: \"COD\",\r\n                    amount: payment,\r\n                    date: new Date(),\r\n                    transactionId: generateRandomID(25),\r\n                };\r\n\r\n                // Update the existing Partial_Payment or create a new one\r\n                let partialPaymentData = await partialPaymentModel.findOne({\r\n                    payment_mode: \"COD\",\r\n                });\r\n\r\n                if (partialPaymentData) {\r\n                    partialPaymentData.paymentDetails.push(partialPaymentDetails);\r\n                    partialPaymentData.remaining_amount = order.grand_total - payment - partialPaymentData.paymentDetails.reduce((sum, item) => sum + item.amount, 0);\r\n\r\n                    await partialPaymentData.save();\r\n\r\n                    paymentDetails.partial_mode = partialPaymentData._id;\r\n                } else {\r\n                    partialPaymentData = await partialPaymentModel.create({\r\n                        paymentDetails: [partialPaymentDetails],\r\n                        remaining_amount: order.grand_total - payment,\r\n                        payment_mode: \"COD\",\r\n                    });\r\n\r\n                    const newPartialPayment = await partialPaymentData.save();\r\n                    paymentDetails.partial_mode = newPartialPayment._id;\r\n                }\r\n\r\n                // let partialPaymentData = {\r\n                //   paymentDetails: partialPaymentDetails,\r\n                //   remaining_amount: order.grand_total - partialPaymentDetails.amount,\r\n                // };\r\n\r\n                newPartialPayment = await partialPaymentModel.create(partialPaymentData);\r\n\r\n                paymentDetails.partial_mode = newPartialPayment._id;\r\n                paymentDetails.payment_status = \"PENDING\";\r\n                let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Success\",\r\n                    data: {\r\n                        partialPaymentData: newPartialPayment,\r\n                        paymentData: newPayment,\r\n                    },\r\n                });\r\n            } else {\r\n                paymentDetails.payment_status = \"RECEIVED\";\r\n                let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Success\",\r\n                    data: {\r\n                        paymentData: newPayment,\r\n                    },\r\n                });\r\n            }\r\n        } else {\r\n            if (payment === order.grand_total) {\r\n                paymentDetails.payment_status = \"RECEIVED\";\r\n                let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n                return res.status(200).send({ status: true, message: \"Success\", data: newPayment });\r\n            } else {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Paid amount should be equal to Grand Total\",\r\n                });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { createPayment, updatePaymentStatus, addPayment };\r\n","const { isValidObjectId } = require(\"mongoose\");\r\nconst request = require(\"request\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst brandModel = require(\"../models/brandModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst subCategoryModel = require(\"../models/subcategoryModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst { uploadFile } = require(\"./imageController\");\r\nconst { calculateMarginAndSelling } = require(\"../utils/percentage\");\r\n\r\nconst uploadMultipleImage = async (blob) => {\r\n    let imageFile = await uploadFile(blob);\r\n    return imageFile;\r\n};\r\n\r\n// ADD PRODUCT\r\nconst addProduct = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let {\r\n            product_name,\r\n            sku_code,\r\n            hsn_code,\r\n            brandId,\r\n            color,\r\n            categoryId,\r\n            subCatId,\r\n            stockStatus,\r\n            lotSizeQty,\r\n            mrp,\r\n            seller_price,\r\n            gst,\r\n            sellingGST,\r\n            margin,\r\n            qty_in_hand,\r\n            min_order_qty,\r\n            sole,\r\n            material,\r\n            packing_type,\r\n            made_in,\r\n            weight,\r\n            description,\r\n            meta,\r\n            vendor_id,\r\n        } = data;\r\n\r\n        if (!isValid(product_name)) {\r\n            return res.status(400).send({ status: false, message: \"Product name is required\" });\r\n        }\r\n\r\n        if (!isValid(sku_code)) {\r\n            return res.status(400).send({ status: false, message: \"SKU code is required\" });\r\n        }\r\n        if (!isValid(hsn_code)) {\r\n            return res.status(400).send({ status: false, message: \"HSN code is required\" });\r\n        }\r\n\r\n        if (!isValid(mrp)) {\r\n            return res.status(400).send({ status: false, message: \"Product MRP is required\" });\r\n        }\r\n        if (!isValid(gst)) {\r\n            return res.status(400).send({ status: false, message: \"GST is required\" });\r\n        }\r\n        if (!isValid(brandId)) {\r\n            return res.status(400).send({ status: false, message: \"Brand ID is required\" });\r\n        }\r\n\r\n        if (!isValid(seller_price)) {\r\n            return res.status(400).send({ status: false, message: \"Seller price is required\" });\r\n        }\r\n\r\n        if (!isValid(categoryId)) {\r\n            return res.status(400).send({ status: false, message: \"Category ID is required\" });\r\n        }\r\n\r\n        if (!isValid(subCatId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Sub category ID is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValid(stockStatus)) {\r\n            return res.status(400).send({ status: false, message: \"Stock status is required\" });\r\n        }\r\n        if (!isValid(lotSizeQty)) {\r\n            return res.status(400).send({ status: false, message: \"Lot size is required\" });\r\n        }\r\n\r\n        if (!isValid(qty_in_hand)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Quantity in hand is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValid(min_order_qty)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Minimum order quantity is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValid(color)) {\r\n            return res.status(400).send({ status: false, message: \"Product color is required\" });\r\n        }\r\n\r\n        if (req.userModel === \"ADMIN\") {\r\n            if (!isValid(sellingGST)) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Selling GST is required\",\r\n                });\r\n            }\r\n            if (!isValid(margin)) {\r\n                return res.status(400).send({ status: false, message: \"Margin is required\" });\r\n            }\r\n            if (!isValid(vendor_id)) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Vendor id is required\",\r\n                });\r\n            }\r\n        }\r\n\r\n        if (meta !== undefined) {\r\n            meta = JSON.parse(meta);\r\n        }\r\n        let productData = {\r\n            product_name,\r\n            sku_code,\r\n            brandId,\r\n            gst,\r\n            hsn_code,\r\n            color_id: JSON.parse(color),\r\n            categoryId,\r\n            subCatId,\r\n            stockStatus,\r\n            lotSizeQty: JSON.parse(lotSizeQty),\r\n            mrp,\r\n            seller_price,\r\n            qty_in_hand,\r\n            min_order_qty,\r\n            sole,\r\n            material,\r\n            packing_type,\r\n            made_in,\r\n            weight,\r\n            description,\r\n        };\r\n        if (req.userModel === \"ADMIN\") {\r\n            productData.sellingGST = sellingGST;\r\n            productData.margin = margin;\r\n            productData.status = \"Approved\";\r\n        }\r\n        if (meta !== undefined) {\r\n            productData.meta_title = meta.metaTitle;\r\n            productData.meta_keywords = meta.metaKeyword;\r\n            productData.meta_description = meta.metaDescription;\r\n        }\r\n        if (req.body.vendorId !== undefined) {\r\n            productData.vendor_id = req.body.vendorId;\r\n        } else {\r\n            productData.vendor_id = req.userId;\r\n        }\r\n\r\n        let multipleImage = [];\r\n        if (req.files && req.files.thumbnail) {\r\n            productData.thumbnail_pic = await uploadFile(req.files.thumbnail);\r\n        } else if (data.thumbnail !== undefined) {\r\n            productData.thumbnail_pic = data.thumbnail;\r\n        }\r\n        if (req.files && req.files.mulImg) {\r\n            multipleImage = req.files.mulImg;\r\n            let images = [];\r\n            if (Array.isArray(multipleImage)) {\r\n                for (let val of multipleImage) {\r\n                    let img = await uploadMultipleImage(val);\r\n                    images.push(img);\r\n                }\r\n            } else {\r\n                let img = await uploadMultipleImage(multipleImage);\r\n                images.push(img);\r\n            }\r\n            productData.multiple_pics = images;\r\n            // console.log(images);\r\n        } else if (data.mulImg !== undefined) {\r\n            productData.multiple_pics = data.mulImg;\r\n        }\r\n        // console.log(data);\r\n        let brandObj = await brandModel.findById(brandId);\r\n        let categoryObj = await categoryModel.findById(categoryId);\r\n        let subCatObj = await subCategoryModel.findById(subCatId);\r\n\r\n        if (!brandObj || !categoryObj || !subCatObj) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Brand, aritcle, category or subcategory id had some error\",\r\n            });\r\n        }\r\n        brandId = brandObj;\r\n        categoryId = categoryObj;\r\n        subCatId = subCatObj;\r\n\r\n        let product = await productModel.create(productData);\r\n        let vendor = null;\r\n        if (req.userModel === \"ADMIN\") {\r\n            vendor = await vendorModel.findById(vendor_id);\r\n            product.vendor_id = vendor._id;\r\n        } else {\r\n            vendor = await vendorModel.findById(req.userId);\r\n            product.vendor_id = vendor._id;\r\n        }\r\n        vendor.products.push(product);\r\n        await vendor.save();\r\n        await product.save();\r\n        return res.status(201).send({ status: true, message: \"Success\", data: product });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL PRODUCTS\r\nconst getAllProducts = async (req, res) => {\r\n    try {\r\n        let data = [];\r\n        if (req.userModel === \"VENDOR\") {\r\n            let products = await productModel.find({ isDeleted: false, vendor_id: req.userId }).populate([\"color_id\", \"categoryId\", \"subCatId\", \"brandId\"]);\r\n            data = products;\r\n        } else {\r\n            let products = await productModel.find({ isDeleted: false }).populate([\"color_id\", \"categoryId\", \"subCatId\", \"brandId\", \"vendor_id\"]);\r\n            for (let x of products) {\r\n                if (x.vendor_id.status === \"Approved\") {\r\n                    data.push(x);\r\n                }\r\n            }\r\n        }\r\n        return res.status(200).send({ status: true, data: data });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllProductsForDashboard = async (req, res) => {\r\n    try {\r\n        let products = await productModel\r\n            .find({\r\n                isDeleted: false,\r\n                stockStatus: \"In_stock\",\r\n                status: \"Approved\",\r\n            })\r\n            .populate([\"color_id\", \"categoryId\", \"subCatId\", \"brandId\", \"vendor_id\"]);\r\n\r\n        let data = [];\r\n        for (let x of products) {\r\n            if (x.vendor_id.status === \"Approved\") {\r\n                data.push(x);\r\n            }\r\n        }\r\n        return res.status(200).send({ status: true, data: data });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst getAllProductsForFilter = async (req, res) => {\r\n    try {\r\n        products = await productModel\r\n            .find({\r\n                isDeleted: false,\r\n                stockStatus: \"In_stock\",\r\n                status: \"Approved\",\r\n            })\r\n            .populate([\"color_id\", \"categoryId\", \"subCatId\", \"brandId\", \"vendor_id\"]);\r\n        return res.status(200).send({ status: true, data: products });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET PRODUCT BY PRODUCT ID\r\nconst getProductById = async (req, res) => {\r\n    try {\r\n        let productId = req.params.productId;\r\n        let product = null;\r\n        if (req.userModel === \"VENDOR\") {\r\n            product = await productModel.findOne({\r\n                _id: productId,\r\n                isDeleted: false,\r\n                vendor_id: req.userId,\r\n            });\r\n        } else {\r\n            product = await productModel.findOne({\r\n                _id: productId,\r\n                isDeleted: false,\r\n            });\r\n        }\r\n        return res.status(200).send({ status: true, data: product });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE PRODUCT BY PRODUCT ID\r\nconst updateProductByProductId = async (req, res) => {\r\n    try {\r\n        let productId = req.params.productId;\r\n        if (!isValidObjectId(productId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid product id\" });\r\n        }\r\n\r\n        let product = await productModel.findOne({\r\n            _id: productId,\r\n            isDeleted: false,\r\n        });\r\n\r\n        if (!product) {\r\n            return res.status(404).send({ status: false, message: \"Product not found\" });\r\n        }\r\n\r\n        let body = req.body;\r\n\r\n        if (\"product_name\" in body) {\r\n            product.product_name = body.product_name;\r\n        }\r\n\r\n        if (\"sku_code\" in body) {\r\n            product.sku_code = body.sku_code;\r\n        }\r\n\r\n        if (\"description\" in body) {\r\n            product.description = body.description;\r\n        }\r\n\r\n        if (\"mrp\" in body) {\r\n            product.mrp = body.mrp;\r\n        }\r\n\r\n        if (\"seller_price\" in body) {\r\n            product.seller_price = body.seller_price;\r\n        }\r\n\r\n        if (\"selling_price\" in body) {\r\n            product.selling_price = body.selling_price;\r\n        }\r\n\r\n        if (\"gst_amount\" in body) {\r\n            product.gst_amount = body.gst_amount;\r\n        }\r\n\r\n        if (\"stock_status\" in body) {\r\n            product.stockStatus = body.stock_status;\r\n        }\r\n\r\n        if (\"qty_in_hand\" in body) {\r\n            product.qty_in_hand = body.qty_in_hand;\r\n        }\r\n\r\n        if (\"min_order_qty\" in body) {\r\n            product.min_order_qty = body.min_order_qty;\r\n        }\r\n\r\n        if (\"size_qty\" in body) {\r\n            product.size_qty = body.size_qty;\r\n        }\r\n\r\n        if (\"color\" in body) {\r\n            product.color = body.color;\r\n        }\r\n\r\n        if (\"style\" in body) {\r\n            product.style = body.style;\r\n        }\r\n\r\n        if (\"sole\" in body) {\r\n            product.sole = body.sole;\r\n        }\r\n\r\n        if (\"material\" in body) {\r\n            product.material = body.material;\r\n        }\r\n\r\n        if (\"packing_type\" in body) {\r\n            product.packing_type = body.packing_type;\r\n        }\r\n\r\n        if (\"made_in\" in body) {\r\n            product.made_in = body.made_in;\r\n        }\r\n\r\n        if (\"primary_category\" in body) {\r\n            product.primary_category = body.primary_category;\r\n        }\r\n\r\n        if (\"weight\" in body) {\r\n            product.weight = body.weight;\r\n        }\r\n\r\n        if (\"category\" in body) {\r\n            product.categoryId = body.category;\r\n        }\r\n\r\n        if (\"meta_title\" in body) {\r\n            product.meta_title = body.meta_title;\r\n        }\r\n\r\n        if (\"meta_description\" in body) {\r\n            product.meta_description = body.meta_description;\r\n        }\r\n\r\n        if (\"status\" in body) {\r\n            product.status = body.status;\r\n        }\r\n\r\n        await product.save();\r\n\r\n        return res.status(200).send({ status: true, message: \"success\", data: product });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE PRODUCT BY PRODUCT ID\r\nconst deleteProductByProductId = async (req, res) => {\r\n    try {\r\n        let productId = req.params.productId;\r\n        if (!isValidObjectId) {\r\n            return res.status(400).send({ status: false, message: \"Invalid product id\" });\r\n        }\r\n\r\n        let product = await productModel.findOne({\r\n            _id: productId,\r\n            isDeleted: false,\r\n        });\r\n\r\n        if (!product) {\r\n            return res.status(404).send({ status: false, message: \"Product not found\" });\r\n        }\r\n\r\n        let deleteProduct = await productModel.findOneAndUpdate(\r\n            {\r\n                _id: productId,\r\n                isDeleted: false,\r\n            },\r\n            {\r\n                isDeleted: true,\r\n                deletedAt: new Date(),\r\n            },\r\n            { new: true }\r\n        );\r\n\r\n        if (!deleteProduct) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Product not found or already deleted\",\r\n            });\r\n        }\r\n\r\n        return res.status(200).send({ status: true, message: \"Product deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst changeProductStatus = async (req, res) => {\r\n    try {\r\n        let { newStatus, margin, sellingGST } = req.body;\r\n        let productId = req.params.productId;\r\n        let product = await productModel.findById(productId);\r\n        if (!product) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Bad request\",\r\n            });\r\n        }\r\n        product.status = newStatus;\r\n        if (newStatus === \"Approved\") {\r\n            if (!margin || !sellingGST) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Bad request\",\r\n                });\r\n            }\r\n            product.margin = margin;\r\n            product.sellingGST = sellingGST;\r\n            product.selling_price = product.seller_price;\r\n        } else {\r\n            product.margin = undefined;\r\n            product.sellingGST = undefined;\r\n            product.selling_price = undefined;\r\n        }\r\n        await product.save();\r\n        return res.status(200).send({ status: true, message: \"Product updated successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst changeProductStockStatus = async (req, res) => {\r\n    try {\r\n        let { newStockStatus } = req.body;\r\n        let productId = req.params.productId;\r\n        let product = await productModel.findById(productId);\r\n        if (!product) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Bad request\",\r\n            });\r\n        }\r\n        product.stockStatus = newStockStatus;\r\n        await product.save();\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Product Stock Status updated successfully\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst csvProduct = async (req, res) => {\r\n    try {\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Product Stock Status updated successfully\",\r\n            data: \"xlsxUrl\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst updateProduct = async (req, res) => {\r\n    try {\r\n        let productId = req.params.productId;\r\n        let {\r\n            product_name,\r\n            sku_code,\r\n            hsn_code,\r\n            description,\r\n            mrp,\r\n            gst,\r\n            seller_price,\r\n            sellingGST,\r\n            margin,\r\n            qty_in_hand,\r\n            min_order_qty,\r\n            lotSizeQty,\r\n            color_id,\r\n            sole,\r\n            material,\r\n            packing_type,\r\n            made_in,\r\n            weight,\r\n            categoryId,\r\n            subCatId,\r\n        } = req.body;\r\n\r\n        let product = await productModel.findById(productId);\r\n        if (product_name) {\r\n            product.product_name = product_name;\r\n        }\r\n        if (sku_code) {\r\n            product.sku_code = sku_code;\r\n        }\r\n        if (hsn_code) {\r\n            product.hsn_code = hsn_code;\r\n        }\r\n        if (description) {\r\n            product.description = description;\r\n        }\r\n        if (mrp) {\r\n            product.mrp = mrp;\r\n        }\r\n        if (gst) {\r\n            product.gst = gst;\r\n        }\r\n        if (seller_price) {\r\n            product.seller_price = seller_price;\r\n        }\r\n        if (sellingGST) {\r\n            product.sellingGST = sellingGST;\r\n        }\r\n        if (margin) {\r\n            product.margin = margin;\r\n        }\r\n        if (qty_in_hand) {\r\n            product.qty_in_hand = qty_in_hand;\r\n        }\r\n        if (min_order_qty) {\r\n            product.min_order_qty = min_order_qty;\r\n        }\r\n        if (lotSizeQty) {\r\n            product.lotSizeQty = lotSizeQty.split(\",\");\r\n        }\r\n        if (color_id) {\r\n            console.log(color_id);\r\n            product.color_id = color_id;\r\n        }\r\n        if (sole) {\r\n            product.sole = sole;\r\n        }\r\n        if (material) {\r\n            product.material = material;\r\n        }\r\n        if (packing_type) {\r\n            product.packing_type = packing_type;\r\n        }\r\n        if (made_in) {\r\n            product.made_in = made_in;\r\n        }\r\n        if (weight) {\r\n            product.weight = weight;\r\n        }\r\n        if (categoryId) {\r\n            product.categoryId = categoryId;\r\n        }\r\n        if (subCatId) {\r\n            product.subCatId = subCatId;\r\n        }\r\n        if (req.files) {\r\n            let { thumbnail_pic, multiple_pics } = req.files;\r\n            if (thumbnail_pic) {\r\n                product.thumbnail_pic = await uploadFile(thumbnail_pic);\r\n            }\r\n            if (multiple_pics) {\r\n                if (multiple_pics.length) {\r\n                    let images = [];\r\n                    for (let singleFile of multiple_pics) {\r\n                        let x = await uploadMultipleImage(singleFile);\r\n                        images.push(x);\r\n                    }\r\n                    product.multiple_pics = images;\r\n                } else {\r\n                    let x = await uploadFile(multiple_pics);\r\n                    product.multiple_pics = [x];\r\n                }\r\n            }\r\n        }\r\n        await product.save();\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Product updated successfully\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addProduct,\r\n    getAllProducts,\r\n    getProductById,\r\n    updateProductByProductId,\r\n    deleteProductByProductId,\r\n    getAllProductsForDashboard,\r\n    changeProductStatus,\r\n    changeProductStockStatus,\r\n    csvProduct,\r\n    getAllProductsForFilter,\r\n    updateProduct,\r\n};\r\n","const adminModel = require(\"../models/adminModel\");\nconst vendorModel = require(\"../models/vendorModel\");\nconst { uploadFile } = require(\"./imageController\");\nconst bcrypt = require(\"bcrypt\");\n\nconst changePassword = async (req, res) => {\n    let vendor = await vendorModel.findById(req.body.userid);\n    vendor.password = await bcrypt.hash(req.body.password, 10);\n    vendor.save();\n    res.status(200).send({\n        status: true,\n        message: \"password changed successfully\",\n    });\n};\n\nconst updateProfile = async (req, res) => {\n    try {\n        let userId = req.userId;\n        let userType = req.userModel;\n        let { fullName, emailID, phone, altPhone, newPass, oldPass } = req.body;\n        if (userType === \"ADMIN\") {\n            let admin = await adminModel.findById(userId);\n            if (oldPass && newPass) {\n                bcrypt.compare(oldPass, admin.password, function (err, result) {\n                    if (err) {\n                    }\n                    hasAccess(result, admin);\n                });\n                async function hasAccess(result, admin) {\n                    if (result) {\n                        admin.password = await bcrypt.hash(newPass, 10);\n                        if (fullName) admin.name = fullName;\n                        if (emailID) admin.email = emailID;\n                        if (phone && emailID) {\n                            let x = await adminModel.find({\n                                $or: [{ email: emailID }, { phone: phone }],\n                            });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message:\n                                        \"Mobile and Email number already exists\",\n                                });\n                            }\n                            admin.phone = phone;\n                            admin.email = emailID;\n                        } else if (phone) {\n                            let x = await adminModel.find({ phone: phone });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message: \"Mobile number already exists\",\n                                });\n                            }\n                            admin.phone = phone;\n                        } else if (emailID) {\n                            let x = await adminModel.find({ email: emailID });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message: \"Email id already exists\",\n                                });\n                            }\n                            admin.email = emailID;\n                        }\n\n                        if (req.files) {\n                            let { profileImg } = req.files;\n                            let imgRes = await uploadFile(profileImg);\n                            admin.profileUrl = imgRes;\n                        }\n                        let y = await admin.save();\n                        let data = {};\n                        data.name = y.name;\n                        data.email = y.email;\n                        data.userType = y.isSuperAdmin\n                            ? \"Super Admin\"\n                            : \"Admin\";\n                        data.role = y.role;\n                        data.phone = y.phone;\n                        data.photo = y.profileUrl;\n                        // console.log(vendor);\n                        return res.status(202).send({\n                            status: true,\n                            message: \"Profile updated successfully\",\n                            data: data,\n                        });\n                    } else {\n                        return res.status(401).send({\n                            status: true,\n                            message: \"Invalid Password\",\n                        });\n                    }\n                }\n            } else {\n                if (fullName) admin.name = fullName;\n                if (emailID) admin.email = emailID;\n                if (phone && emailID) {\n                    let x = await adminModel.find({\n                        $or: [{ email: emailID }, { phone: phone }],\n                    });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Mobile and Email number already exists\",\n                        });\n                    }\n                    admin.phone = phone;\n                    admin.email = emailID;\n                } else if (phone) {\n                    let x = await adminModel.find({ phone: phone });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Mobile number already exists\",\n                        });\n                    }\n                    admin.phone = phone;\n                } else if (emailID) {\n                    let x = await adminModel.find({ email: emailID });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Email id already exists\",\n                        });\n                    }\n                    admin.email = emailID;\n                }\n\n                if (req.files) {\n                    let { profileImg } = req.files;\n                    let imgRes = await uploadFile(profileImg);\n                    admin.profileUrl = imgRes;\n                }\n                let y = await admin.save();\n                let data = {};\n                data.name = y.name;\n                data.email = y.email;\n                data.userType = y.isSuperAdmin ? \"Super Admin\" : \"Admin\";\n                data.role = y.role;\n                data.phone = y.phone;\n                data.photo = y.profileUrl;\n                // console.log(vendor);\n                return res.status(202).send({\n                    status: true,\n                    message: \"Profile updated successfully\",\n                    data: data,\n                });\n            }\n        } else {\n            let vendor = await vendorModel.findById(userId);\n            if (oldPass && newPass) {\n                bcrypt.compare(\n                    oldPass,\n                    vendor.password,\n                    function (err, result) {\n                        if (err) {\n                        }\n                        hasAccess(result, vendor);\n                    }\n                );\n                async function hasAccess(result, vendor) {\n                    if (result) {\n                        console.log(result);\n                        vendor.password = await bcrypt.hash(newPass, 10);\n                        if (fullName) vendor.representativeName = fullName;\n                        if (altPhone) vendor.altMobileNo = altPhone;\n                        if (req.files) {\n                            let { profileImg } = req.files;\n                            let imgRes = await uploadFile(profileImg);\n                            vendor.profileUrl = imgRes;\n                        }\n                        if (phone && emailID) {\n                            let x = await vendorModel.find({\n                                $or: [\n                                    { emailId: emailID },\n                                    { mobileNo: phone },\n                                ],\n                            });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message:\n                                        \"Mobile and Email number already exists\",\n                                });\n                            }\n                            vendor.mobileNo = phone;\n                            vendor.emailId = emailID;\n                        } else if (phone) {\n                            let x = await vendorModel.find({ mobileNo: phone });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message: \"Mobile number already exists\",\n                                });\n                            }\n                            vendor.mobileNo = phone;\n                        } else if (emailID) {\n                            let x = await vendorModel.find({\n                                emailId: emailID,\n                            });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message: \"Email id already exists\",\n                                });\n                            }\n                            vendor.emailId = emailID;\n                        }\n\n                        let y = await vendor.save();\n                        let data = {};\n                        data.name = y.representativeName;\n                        data.email = y.emailId;\n                        data.userType = \"Seller\";\n                        data.role = y.role;\n                        data.altMobileNo = y.altMobileNo;\n                        data.phone = y.mobileNo;\n                        data.photo = y.profileUrl;\n                        data.vendorId = y.vendor_unique_id;\n                        return res.status(202).send({\n                            status: true,\n                            message: \"Profile updated successfully\",\n                            data: data,\n                        });\n                    } else {\n                        return res.status(401).send({\n                            status: true,\n                            message: \"Invalid Password\",\n                        });\n                    }\n                }\n            } else {\n                if (fullName) vendor.representativeName = fullName;\n                if (altPhone) vendor.altMobileNo = altPhone;\n                if (req.files) {\n                    let { profileImg } = req.files;\n                    let imgRes = await uploadFile(profileImg);\n                    vendor.profileUrl = imgRes;\n                }\n                if (phone && emailID) {\n                    let x = await vendorModel.find({\n                        $or: [{ emailId: emailID }, { mobileNo: phone }],\n                    });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Mobile and Email number already exists\",\n                        });\n                    }\n                    vendor.mobileNo = phone;\n                    vendor.emailId = emailID;\n                } else if (phone) {\n                    let x = await vendorModel.find({ mobileNo: phone });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Mobile number already exists\",\n                        });\n                    }\n                    vendor.mobileNo = phone;\n                } else if (emailID) {\n                    let x = await vendorModel.find({\n                        emailId: emailID,\n                    });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Email id already exists\",\n                        });\n                    }\n                    vendor.emailId = emailID;\n                }\n\n                let y = await vendor.save();\n                let data = {};\n                data.name = y.representativeName;\n                data.email = y.emailId;\n                data.userType = \"Seller\";\n                data.role = y.role;\n                data.altMobileNo = y.altMobileNo;\n                data.phone = y.mobileNo;\n                data.photo = y.profileUrl;\n                data.vendorId = y.vendor_unique_id;\n                return res.status(202).send({\n                    status: true,\n                    message: \"Profile updated successfully\",\n                    data: data,\n                });\n            }\n        }\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nmodule.exports = { updateProfile, changePassword };\n","const questionModel = require(\"../models/questionModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\n\r\n// ADD QUESTIONS\r\nconst addQuestions = async (req, res) => {\r\n    try {\r\n        let { questionFor, question } = req.body;\r\n\r\n        if (!isValid(questionFor)) {\r\n            return res.status(400).send({ status: false, message: \"QuestionFor field is required\" });\r\n        }\r\n\r\n        if (!isValid(question)) {\r\n            return res.status(400).send({ status: false, message: \"Question is required\" });\r\n        }\r\n\r\n        let questionObj = {\r\n            questionFor,\r\n            question,\r\n        };\r\n\r\n        await questionModel.create(questionObj);\r\n        let allQuestion = await questionModel.find({ questionFor: questionFor, isDeleted: false });\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Question added successfully\",\r\n            data: allQuestion,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllQuestionByModel = async (req, res) => {\r\n    try {\r\n        let model = req.userModel;\r\n        let questions = await questionModel.find({ questionFor: model, isDeleted: false });\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Question fetched successfully\",\r\n            data: questions,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllQuestion = async (req, res) => {\r\n    try {\r\n        let questions = await questionModel.find({ isDeleted: false });\r\n        let data = {\r\n            admin: [],\r\n            vendor: [],\r\n            customer: [],\r\n        };\r\n        for (let x of questions) {\r\n            if (x.questionFor === \"ADMIN\") {\r\n                data.admin.push(x);\r\n            }\r\n            if (x.questionFor === \"VENDOR\") {\r\n                data.vendor.push(x);\r\n            }\r\n            if (x.questionFor === \"CUSTOMER\") {\r\n                data.customer.push(x);\r\n            }\r\n        }\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Question fetched successfully\",\r\n            data: data,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst deleteQuestionById = async (req, res) => {\r\n    try {\r\n        let questionId = req.params.questionid;\r\n        let question = await questionModel.findById(questionId);\r\n        if (question) {\r\n            question.isDeleted = true;\r\n            await question.save();\r\n            let questions = await questionModel.find({ questionFor: question.questionFor, isDeleted: false });\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Question fetched successfully\",\r\n                data: questions,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"question id is not valid\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { addQuestions, getAllQuestionByModel, getAllQuestion, deleteQuestionById };\r\n","const excelJs = require(\"exceljs\");\nconst orderModel = require(\"../models/orderModel\");\n\nconst getOrderReport = async (req, res) => {\n    try {\n        //{ saleInvoice: { $exists: true } }\n        let orders = await orderModel.find({ saleInvoice: { $exists: true } }).populate([\"payment_id\", \"order_status_id\"]);\n        return res.status(200).send({ status: true, message: \"Order Report fetched...\", data: orders });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst exportSaleReport = async (req, res) => {\n    try {\n        let { startDate, endDate } = req.body;\n        if (!startDate || !endDate) {\n            return res.status(400).send({ status: false, message: \"Start date end end date are required\" });\n        }\n        let date1 = new Date(startDate).getTime();\n        let date2 = new Date(endDate).getTime();\n        if (date1 > date2) {\n            return res.status(400).send({ status: false, message: \"Wrong date range\" });\n        }\n        var workbook = new excelJs.Workbook();\n        var worksheet = workbook.addWorksheet(\"Add Bulk Product\");\n\n        let columnData = [\n            { header: \"Order ID\", key: \"order_id\" },\n            { header: \"Order Date and Time\", key: \"order_date\" },\n            { header: \"Invoice No\", key: \"invoice_no\" },\n            { header: \"Invoice Date\", key: \"invoice_date\" },\n            { header: \"Order value\", key: \"order_value\" },\n            { header: \"Order Qty\", key: \"order_qty\" },\n            { header: \"Invoice value/confirmed value\", key: \"invoice_value\" },\n            { header: \"Advance\", key: \"advance\" },\n            { header: \"Discount\", key: \"discount\" },\n            { header: \"Net Amount\", key: \"net_amount\" },\n            { header: \"Refund\", key: \"refund\" },\n            { header: \"Cash on delivery\", key: \"cash_on_delivery\" },\n        ];\n        var data = {\n            order_id: \"FZ12345678\",\n            order_date: \"07-08-2023 at 18:37:00\",\n            invoice_no: \"FSIN2312345678\",\n            invoice_date: \"07-08-2023 at 18:37:00\",\n            order_qty: \"4\",\n            invoice_value: \"10000\",\n            advance: \"2000\",\n            discount: \"1200\",\n            net_amount: \"6800\",\n            refund: \"00\",\n            cash_on_delivery: \"6800\",\n        };\n        if (req.userModel === \"ADMIN\") {\n            columnData.unshift({ header: \"Buyer name\", key: \"buyer_name\" }, { header: \"Buyer No.\", key: \"buyer_no\" });\n\n            data.buyer_name = \"SANJEET KUMAR\";\n            data.buyer_no = 1234567891;\n        }\n        worksheet.columns = columnData;\n        worksheet.addRow(data);\n        worksheet.getRow(1).eachCell((cell) => {\n            cell.font = { bold: true };\n            cell.fill = {\n                type: \"pattern\",\n                pattern: \"solid\",\n                fgColor: { argb: \"F08080\" },\n            };\n        });\n\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        res.setHeader(\"Content-Disposition\", `attachment; brandid.xlsx`);\n\n        return workbook.xlsx.write(res).then(() => {\n            res.status(200);\n        });\n        // return res.status(200).send({ status: true, message: \"Report exported\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst exportPurchaseReport = async (req, res) => {\n    try {\n        let { startDate, endDate } = req.body;\n        if (!startDate || !endDate) {\n            return res.status(400).send({ status: false, message: \"Start date end end date are required\" });\n        }\n        let date1 = new Date(startDate).getTime();\n        let date2 = new Date(endDate).getTime();\n        if (date1 > date2) {\n            return res.status(400).send({ status: false, message: \"Wrong date range\" });\n        }\n        var workbook = new excelJs.Workbook();\n        var worksheet = workbook.addWorksheet(\"Add Bulk Product\");\n        let columnData = [\n            { header: \"Order ID\", key: \"order_id\" },\n            { header: \"Order Date and Time\", key: \"order_date\" },\n            { header: \"Invoice No\", key: \"invoice_no\" },\n            { header: \"Invoice Date\", key: \"invoice_date\" },\n            { header: \"Seller name\", key: \"seller_name\" },\n            { header: \"Seller Phone No.\", key: \"seller_phone\" },\n            { header: \"Seller GST\", key: \"seller_gst\" },\n            { header: \"FactorEz GST\t\", key: \"factorez_gst\" },\n            { header: \"Purchase \", key: \"purchase\" },\n            { header: \"Invoice value/confirmed value\", key: \"invoice_value\" },\n            { header: \"GST Percentage\", key: \"gst_percentage\" },\n            { header: \"Taxable value\", key: \"taxable_value\" },\n            { header: \"Gst amount\", key: \"gst_amount\" },\n            { header: \"Quantity\", key: \"quantity\" },\n            { header: \"Order status\", key: \"order_status\" },\n        ];\n        var data = {\n            order_id: \"FZ12345678\",\n            order_date: \"07-08-2023 at 18:37:00\",\n            invoice_no: \"FSIN2312345678\",\n            invoice_date: \"07-08-2023 at 18:37:00\",\n            seller_name: \"Navnit Sekh\",\n            seller_phone: \"1234567891\",\n            seller_gst: \"09ABCDE4455R23\",\n            factorez_gst: \"09ABCDE4455R23\",\n            purchase: \"4000\",\n            invoice_value: \"5000\",\n            gst_percentage: \"18\",\n            taxable_value: \"5000\",\n            gst_amount: \"1000\",\n            quantity: \"3\",\n            order_status: \"pending\",\n        };\n        // if (req.userModel === \"ADMIN\") {\n        //     columnData.unshift({ header: \"Buyer name\", key: \"buyer_name\" }, { header: \"Buyer No.\", key: \"buyer_no\" });\n\n        //     data.buyer_name = \"SANJEET KUMAR\";\n        //     data.buyer_no = 1234567891;\n        // }\n        worksheet.columns = columnData;\n        worksheet.addRow(data);\n        worksheet.getRow(1).eachCell((cell) => {\n            cell.font = { bold: true };\n            cell.fill = {\n                type: \"pattern\",\n                pattern: \"solid\",\n                fgColor: { argb: \"F08080\" },\n            };\n        });\n\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        res.setHeader(\"Content-Disposition\", `attachment; brandid.xlsx`);\n\n        return workbook.xlsx.write(res).then(() => {\n            res.status(200);\n        });\n        // return res.status(200).send({ status: true, message: \"Report exported\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst getPaymentReport = async (req, res) => {\n    try {\n        let orders = await orderModel.find({ saleInvoice: { $exists: true } }).populate([\"vendorId\", \"payment_id\", \"order_status_id\"]);\n        return res.status(200).send({ status: true, message: \"Payment report fetched\", data: orders });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst updatePaymentReport = async (req, res) => {\n    try {\n        let orderId = req.params.orderid;\n        let { paymentStatus, paidAmount, paymentDate, transactionId, settlementAmt, message } = req.body;\n        let data = req.body;\n        let order = await orderModel.findById(orderId);\n        if (!order) {\n            return res.status(400).send({ status: false, message: \"Order id not found\" });\n        }\n        if (paymentStatus) order.paymentReportStatus.paymentStatus = paymentStatus;\n        if (paidAmount) order.paymentReportStatus.paidAmount = paidAmount;\n        if (paymentDate) order.paymentReportStatus.paymentDate = paymentDate;\n        if (transactionId) order.paymentReportStatus.transactionId = transactionId;\n        if (settlementAmt) order.paymentReportStatus.settlementAmt = settlementAmt;\n        if (message) order.paymentReportStatus.message = message;\n        data.updateAt = new Date();\n        order.paymentReportStatus.logs.push(data);\n        await order.save();\n        let orders = await orderModel.find({ saleInvoice: { $exists: true } }).populate([\"vendorId\", \"payment_id\", \"order_status_id\"]);\n        return res.status(200).send({ status: true, message: \"Payment Report Updated\", data: orders });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nmodule.exports = { getOrderReport, exportSaleReport, exportPurchaseReport, getPaymentReport, updatePaymentReport };\n","const vendorModel = require(\"../models/vendorModel\");\r\nconst bankModel = require(\"../models/bankModel\");\r\nconst documentModel = require(\"../models/documentModel\");\r\nconst { uploadFile } = require(\"./imageController\");\r\nconst { generateRandomID, generateRandomAlphaNumericID } = require(\"../controllers/idGeneratorController\");\r\n\r\nconst { isValid, isValidEmail, isValidMoblie, isValidGST } = require(\"../utils/utils\");\r\nconst { roleEnums } = require(\"../utils/enums\");\r\nconst brandModel = require(\"../models/brandModel\");\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\n// ADD VENDOR\r\nconst addVendor = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let {\r\n            firmName,\r\n            brandName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId,\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            acHolderName,\r\n            acNo,\r\n            bankName,\r\n            branch,\r\n            ifsc,\r\n            termsAndConditions,\r\n        } = data;\r\n        if (password === \"\") {\r\n            return res.status(400).send({ message: \"Password is required\", status: false });\r\n        }\r\n        password = await bcrypt.hash(password, 10);\r\n\r\n        let isVendor = await vendorModel.findOne({ emailId: emailId });\r\n        if (isVendor) {\r\n            return res.status(400).send({ message: \"Email id already exists\", status: false });\r\n        }\r\n        // console.log(data);\r\n        let gstRegDoc = await uploadFile(req.files.gstRegDoc);\r\n        let brandLogo = await uploadFile(req.files.brandLogo);\r\n        let brandRegDoc = await uploadFile(req.files.brandRegDoc);\r\n        let cancelledCheque = await uploadFile(req.files.cancelledCheque);\r\n        let documentData = {\r\n            brandRegDoc: brandRegDoc,\r\n            gstRegDoc: gstRegDoc,\r\n        };\r\n\r\n        let bankData = {\r\n            acHolderName: acHolderName,\r\n            acNo: acNo,\r\n            bankName: bankName,\r\n            branch: branch,\r\n            ifsc: ifsc,\r\n            cancelledCheque: cancelledCheque,\r\n        };\r\n\r\n        let brandData = {\r\n            brand_name: brandName,\r\n            brandLogo: brandLogo,\r\n        };\r\n        let vendorData = {\r\n            firmName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId: emailId.toLowerCase(),\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            termsAndConditions,\r\n        };\r\n\r\n        let document = await documentModel.create(documentData);\r\n        let bank = await bankModel.create(bankData);\r\n        let brand = await brandModel.create(brandData);\r\n\r\n        vendorData.bank_id = bank;\r\n        vendorData.document_id = document;\r\n        vendorData.brand_id = brand;\r\n        vendorData.vendor_unique_id = generateRandomID(10);\r\n        vendorData.auth_unique_id = generateRandomID(10);\r\n        vendorData.db_unique_id = generateRandomAlphaNumericID(20);\r\n        vendorData.sharing_unique_id = generateRandomAlphaNumericID(20);\r\n        // console.log(vendorData);\r\n        vendorData.role = [\"VENDOR\"];\r\n\r\n        let vendor = await vendorModel.create(vendorData);\r\n        brand.vendor_id = vendor;\r\n        await brand.save();\r\n        return res.status(201).send({ status: true, message: \"Success\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst createVendorByAdmin = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let adminId = req.userId;\r\n        let model = req.userModel;\r\n        let {\r\n            firmName,\r\n            brandName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId,\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            acHolderName,\r\n            acNo,\r\n            bankName,\r\n            branch,\r\n            ifsc,\r\n        } = data;\r\n        if (password === \"\") {\r\n            return res.status(400).send({ message: \"Password is required\", status: false });\r\n        }\r\n        let isVendor = await vendorModel.findOne({ emailId: emailId });\r\n        if (isVendor) {\r\n            return res.status(400).send({ message: \"Email id already exists\", status: false });\r\n        }\r\n        password = await bcrypt.hash(password, 10);\r\n        // console.log(data);\r\n        let gstRegDoc = await uploadFile(req.files.gstRegDoc);\r\n        let brandLogo = await uploadFile(req.files.brandLogo);\r\n        let brandRegDoc = await uploadFile(req.files.brandRegDoc);\r\n        let cancelledCheque = await uploadFile(req.files.cancelledCheque);\r\n        let documentData = {\r\n            brandRegDoc: brandRegDoc,\r\n            gstRegDoc: gstRegDoc,\r\n            actionTakenBy: adminId,\r\n        };\r\n\r\n        let bankData = {\r\n            acHolderName: acHolderName,\r\n            acNo: acNo,\r\n            bankName: bankName,\r\n            branch: branch,\r\n            ifsc: ifsc,\r\n            cancelledCheque: cancelledCheque,\r\n            actionTakenBy: adminId,\r\n        };\r\n\r\n        let brandData = {\r\n            brand_name: brandName,\r\n            brandLogo: brandLogo,\r\n            brandStatus: \"Approved\",\r\n        };\r\n        let vendorData = {\r\n            firmName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId: emailId.toLowerCase(),\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            termsAndConditions: true,\r\n        };\r\n        let document = await documentModel.create(documentData);\r\n        let bank = await bankModel.create(bankData);\r\n        let brand = await brandModel.create(brandData);\r\n        vendorData.bank_id = bank;\r\n        vendorData.document_id = document;\r\n        vendorData.brand_id = brand;\r\n        vendorData.vendor_unique_id = generateRandomID(10);\r\n        vendorData.auth_unique_id = generateRandomID(10);\r\n        vendorData.db_unique_id = generateRandomAlphaNumericID(20);\r\n        vendorData.sharing_unique_id = generateRandomAlphaNumericID(20);\r\n        vendorData.role = [\"VENDOR\"];\r\n        vendorData.actionTakenBy = adminId;\r\n        vendorData.status = \"Approved\";\r\n        vendorData.basicInfoStatus = \"Approved\";\r\n        let vendor = await vendorModel.create(vendorData);\r\n        brand.vendor_id = vendor;\r\n        await brand.save();\r\n        return res.status(201).send({ status: true, message: \"Success\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllVendors = async (req, res) => {\r\n    try {\r\n        let vendors = await vendorModel.find({ isDeleted: false }).populate([\"bank_id\", \"document_id\", \"actionTakenBy\", \"brand_id\"]);\r\n        return res.status(201).send({ status: true, message: \"Success\", data: vendors });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst updateVendor = async (req, res) => {\r\n    try {\r\n        let {\r\n            firmName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId,\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            brand_id,\r\n            brand_name,\r\n            bank_id,\r\n            acHolderName,\r\n            acNo,\r\n            bankName,\r\n            branch,\r\n            ifsc,\r\n        } = req.body;\r\n        let vendorObjId = req.params.vendorId;\r\n        let vendor = await vendorModel.findById(vendorObjId).populate([\"bank_id\", \"document_id\", \"brand_id\"]);\r\n        if (firmName) {\r\n            vendor.firmName = firmName;\r\n        }\r\n        if (gstNo) {\r\n            vendor.gstNo = gstNo;\r\n        }\r\n        if (representativeName) {\r\n            vendor.representativeName = representativeName;\r\n        }\r\n        if (emailId) {\r\n            vendor.emailId = emailId.toLowerCase();\r\n        }\r\n        if (password) {\r\n            vendor.password = await bcrypt.hash(password, 10);\r\n        }\r\n        if (mobileNo) {\r\n            vendor.mobileNo = mobileNo;\r\n        }\r\n        if (altMobileNo) {\r\n            vendor.altMobileNo = altMobileNo;\r\n        }\r\n        if (pickupState) {\r\n            vendor.pickupState = pickupState;\r\n        }\r\n        if (pickupState) {\r\n            vendor.pickupState = pickupState;\r\n        }\r\n        if (pickupCity) {\r\n            vendor.pickupCity = pickupCity;\r\n        }\r\n        if (pickupPincode) {\r\n            vendor.pickupPincode = pickupPincode;\r\n        }\r\n        if (invoiceAddress) {\r\n            vendor.invoiceAddress = invoiceAddress;\r\n        }\r\n        if (pickupAddress) {\r\n            vendor.pickupAddress = pickupAddress;\r\n        }\r\n        if (brand_id) {\r\n            for (let brandX of vendor.brand_id) {\r\n                console.log(brandX);\r\n                if (brandX._id.toString() === brand_id) {\r\n                    brandX.brand_name = brand_name;\r\n                    await brandX.save();\r\n                }\r\n            }\r\n        }\r\n        if (bank_id) {\r\n            if (bankName) {\r\n                vendor.bank_id.bankName = bankName;\r\n            }\r\n            if (acHolderName) {\r\n                vendor.bank_id.acHolderName = acHolderName;\r\n            }\r\n            if (acNo) {\r\n                vendor.bank_id.acNo = acNo;\r\n            }\r\n            if (branch) {\r\n                vendor.bank_id.branch = branch;\r\n            }\r\n            if (ifsc) {\r\n                vendor.bank_id.ifsc = ifsc;\r\n            }\r\n            await vendor.bank_id.save();\r\n        }\r\n\r\n        if (req.files) {\r\n            let { cancelledCheque, gstRegDoc, brandRegDoc } = req.files;\r\n            if (cancelledCheque) {\r\n                vendor.bank_id.cancelledCheque = await uploadFile(cancelledCheque);\r\n            }\r\n            if (gstRegDoc) {\r\n                vendor.document_id.gstRegDoc = await uploadFile(gstRegDoc);\r\n            }\r\n            if (brandRegDoc) {\r\n                vendor.document_id.brandRegDoc = await uploadFile(brandRegDoc);\r\n            }\r\n            await vendor.document_id.save();\r\n        }\r\n        await vendor.save();\r\n        res.status(201).send({ status: true, message: \"successfully\", data: vendor });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { getAllVendors, addVendor, createVendorByAdmin, updateVendor };\r\n","const { isValidObjectId } = require(\"mongoose\");\nconst productModel = require(\"../models/productModel\");\nconst wishlistModel = require(\"../models/wishlistModel\");\nconst customerModel = require(\"../models/customerModel\");\n\nconst addToWishlist = async (req, res) => {\n    try {\n        let { productId } = req.body;\n        if (!productId) {\n            return res.status(400).send({ status: false, message: \"bad request\" });\n        }\n        if (!isValidObjectId(productId)) {\n            return res.status(400).send({ status: false, message: \"invalid product id\" });\n        }\n        let product = await productModel.findById(productId);\n        if (!product) {\n            return res.status(400).send({ status: false, message: \"product not found\" });\n        }\n        let wishlistObj = await wishlistModel.findOne({ productId: productId, userId: req.userId });\n        if (wishlistObj) {\n            return res.status(200).send({ status: false, message: \"Already in wishlist\" });\n        }\n        let customer = await customerModel.findById(req.userId).populate(\"cart_id\");\n        await wishlistModel.create({ productId: productId, userId: customer._id });\n        let wishlist = await wishlistModel.find({ userId: customer._id });\n        let dataX = {\n            name: customer.name,\n            email: customer.email,\n            customerId: customer._id.toString(),\n            userType: \"CUSTOMER\",\n            isActivated: customer.isActivated,\n            phone: customer.phone,\n            cartLength: customer.cart_id.products.length,\n            wishlistLength: wishlist.length,\n        };\n        res.status(201).send({ status: true, data: dataX, message: \"Added to wishlist\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst removeFromWishlist = async (req, res) => {\n    try {\n        let wishlistId = req.params.wishlistId;\n        if (!wishlistId) {\n            return res.status(400).send({ status: false, message: \"bad request\" });\n        }\n        if (!isValidObjectId(wishlistId)) {\n            return res.status(400).send({ status: false, message: \"invalid wishlist id\" });\n        }\n        let wishlist = await wishlistModel.findOneAndDelete({ userId: req.userId, productId: wishlistId });\n        if (wishlist) {\n            res.status(200).send({ status: true, message: \"Removed from wishlist\" });\n        } else {\n            return res.status(400).send({ status: false, message: \"Bad request\" });\n        }\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\nconst getWishlistProduct = async (req, res) => {\n    try {\n        let data = await wishlistModel.find({ userId: req.userId }).populate(\"productId\");\n        res.status(200).send({ status: true, data: data, message: \"Wishlist fetched\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nmodule.exports = { addToWishlist, removeFromWishlist, getWishlistProduct };\n","const adminModel = require(\"../models/adminModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst { tokenSecretKey, customerTokenSecretKey } = require(\"../middlewares/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// AUTHENTICATION\r\nconst Authentication = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers.authorization;\r\n\r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({ status: false, message: \"token is required\" });\r\n        }\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(401).send({ status: false, message: \"Invalid token\" });\r\n        }\r\n\r\n        jwt.verify(token, tokenSecretKey, function (err, decode) {\r\n            if (err) {\r\n                return res.status(400).send({ status: false, message: err.message });\r\n            } else {\r\n                req.userId = decode.userId;\r\n                req.userModel = decode.userModel;\r\n                req.userPhone = decode.phone ? decode.phone : \"\"; //'ADMIN': 'VENDOR'\r\n                next();\r\n            }\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst AuthenticationCustomer = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers.authorization;\r\n        \r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({ status: false, message: \"token is required\" });\r\n        }\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(401).send({ status: false, message: \"Invalid token\" });\r\n        }\r\n\r\n        jwt.verify(token, customerTokenSecretKey, function (err, decode) {\r\n            if (err) {\r\n                return res.status(400).send({ status: false, message: err.message });\r\n            } else {\r\n                req.userId = decode.userId;\r\n                req.userModel = decode.userModel;\r\n                req.userPhone = decode.phone ? decode.phone : \"\"; //'ADMIN': 'VENDOR':\"CUSTOMER\"\r\n                next();\r\n            }\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// AUTHORIZATION\r\nconst Authorization = async (req, res, next) => {\r\n    try {\r\n        let tokenId = req.userId;\r\n        let UserId = req.params.userId;\r\n\r\n        if (!isValidObjectId(UserId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid admin id\" });\r\n        }\r\n\r\n        let admin = await adminModel.findById(UserId);\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Admin not found\" });\r\n        }\r\n\r\n        let adminId = admin._id;\r\n\r\n        if (adminId.toString() !== tokenId.toString()) {\r\n            return res.status(403).send({ status: false, message: \"authorization failed\" });\r\n        }\r\n        next();\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { Authentication, Authorization, AuthenticationCustomer };\r\n","const dotenv = require(\"dotenv\");\r\n\r\n// getting all ENV variables before starting another processes\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    mongoDbUrl: process.env.MONGO_DB_URL,\r\n    tokenSecretKey: process.env.TOKEN_SECRET_KEY,\r\n    customerTokenSecretKey: process.env.CUSTOMER_TOKEN_SECRET_KEY,\r\n    port: process.env.PORT,\r\n    apiKey: process.env.FIREBASE_API_KEY,\r\n    authDomain: process.env.FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.FIREBASE_APP_ID,\r\n    measurementId: process.env.FIREBASE_MEASUREMENT_ID,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY,\r\n    twilioAuthToken: process.env.TWILIO_AUTH_TOKEN,\r\n    twilioAccSID: process.env.TWILIO_ACCOUNT_SID,\r\n    twilioVerifySID: process.env.TWILIO_VERIFY_SID,\r\n    awsAccessKey: process.env.AWS_ACCESS_KEY_ID,\r\n    awsSecretKey: process.env.AWS_SECRET_ACCESS_KEY,\r\n    awsS3Region: process.env.S3_REGION,\r\n    awsS3Bucket: process.env.S3_BUCKET,\r\n};\r\n","const dotenv = require(\"dotenv\");\r\nconst {\r\n  apiKey,\r\n  authDomain,\r\n  projectId,\r\n  storageBucket,\r\n  messagingSenderId,\r\n  appId,\r\n  measurementId,\r\n} = require(\"../middlewares/config\");\r\n\r\ndotenv.config();\r\n\r\nconst firebaseConfig = {\r\n  apiKey: apiKey,\r\n  authDomain: authDomain,\r\n  projectId: projectId,\r\n  storageBucket: storageBucket,\r\n  messagingSenderId: messagingSenderId,\r\n  appId: appId,\r\n  measurementId: measurementId,\r\n};\r\n\r\nmodule.exports = { firebaseConfig };","const adminModel = require(\"../models/adminModel\");\r\nlet customerModel = require(\"../models/customerModel\");\r\nlet vendorModel = require(\"../models/vendorModel\");\r\nconst { roleEnums, accessControls } = require(\"../utils/enums\");\r\n\r\nconst checkUser = async (req, accessEnum) => {\r\n    let user = null;\r\n    if (req.userModel === \"ADMIN\") {\r\n        user = await adminModel.findOne({ _id: req.userId });\r\n    } else if (req.userModel === \"VENDOR\") {\r\n        user = await vendorModel.findOne({ _id: req.userId });\r\n    }\r\n    if (!user) {\r\n        return false;\r\n    }\r\n    req.userData = user;\r\n    for (let x of user.role) {\r\n        if (accessEnum.includes(x)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\n// ADD PRODUCT ROLE\r\nconst AddProductRole = async (req, res, next) => {\r\n    try {\r\n        // roleEnums.MANAGE_PRODUCT.ADD_PRODUCT\r\n        req.userId;\r\n        const admin = await adminModel.findOne({ _id: req.userId });\r\n        next();\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// ALL PRODUCT ROLE\r\nconst AllProductRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [\r\n            accessControls.PRODUCT.PRODUCT_ALL_PRODUCT,\r\n            accessControls.PRODUCT.ACCESS.PRODUCT_DOWNLOAD,\r\n            accessControls.PRODUCT.ACCESS.PRODUCT_EDIT,\r\n            accessControls.PRODUCT.ACCESS.PRODUCT_VIEW,\r\n            accessControls.PRODUCT.PRODUCT_ADD_PRODUCT,\r\n            \"ADMIN\",\r\n        ];\r\n        if (req.userModel === \"VENDOR\") {\r\n            next();\r\n            return;\r\n        }\r\n        let flag = await checkUser(req, accessEnum);\r\n        if (flag) {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n        // admin.role.includes\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// ALL PRODUCT ROLE\r\nconst AllMenuRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [accessControls.PRODUCT.ACCESS.PRODUCT_DOWNLOAD, \"ADMIN\"];\r\n\r\n        let user;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        } else if (req.userModel === \"vendor\") {\r\n            user = await vendorModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n        // admin.role.includes\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE VENDORS\r\nconst AllVendorRoles = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [\r\n            accessControls.VENDOR.ACCESS.VENDOR_DOWNLOAD,\r\n            accessControls.VENDOR.ACCESS.VENDOR_EDIT,\r\n            accessControls.VENDOR.ACCESS.VENDOR_VIEW,\r\n            accessControls.VENDOR.VENDOR_ADD_VENDOR,\r\n            accessControls.VENDOR.VENDOR_ALL_VENDOR,\r\n            accessControls.VENDOR.VENDOR_VENDOR_MOV,\r\n            accessControls.VENDOR.VENDOR_VENDOR_PAYMENT,\r\n            \"ADMIN\",\r\n        ];\r\n        let user;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE VENDORS\r\nconst AddProductColorRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.PRODUCT_COLOR, \"ADMIN\"];\r\n        let user;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE VENDORS\r\nconst AddProductBrandRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.BRAND, \"ADMIN\"];\r\n        let user;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        } else if (req.userModel === \"vendor\") {\r\n            user = await vendorModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE ORDER ROLE\r\nconst ManageOrderRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [\r\n            accessControls.ORDERS.ORDERS_ABANDONED_ORDERS,\r\n            accessControls.ORDERS.ORDERS_ALL_ORDERS,\r\n            accessControls.ORDERS.ORDERS_CHANGE_ORDER_STATUS,\r\n            accessControls.ORDERS.ACCESS.ORDERS_DOWNLOAD,\r\n            accessControls.ORDERS.ACCESS.ORDERS_EDIT,\r\n            accessControls.ORDERS.ACCESS.ORDERS_VIEW,\r\n            \"ADMIN\",\r\n        ];\r\n        let user = null;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        } else if (req.userModel === \"vendor\") {\r\n            user = await vendorModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE HOMEPAGE ROLE\r\nconst ManageHomePage = async (req, res) => {\r\n    try {\r\n        let accessEnum = [roleEnums.HOMEPAGE_MANAGE, \"ADMIN\"];\r\n\r\n        let flag = await checkUser(req, accessEnum);\r\n\r\n        if (flag) {\r\n            next;\r\n            return;\r\n        }\r\n\r\n        return res.status(401).send({\r\n            status: false,\r\n            message: \"you don't have permission for this action\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst colorRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.PRODUCT_COLOR, \"ADMIN\"];\r\n        let flag = await checkUser(req, accessEnum);\r\n        if (flag) {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst verifyProudct = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.PRODUCT_REVIEW, \"ADMIN\"];\r\n        let flag = await checkUser(req, accessEnum);\r\n        if (flag) {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst outOfStockProduct = async (req, res, next) => {\r\n    try {\r\n        console.log(req.userModel);\r\n        if (req.userModel === \"VENDOR\") {\r\n            next();\r\n            return;\r\n        }\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.PRODUCT_REVIEW, \"ADMIN\"];\r\n        let flag = await checkUser(req, accessEnum);\r\n        if (flag) {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst abandonedOrderRole = async (req, res, next) => {\r\n    try {\r\n        if (req.userModel === \"ADMIN\") {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    AddProductRole,\r\n    AllProductRole,\r\n    AllMenuRole,\r\n    AllVendorRoles,\r\n    AddProductColorRole,\r\n    AddProductBrandRole,\r\n    ManageOrderRole,\r\n    colorRole,\r\n    verifyProudct,\r\n    outOfStockProduct,\r\n    abandonedOrderRole,\r\n};\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst homepageSchema = new mongoose.Schema(\r\n    {\r\n        featuredProduct: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Product\",\r\n            },\r\n        ],\r\n        newArrival: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Product\",\r\n            },\r\n        ],\r\n        bestSelling: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Product\",\r\n            },\r\n        ],\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Homepage\", homepageSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst { listOfRoleEnums, listOfAccessControll } = require(\"../utils/enums\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst adminSchema = new mongoose.Schema(\r\n    {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n        email: {\r\n            type: String,\r\n            required: true,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n        phone: {\r\n            type: String,\r\n            required: true,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n        role: [\r\n            {\r\n                type: String,\r\n                enum: listOfAccessControll(),\r\n            },\r\n        ],\r\n        profileUrl: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        isSuperAdmin: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\nmodule.exports = mongoose.model(\"Admin\", adminSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst bankSchema = new mongoose.Schema(\r\n    {\r\n        acHolderName: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        acNo: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        bankName: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        branch: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        ifsc: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        cancelledCheque: {\r\n            type: String,\r\n        },\r\n        actionTakenBy: {\r\n            type: ObjectId,\r\n            ref: \"Admin\",\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Bank\", bankSchema);\r\n","const mongoose = require(\"mongoose\");\nconst ObjectId = mongoose.Schema.Types.ObjectId;\n\nconst bannerSchema = new mongoose.Schema(\n    {\n        bannerUrl: {\n            type: String,\n            required: true,\n        },\n        type: {\n            type: String,\n            enum: [\"SINGLE\", \"MULTIPLE\"],\n            required: true,\n        },\n    },\n    { timestamps: true }\n);\n\nmodule.exports = mongoose.model(\"Banner\", bannerSchema);\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst brandSchema = new mongoose.Schema(\r\n    {\r\n        brand_name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        brandLogo: {\r\n            type: String,\r\n        },\r\n        vendor_id: {\r\n            type:ObjectId,\r\n            ref:\"Vendor\"\r\n        },\r\n        brandStatus:{\r\n            type: String,\r\n            enum: [\"Approved\", \"Rejected\", \"Pending\"],\r\n            default:\"Pending\",\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n        deletedAt: {\r\n            type: Date,\r\n            default: null,\r\n        },\r\n    },\r\n    {timestamps: true}\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Brand\", brandSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst businessSchema = new mongoose.Schema(\r\n    {\r\n        business_name: {\r\n            type: String,\r\n        },\r\n        business_Logo: {\r\n            type: String,\r\n        },\r\n        invoiceLogo: {\r\n            type: String,\r\n        },\r\n        contactNo: {\r\n            type: String,\r\n        },\r\n        contactEmail: {\r\n            type: String,\r\n        },\r\n        socialMedia: {\r\n            facebook: {\r\n                type: String,\r\n            },\r\n            instagram: {\r\n                type: String,\r\n            },\r\n            twitter: {\r\n                type: String,\r\n            },\r\n            linkedin: {\r\n                type: String,\r\n            },\r\n            youtube: {\r\n                type: String,\r\n            },\r\n        },\r\n        privacyPolicy: {\r\n            type: String,\r\n        },\r\n        iAgree: {\r\n            type: String,\r\n        },\r\n        gsts: [\r\n            {\r\n                gstNo: {\r\n                    type: String,\r\n                },\r\n                pickupAddress: {\r\n                    type: String,\r\n                },\r\n                stateCode: {\r\n                    type: String,\r\n                },\r\n            },\r\n        ],\r\n        defaultGST: {\r\n            gstNo: {\r\n                type: String,\r\n            },\r\n            pickupAddress: {\r\n                type: String,\r\n            },\r\n            stateCode: {\r\n                type: String,\r\n            },\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Business\", businessSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst cancelledReasonSchema = new mongoose.Schema({\r\n    questions: {\r\n        type: ObjectId,\r\n        ref: 'Question',\r\n    },\r\n\r\n    customerAnswer: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model('Cancelled_Reason', cancelledReasonSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst cartSchema = new mongoose.Schema(\r\n    {\r\n        products: [\r\n            {\r\n                product_id: {\r\n                    type: ObjectId,\r\n                    ref: \"Product\",\r\n                },\r\n                qty: {\r\n                    type: Number,\r\n                },\r\n                lotSize: {\r\n                    type: String,\r\n                },\r\n                color: {\r\n                    colorName: { type: String },\r\n                    colorHex: { type: String },\r\n                },\r\n                addedAt: {\r\n                    type: String,\r\n                },\r\n            },\r\n        ],\r\n        customer_id: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Cart\", cartSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n    category_name: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n\r\n    sub_category: [{type:ObjectId, ref: 'Subcategory'}],\r\n\r\n    isDeleted: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n\r\n    deletedAt: {\r\n        type: Date,\r\n        default: null,\r\n    }\r\n\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('Category', categorySchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst colorSchema = new mongoose.Schema({\r\n    colorName:{\r\n        type: String,\r\n        trim:true,\r\n        unique:true\r\n    },\r\n    colorHex: {\r\n        type: String,\r\n        trim:true,\r\n        unique:true\r\n    },\r\n    products:[\r\n        {\r\n            type:ObjectId,\r\n            ref:'Product'\r\n        }\r\n    ],\r\n    isDeleted:{\r\n        type:Boolean,\r\n        default:false,\r\n    }\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model('Color', colorSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst couponCodeSchema = new mongoose.Schema(\r\n    {\r\n        customer_id: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Customer\",\r\n            },\r\n        ],\r\n        couponCode: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        validTill: {\r\n            type: Date,\r\n            required: true,\r\n        },\r\n        maxUsers: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        minOrderAmt: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        isUsed: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        isExpired: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        generatedBy: {\r\n            type: ObjectId,\r\n            ref: \"Admin\",\r\n        },\r\n        maxDiscPrice: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        discountType: {\r\n            type: String,\r\n            enum: [\"PRICE\", \"PERCENTAGE\"],\r\n            required: true,\r\n        },\r\n        discountAmt: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"CouponCode\", couponCodeSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst customerAddressSchema = new mongoose.Schema(\r\n    {\r\n        customerId: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n\r\n        address: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n\r\n        state: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        city: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        pincode: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        stateCode: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n        deletedAt: {\r\n            type: Date,\r\n            default: null,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"CustomerAddress\", customerAddressSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst customerSchema = new mongoose.Schema(\r\n    {\r\n        name: {\r\n            type: String,\r\n        },\r\n        defaultAddress: {\r\n            type: ObjectId,\r\n            ref: \"CustomerAddress\",\r\n        },\r\n        gstNo: {\r\n            type: String,\r\n        },\r\n        phone: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        alternate_phone: {\r\n            type: String,\r\n        },\r\n        email: {\r\n            type: String,\r\n        },\r\n        profileUrl: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        password: {\r\n            type: String,\r\n        },\r\n\r\n        isActivated: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        isBlocked: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        cart_id: {\r\n            type: ObjectId,\r\n            ref: \"Cart\",\r\n        },\r\n        orders: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order\",\r\n            },\r\n        ],\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        deletedAt: {\r\n            type: Date,\r\n            default: null,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Customer\", customerSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst documentSchema = new mongoose.Schema({\r\n    brandRegDoc: {\r\n        type: String,\r\n    },\r\n\r\n    gstRegDoc: {\r\n        type: String,\r\n    },\r\n    actionTakenBy:{\r\n        type:ObjectId,\r\n        ref:'Admin'\r\n    }\r\n},\r\n{timestamps: true})\r\n\r\nmodule.exports = mongoose.model('Document', documentSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst invoiceSchema = new mongoose.Schema(\r\n    {\r\n        invoiceNo: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        invoiceDate: {\r\n            type: Date,\r\n            required: true,\r\n        },\r\n        invoiceType: {\r\n            type: String,\r\n            enum: [\"PURCHASE\", \"SALE\"],\r\n            required: true,\r\n        },\r\n        customer_id: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n        vendor_id: {\r\n            type: ObjectId,\r\n            ref: \"Vendor\",\r\n        },\r\n        order_id: {\r\n            type: ObjectId,\r\n            ref: \"Order\",\r\n        },\r\n        gstAmount: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        gstType: {\r\n            type: String,\r\n            enum: [\"CGST_SGST\", \"IGST\"],\r\n            required: true,\r\n        },\r\n        totalAmount: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        invoiceStatus: {\r\n            type: String,\r\n            enum: [\"PAID\", \"UNPAID\", \"OVERDUE\"],\r\n            default: \"UNPAID\",\r\n        },\r\n        soldBy: {\r\n            name: { type: String },\r\n            address: { type: String },\r\n            phone: { type: String },\r\n            gst: { type: String },\r\n        },\r\n        shippingAddress: {\r\n            name: {\r\n                type: String,\r\n            },\r\n            address: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            phone: {\r\n                type: String,\r\n            },\r\n            gst: {\r\n                type: String,\r\n            },\r\n        },\r\n        billingAddress: {\r\n            name: {\r\n                type: String,\r\n            },\r\n            address: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            phone: {\r\n                type: String,\r\n            },\r\n            gst: {\r\n                type: String,\r\n            },\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Invoice\", invoiceSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst invoiceNoSchema = new mongoose.Schema(\r\n    {\r\n        invoiceNo: {\r\n            type: Number,\r\n            default: 0,\r\n            required: true,\r\n        },\r\n        invoiceYear: {\r\n            type: Number,\r\n            default: 23,\r\n            required: true,\r\n        },\r\n        invoiceNoLength: {\r\n            type: Number,\r\n            default: 9,\r\n            required: true,\r\n        },\r\n        invoiceNoType:{\r\n            type: String,\r\n            enum: [\"PURCHASE\", \"SALE\"],\r\n            required: true,\r\n        }\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"InvoiceNo\", invoiceNoSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst orderSchema = new mongoose.Schema(\r\n    {\r\n        orderId: {\r\n            type: String,\r\n        },\r\n\r\n        vendorId: {\r\n            type: ObjectId,\r\n            ref: \"Vendor\",\r\n        },\r\n        vendorAmtInfo: {\r\n            grandTotal: { type: Number },\r\n            gstAmt: { type: Number },\r\n            total: { type: Number },\r\n        },\r\n\r\n        transaction_id: {\r\n            type: String,\r\n        },\r\n\r\n        shipping_charges: {\r\n            type: Number,\r\n        },\r\n\r\n        grand_total: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n\r\n        total: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n\r\n        total_pairs: {\r\n            type: Number,\r\n        },\r\n\r\n        GST_amount: {\r\n            type: Number,\r\n        },\r\n        discounted_amount: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        order_date: {\r\n            type: Date,\r\n        },\r\n\r\n        tracking_id: {\r\n            type: String,\r\n        },\r\n\r\n        transport_bilty: {\r\n            type: String,\r\n        },\r\n\r\n        ordered_products: {\r\n            type: ObjectId,\r\n            ref: \"Ordered_Product\",\r\n        },\r\n\r\n        order_status_id: {\r\n            type: ObjectId,\r\n            ref: \"Order_Status_Table\",\r\n        },\r\n\r\n        payment_id: {\r\n            type: ObjectId,\r\n            ref: \"Payment\",\r\n        },\r\n\r\n        customer_id: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n\r\n        shipping_address: {\r\n            stateCode: { type: String },\r\n            state: { type: String },\r\n            address: { type: String },\r\n        },\r\n        couponCode: {\r\n            type: ObjectId,\r\n            ref: \"CouponCode\",\r\n        },\r\n        saleInvoice: {\r\n            type: ObjectId,\r\n            ref: \"Invoice\",\r\n        },\r\n        purchaseInvoice: {\r\n            type: ObjectId,\r\n            ref: \"Invoice\",\r\n        },\r\n        paymentReportStatus: {\r\n            paymentStatus: {\r\n                type: String,\r\n                enum: [\"PENDING\", \"DUE\", \"PARTIAL_PAID\", \"FULL_PAID\", \"SETTLED_PAID\"],\r\n                default: \"PENDING\",\r\n            },\r\n            paidAmount: {\r\n                type: Number,\r\n            },\r\n            paymentDate: {\r\n                type: Date,\r\n            },\r\n            transactionId: {\r\n                type: String,\r\n            },\r\n            settlementAmt: {\r\n                type: Number,\r\n            },\r\n            message: {\r\n                type: String,\r\n            },\r\n            logs: [],\r\n        },\r\n        partialCancelOrderInfo: {\r\n            orderedAmtInfo: {\r\n                grand_total: {\r\n                    type: Number,\r\n                },\r\n\r\n                total: {\r\n                    type: Number,\r\n                },\r\n\r\n                GST_amount: {\r\n                    type: Number,\r\n                },\r\n            },\r\n            orderedProductAmtInfo: {\r\n                productQty: {\r\n                    type: Number,\r\n                },\r\n                grand_total: {\r\n                    type: Number,\r\n                },\r\n                total: {\r\n                    type: Number,\r\n                },\r\n                GST_amount: {\r\n                    type: Number,\r\n                },\r\n            },\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Order\", orderSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst orderStatusTableSchema = new mongoose.Schema(\r\n    {\r\n        order_id: {\r\n            type: ObjectId,\r\n            ref: \"Order\",\r\n            required: true,\r\n        },\r\n\r\n        status: {\r\n            type: String,\r\n            enum: [\r\n                \"PENDING\",\r\n                \"CONFIRMED\",\r\n                \"PARTIAL_CONFIRMED\",\r\n                \"READY_TO_DISPATCH\",\r\n                \"PICKUP_ALIGNED\",\r\n                \"PICKUP_DONE\",\r\n                \"RETURNED\",\r\n                \"RETURNED_RTO\",\r\n                \"RETURNED_RTO_DELIVERED\",\r\n                \"DELIVERED\",\r\n                \"CANCELLED\",\r\n                \"OUT_FOR_DELIVERY\",\r\n            ],\r\n            default: \"PENDING\",\r\n        },\r\n\r\n        isCompleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n        statusList: [\r\n            {\r\n                status: {\r\n                    type: String,\r\n                    enum: [\r\n                        \"CONFIRMED\",\r\n                        \"PARTIAL_CONFIRMED\",\r\n                        \"READY_TO_DISPATCH\",\r\n                        \"PICKUP_ALIGNED\",\r\n                        \"PICKUP_DONE\",\r\n                        \"RETURNED\",\r\n                        \"RETURNED_RTO\",\r\n                        \"RETURNED_RTO_DELIVERED\",\r\n                        \"DELIVERED\",\r\n                        \"OUT_FOR_DELIVERY\",\r\n                    ],\r\n                },\r\n                updatedBy: {\r\n                    vendor: { type: ObjectId, ref: \"Vendor\" },\r\n                    admin: { type: ObjectId, ref: \"Admin\" },\r\n                },\r\n                updatedAt: {\r\n                    type: Date,\r\n                },\r\n            },\r\n        ],\r\n        cancelled: {\r\n            cancelledBy: {\r\n                type: String,\r\n                enum: [\"Super_Admin\", \"Vendor\", \"Customer\"],\r\n            },\r\n\r\n            userId: {\r\n                vendor: { type: ObjectId, ref: \"Vendor\" },\r\n                admin: { type: ObjectId, ref: \"Admin\" },\r\n                customer: { type: ObjectId, ref: \"Customer\" },\r\n            },\r\n\r\n            question: {\r\n                type: ObjectId,\r\n                ref: \"Question\",\r\n            },\r\n            description: {\r\n                type: String,\r\n            },\r\n        },\r\n        cancelledStatus: {\r\n            type: String,\r\n            enum: [\"PICKUP_ALIGNED\", \"PICKUP_DONE\", \"RETURNED\", \"RETURNED_RTO\", \"RETURNED_RTO_DELIVERED\", \"CANCELLED\"],\r\n        },\r\n        cancelledStatusList: [\r\n            {\r\n                status: {\r\n                    type: String,\r\n                    enum: [\"PICKUP_ALIGNED\", \"PICKUP_DONE\", \"RETURNED\", \"RETURNED_RTO\", \"RETURNED_RTO_DELIVERED\", \"CANCELLED\"],\r\n                },\r\n                updatedBy: {\r\n                    vendor: { type: ObjectId, ref: \"Vendor\" },\r\n                    admin: { type: ObjectId, ref: \"Admin\" },\r\n                    customer: { type: ObjectId, ref: \"Customer\" },\r\n                },\r\n                updatedAt: {\r\n                    type: Date,\r\n                },\r\n            },\r\n        ],\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Order_Status_Table\", orderStatusTableSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst orderedProductSchema = new mongoose.Schema(\r\n    {\r\n        products: [\r\n            {\r\n                product_id: {\r\n                    type: ObjectId,\r\n                    ref: \"Product\",\r\n                    required: true,\r\n                },\r\n                vendor_id: {\r\n                    type: ObjectId,\r\n                    ref: \"Vendor\",\r\n                    required: true,\r\n                },\r\n                mrp: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                seller_price: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                seller_gst: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                selling_price: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                selling_gst: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                margin: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                lotSize: {\r\n                    type: String,\r\n                },\r\n                color: {\r\n                    colorName: { type: String },\r\n                    colorHex: { type: String },\r\n                },\r\n                hsnCode: {\r\n                    type: String,\r\n                },\r\n                skuCode: {\r\n                    type: String,\r\n                },\r\n                qty: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                addedAt: {\r\n                    type: String,\r\n                },\r\n                isRemoved: {\r\n                    type: Boolean,\r\n                    default: false,\r\n                },\r\n            },\r\n        ],\r\n        order_id: {\r\n            type: ObjectId,\r\n            ref: \"Order\",\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Ordered_Product\", orderedProductSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst paymentSchema = new mongoose.Schema(\r\n    {\r\n        paymentId: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        order_id: {\r\n            orderId: {\r\n                type: ObjectId,\r\n                ref: \"Order\",\r\n            },\r\n            order_custom_id: {\r\n                type: String,\r\n            },\r\n        },\r\n        customer_id: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n        order_status: {\r\n            type: String,\r\n            enum: [\r\n                \"PENDING\",\r\n                \"CONFIRMED\",\r\n                \"PARTIAL_CONFIRMED\",\r\n                \"READY_TO_DISPATCH\",\r\n                \"PICKUP_ALIGNED\",\r\n                \"PICKUP_DONE\",\r\n                \"RETURNED\",\r\n                \"RETURNED_RTO\",\r\n                \"RETURNED_RTO_DELIVERED\",\r\n                \"DELIVERED\",\r\n                \"CANCELLED\",\r\n                \"OUT_FOR_DELIVERY\",\r\n            ],\r\n            default: \"PENDING\",\r\n        },\r\n        payment_status: {\r\n            type: String,\r\n            enum: [\"PENDING\", \"PARTIAL_PAID\", \"RECEIVED\", \"FAILED\", \"PARTIAL_REFUNDED\", \"REFUNDED\"],\r\n        },\r\n\r\n        payment_mode: {\r\n            type: String,\r\n            enum: [\"COD\", \"CUSTOM\", \"TWENTY_ADV\", \"PREPAID\"],\r\n        },\r\n\r\n        transactionId: {\r\n            type: String,\r\n        },\r\n\r\n        payment_amount: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        return_amount: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        cod_received: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        payment_date: {\r\n            type: Date, // when final payment will received, we'll put payment date\r\n        },\r\n        partial_payment: {\r\n            payment_amount: {\r\n                type: Number,\r\n            },\r\n            date: {\r\n                type: Date,\r\n            },\r\n            transactionId: {\r\n                type: String,\r\n            },\r\n        },\r\n        order_amount: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        discount_amt: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        balance_amount: {\r\n            type: Number,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Payment\", paymentSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst slugify = require(\"slugify\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst productSchema = new mongoose.Schema(\r\n    {\r\n        product_name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        sku_code: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n        hsn_code: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        description: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n\r\n        mrp: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        gst: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n\r\n        seller_price: {\r\n            type: Number,\r\n        },\r\n        sellingGST: {\r\n            type: Number,\r\n        },\r\n        margin: {\r\n            type: Number,\r\n        },\r\n\r\n        stockStatus: {\r\n            type: String,\r\n            enum: [\"In_stock\", \"Out_of_stock\"],\r\n            default: \"In_stock\",\r\n        },\r\n\r\n        qty_in_hand: {\r\n            type: Number,\r\n        },\r\n\r\n        min_order_qty: {\r\n            type: Number,\r\n        },\r\n        lotSizeQty: [\r\n            {\r\n                type: String,\r\n                required: true,\r\n                trim: true,\r\n            },\r\n        ],\r\n        color_id: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Color\",\r\n            },\r\n        ],\r\n        sole: {\r\n            type: String,\r\n            trim: true,\r\n            default:\"\"\r\n        },\r\n\r\n        material: {\r\n            type: String,\r\n            trim: true,\r\n            default:\"\"\r\n        },\r\n        packing_type: {\r\n            type: String,\r\n            trim: true,\r\n            default:\"\"\r\n        },\r\n\r\n        made_in: {\r\n            type: String,\r\n            trim: true,\r\n            default:\"India\"\r\n        },\r\n\r\n        weight: {\r\n            type: Number,\r\n        },\r\n\r\n        categoryId: {\r\n            type: ObjectId,\r\n            ref: \"Category\",\r\n            required: true,\r\n        },\r\n        subCatId: {\r\n            type: ObjectId,\r\n            ref: \"Subcategory\",\r\n            required: true,\r\n        },\r\n\r\n        thumbnail_pic: {\r\n            type: String,\r\n        },\r\n\r\n        multiple_pics: [\r\n            {\r\n                type: String,\r\n            },\r\n        ],\r\n\r\n        meta_title: {\r\n            type: String,\r\n        },\r\n\r\n        meta_keywords: {\r\n            type: String,\r\n        },\r\n\r\n        meta_description: {\r\n            type: String,\r\n        },\r\n\r\n        slug: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        status: {\r\n            type: String,\r\n            enum: [\"Approved\", \"Pending\", \"Rejected\"],\r\n            default: \"Pending\",\r\n        },\r\n\r\n        brandId: {\r\n            type: ObjectId,\r\n            ref: \"Brand\",\r\n        },\r\n\r\n        vendor_id: {\r\n            type: ObjectId,\r\n            ref: \"Vendor\",\r\n        },\r\n\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n        deletedAt: {\r\n            type: Date,\r\n            default: null,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nproductSchema.pre(\"validate\", function (next) {\r\n    if (this.product_name) {\r\n        let product = this.product_name + \" \" + this.sku_code;\r\n        this.slug = slugify(product, { lower: true, strict: true });\r\n    }\r\n    next();\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Product\", productSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst questionSchema = new mongoose.Schema(\r\n    {\r\n        questionFor: {\r\n            type: String,\r\n            enum: [\"ADMIN\", \"CUSTOMER\", \"VENDOR\"],\r\n        },\r\n\r\n        question: {\r\n            type: String,\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Question\", questionSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst subcategorySchema = new mongoose.Schema({\r\n            subcategory_name: {\r\n                type: String, required: true,\r\n            },\r\n            productId: [{\r\n                type: ObjectId, ref: 'Product',\r\n            }],\r\n            isDeleted: {\r\n                type: Boolean,\r\n                default:\r\n                    false\r\n            },\r\n\r\n            deletedAt: {\r\n                type: Date,\r\n                default:\r\n                    null,\r\n            }\r\n\r\n        },\r\n        {\r\n            timestamps: true\r\n        }\r\n    )\r\n;\r\n\r\nmodule.exports = mongoose.model('Subcategory', subcategorySchema);","const mongoose = require(\"mongoose\");\r\nconst { listOfRoleEnums, listOfAccessControll } = require(\"../utils/enums\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst vendorSchema = new mongoose.Schema(\r\n    {\r\n        firmName: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        gstNo: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        representativeName: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n        profileUrl: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        emailId: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        password: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        mobileNo: {\r\n            type: String,\r\n            required: true,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        altMobileNo: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        pickupState: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        pickupCity: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        pickupPincode: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        invoiceAddress: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        pickupAddress: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        termsAndConditions: {\r\n            type: Boolean,\r\n            required: true,\r\n        },\r\n        bank_id: {\r\n            type: ObjectId,\r\n            ref: \"Bank\",\r\n        },\r\n        document_id: {\r\n            type: ObjectId,\r\n            ref: \"Document\",\r\n        },\r\n\r\n        brand_id: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Brand\",\r\n            },\r\n        ],\r\n\r\n        vendor_unique_id: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        auth_unique_id: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        db_unique_id: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        sharing_unique_id: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        basicInfoStatus: {\r\n            type: String,\r\n            enum: [\"Approved\", \"Rejected\", \"Pending\"],\r\n            default: \"Pending\",\r\n        },\r\n        products: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Product\",\r\n            },\r\n        ],\r\n\r\n        orders: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order\",\r\n            },\r\n        ],\r\n\r\n        order_success: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order_Success\",\r\n            },\r\n        ],\r\n\r\n        order_canclled: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order_Cancelled\",\r\n            },\r\n        ],\r\n\r\n        order_pending: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order_Pending\",\r\n            },\r\n        ],\r\n\r\n        order_inprogress: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order_Inprogress\",\r\n            },\r\n        ],\r\n\r\n        logistics_id: {\r\n            type: ObjectId,\r\n            ref: \"Logistics\",\r\n        },\r\n\r\n        business_id: {\r\n            type: ObjectId,\r\n            ref: \"Business\",\r\n        },\r\n        status: {\r\n            type: String,\r\n            enum: [\"Pending\", \"Rejected\", \"Inprogress\", \"Approved\"],\r\n            default: \"Pending\",\r\n        },\r\n        isActive: {\r\n            type: String,\r\n            enum: [\"Active\", \"Inactive\", \"Blocked\"],\r\n            default: \"Active\",\r\n        },\r\n        actionTakenBy: {\r\n            type: ObjectId,\r\n            ref: \"Admin\",\r\n        },\r\n        marginInPercentage: {\r\n            type: Number,\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        role: [\r\n            {\r\n                type: String,\r\n                enum: \"VENDOR\",\r\n            },\r\n        ],\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Vendor\", vendorSchema);\r\n","const mongoose = require(\"mongoose\");\nconst ObjectId = mongoose.Schema.Types.ObjectId;\n\nconst wishlistSchema = new mongoose.Schema(\n    {\n        productId: {\n            type: ObjectId,\n            ref: \"Product\",\n            required: true,\n        },\n        userId: {\n            type: ObjectId,\n            ref: \"Customer\",\n            required: true,\n        },\n    },\n    { timestamps: true }\n);\n\nmodule.exports = mongoose.model(\"Wishlist\", wishlistSchema);\n","const express = require(\"express\");\nconst { Authentication } = require(\"../middlewares/auth\");\nconst { getDashboardData } = require(\"../controllers/adminDashboard\");\nconst router = express.Router();\n\nrouter.get(\"/admin-dashboard\", Authentication, getDashboardData);\n\nmodule.exports = router;\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst adminController = require(\"../controllers/adminController\");\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\nconst { AddProductRole } = require(\"../middlewares/roleAuth\");\r\nconst { uploadFile } = require(\"../controllers/imageController\");\r\n\r\nrouter.post(\"/addadmin\", Authentication, adminController.addAdmin);\r\nrouter.get(\"/getadmin\", Authentication, adminController.getAllAdmin);\r\nrouter.put(\"/update-admin/:adminid\", Authentication, adminController.updateAdminInfo);\r\nrouter.delete(\"/delete-admin/:adminid\", Authentication, adminController.deleteAdminById);\r\nrouter.post(\"/adminlogin\", adminController.adminLogin);\r\nrouter.post(\"/createsuperadmin/:secretKey\", adminController.createSuperAdmin);\r\nrouter.get(\"/alladminenums\", Authentication, adminController.getAllSubadminEnums);\r\nrouter.put(\"/verifyvendor/:vendorId\", Authentication, adminController.verifyVendor);\r\nrouter.put(\"/changevendorpassword\", adminController.changeVendorPassword);\r\nrouter.delete(\"/deleteVendor\", Authentication, adminController.deleteVendor);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst brandController = require('../controllers/brandController');\r\nconst {Authentication} = require(\"../middlewares/auth\");\r\n\r\n\r\nrouter.post(\"/brand\", Authentication, brandController.addBrand);\r\nrouter.get('/brands', Authentication,  brandController.getAllBrands);\r\nrouter.get(\"/brands/:vendorId\", Authentication, brandController.getAllBrandByVendor);\r\nrouter.patch(\"/verifybrand/:brandId\", Authentication, brandController.verifyBrandById);\r\n\r\nmodule.exports = router;","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst {\r\n    addBusinessInfo,\r\n    saveSocialMedia,\r\n    addBusinessGST,\r\n    getBusinessInfo,\r\n    addBusinessFiles,\r\n    setDefaultGst,\r\n    bannerForClientPage,\r\n    getBannerForClientPage,\r\n    bannerDeleteById,\r\n} = require(\"../controllers/businessController\");\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/addbusinessinfo\", Authentication, addBusinessInfo);\r\nrouter.post(\"/addbusinessgst\", Authentication, addBusinessGST);\r\nrouter.get(\"/getbusinessinfo\", Authentication, getBusinessInfo);\r\nrouter.post(\"/addbusinessfiles\", Authentication, addBusinessFiles);\r\nrouter.patch(\"/updatedefgst\", Authentication, setDefaultGst);\r\nrouter.post(\"/savesocialmedia\", Authentication, saveSocialMedia);\r\nrouter.post(\"/bannerupload\", Authentication, bannerForClientPage);\r\nrouter.get(\"/bannerimages\", Authentication, getBannerForClientPage);\r\nrouter.get(\"/bannerimagesforclient\", AuthenticationCustomer, getBannerForClientPage);\r\nrouter.delete(\"/deletebanner/:bannerId\", Authentication, bannerDeleteById);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst { addToCart, getAllAbandentCarts, getCartByCustomerId, removeFromCart, qtyIncreaseDecrease } = require(\"../controllers/cartController\");\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\nconst { abandonedOrderRole } = require(\"../middlewares/roleAuth\");\r\n\r\nrouter.post(\"/addtocart/:customerId\", AuthenticationCustomer, addToCart);\r\nrouter.get(\"/cart/:customerId\", getCartByCustomerId);\r\nrouter.get(\"/abandonedcarts\", Authentication, abandonedOrderRole, getAllAbandentCarts);\r\nrouter.put(\"/removefromcart/:customerId/:index\", AuthenticationCustomer, removeFromCart);\r\nrouter.put(\"/qty-increase-decrease/:customerId/:index/:qty\", AuthenticationCustomer, qtyIncreaseDecrease);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst categoryController = require('../controllers/categoryController');\r\n\r\n\r\n\r\nrouter.post(\"/category\", categoryController.addCategory);\r\nrouter.get('/categories', categoryController.getAllCategories);\r\n// router.get('/category/:categoryId', productController.getProductById);\r\nrouter.put('/category/:categoryId', categoryController.updateCategoryById);\r\n// router.delete('/category/:categoryId', productController.addProduct);\r\n\r\n\r\nmodule.exports = router;","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\nconst { colorRole } = require(\"../middlewares/roleAuth\");\r\nconst { getAllColor, addNewColor, deleteColorById } = require(\"../controllers/colorController\");\r\n\r\nrouter.get(\"/getallcolors\", getAllColor);\r\nrouter.post(\"/addnewcolor\", Authentication, colorRole, addNewColor);\r\nrouter.delete(\"/deletecolorbyid/:colorId\", Authentication, colorRole, deleteColorById);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst { getAllCoupons, generateCoupon, applyCoupon, deleteCoupon } = require(\"../controllers/couponCodeController\");\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/allcoupon\", getAllCoupons);\r\nrouter.post(\"/generatecoupon\", generateCoupon);\r\nrouter.post(\"/applycoupon/:customerid\", applyCoupon);\r\nrouter.patch(\"/deletecoupon/:couponid\", deleteCoupon);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst customerController = require(\"../controllers/customerController\");\r\nconst customerAddressController = require(\"../controllers/customerAddressController\");\r\n\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/login-customer\", customerController.loginUser);\r\nrouter.get(\"/customers\", Authentication, customerController.getAllCustomer);\r\nrouter.get(\"/customer/:customerId\", Authentication, customerController.getCustomerById);\r\nrouter.put(\"/updatecustomer/:customerId\", AuthenticationCustomer, customerController.updateCustomerById);\r\nrouter.delete(\"/customer/:customerId\", Authentication, customerController.deleteCustomerById);\r\nrouter.post(\"/addcustomrinformation/:customerid\", customerAddressController.addCustomerInformation);\r\nrouter.delete(\"/address/:customerId/:addressId\", AuthenticationCustomer, customerAddressController.deleteAddressById);\r\nrouter.patch(\"/blockcustomer/:customerId\", Authentication, customerController.blockCustomerById);\r\nrouter.post(\"/getordersbycustomerphone\", Authentication, customerController.findOrdersByPhone);\r\nrouter.post(\"/addaddress/:customerId\", AuthenticationCustomer, customerAddressController.addAddress);\r\nrouter.get(\"/getalladdress/:customerId\", AuthenticationCustomer, customerAddressController.getAllAddresses);\r\nrouter.put(\"/setdefaultaddress/:customerId/:addressId\", AuthenticationCustomer, customerController.setDefaultAddress);\r\nrouter.post(\"/change-password/:customerId\", Authentication, customerController.changePassword);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\nconst { AuthenticationCustomer } = require(\"../middlewares/auth\");\nconst { getDashboardData, getProductBySlug } = require(\"../controllers/dashboardController\");\nconst router = express.Router();\n\nrouter.get(\"/get-store-info\", getDashboardData);\nrouter.get(\"/get-product-info-by-id/:slug\", getProductBySlug);\n\nmodule.exports = router;\n","const express = require(\"express\");\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\nconst { addFeaturedProducts, removeFeaturedProduct, getFeaturedProduct } = require(\"../controllers/homepageController\");\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/bestsellingproducts\", Authentication, addFeaturedProducts);\r\nrouter.post(\"/removebestsellingproduct\", Authentication, removeFeaturedProduct);\r\nrouter.get(\"/allbestsellingproduct\", Authentication, getFeaturedProduct);\r\n\r\nmodule.exports = router;","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\nconst { getAllPurchaseInvoice, getAllSaleInvoice, downoadInvoiceByInvoiceNumber } = require(\"../controllers/invoiceController\");\r\n\r\nrouter.get(\"/purchaseinvoice\", Authentication, getAllPurchaseInvoice);\r\nrouter.get(\"/saleinvoice\", Authentication, getAllSaleInvoice);\r\nrouter.get(\"/downloadpdf/:invoicenumber/:invoicetype\", Authentication, downoadInvoiceByInvoiceNumber);\r\nrouter.get(\"/customer-downloadpdf/:invoicenumber/:invoicetype\", AuthenticationCustomer, downoadInvoiceByInvoiceNumber);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst orderController = require(\"../controllers/orderController\");\r\nconst orderStatusTableController = require(\"../controllers/orderStatusTableController\");\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\nconst orderedProductModel = require(\"../models/orderedProductModel\");\r\nconst { exportOrderReport } = require(\"../controllers/excelFileController\");\r\n\r\nrouter.get(\"/orders\", Authentication, orderController.getAllOrders);\r\nrouter.get(\"/order/:customerId/:orderId\", AuthenticationCustomer, orderController.getOrderByOrderId);\r\nrouter.get(\"/orders/:customerId\", AuthenticationCustomer, orderController.getOrdersByCustomerId);\r\nrouter.get(\"/orderedproduct/:orderedproductid\", orderController.getOrderedProduct);\r\nrouter.post(\"/createorder/:customerId\", orderController.createOrder);\r\nrouter.put(\"/cancelorder/:orderId\", orderController.cancelOrderByOrderId);\r\nrouter.put(\"/updateorder/:orderId\", Authentication, orderController.updateOrderByOrderId);\r\nrouter.patch(\"/patchtrackingid/:orderId\", orderController.patchTrackingIdByOrderId);\r\nrouter.get(\"/getcancelledorders\", Authentication, orderController.getAllCancelledOrder);\r\n\r\nrouter.post(\"/order-report\", Authentication, exportOrderReport);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst orderStatusTableController = require(\"../controllers/orderStatusTableController\");\r\n\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/change-order-status/:orderId\", Authentication, orderStatusTableController.updateOrderStatusByOrderId);\r\nrouter.post(\"/change-bulk-order-status\", Authentication, orderStatusTableController.bulkOrderProcess);\r\nrouter.post(\"/return-order-status/:orderId\", Authentication, orderStatusTableController.cancelOrderReturnById);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst { sendOTP, verityOTP, forgetPasswordUsingOtp } = require(\"../controllers/otpController\");\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/sendotp/:phone\", sendOTP);\r\nrouter.get(\"/verifyotp/:phone/:otpCode\", verityOTP);\r\nrouter.post(\"/forget-password/:phone/:otpCode\", forgetPasswordUsingOtp);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst paymentController = require('../controllers/paymentController');\r\n\r\nconst { Authentication } = require('../middlewares/auth');\r\n\r\n\r\nrouter.post(\"/addpayment/:orderId\", paymentController.createPayment);\r\nrouter.put(\"/updatepaymentstatus/:paymentId\", paymentController.updatePaymentStatus);\r\nrouter.post(\"/createpayment/:orderId\", paymentController.addPayment);\r\n\r\n\r\nmodule.exports = router;","const express = require(\"express\");\r\nconst app = express();\r\nconst router = express.Router();\r\n\r\nconst productController = require(\"../controllers/productController\");\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\nconst { AddProductRole, AllProductRole, verifyProudct, outOfStockProduct } = require(\"../middlewares/roleAuth\");\r\nconst { exportIDs, exportProductAddDemoSheet, csvToJson } = require(\"../controllers/excelFileController\");\r\n\r\n// PRODUCT ROUTES\r\nrouter.post(\"/product\", Authentication, productController.addProduct);\r\nrouter.get(\"/products\", Authentication, productController.getAllProducts);\r\nrouter.get(\"/allproducts\", Authentication, productController.getAllProductsForFilter);\r\nrouter.get(\"/dashboardproduct\", AuthenticationCustomer, productController.getAllProductsForDashboard);\r\nrouter.get(\"/product/:productId\", productController.getProductById);\r\nrouter.patch(\"/changeproductstatus/:productId\", Authentication, productController.changeProductStatus);\r\nrouter.patch(\"/changeproductstockstatus/:productId\", Authentication, productController.changeProductStockStatus);\r\nrouter.put(\"/updateproduct/:productId\", Authentication, productController.updateProduct);\r\n\r\n// router.post(\"/csvupload\", productController.csvProduct);\r\nrouter.get(\"/downloadDependencies\", Authentication, exportIDs);\r\nrouter.get(\"/downloadprodctxlsx\", Authentication, exportProductAddDemoSheet);\r\nrouter.post(\"/bulkproductupload\", Authentication, csvToJson);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\nconst router = express.Router();\nconst { Authentication } = require(\"../middlewares/auth\");\nconst { updateProfile, changePassword } = require(\"../controllers/profileController\");\n\nrouter.put(\"/update-userprofile\", Authentication, updateProfile);\nrouter.post(\"/changePassword\", changePassword);\n\nmodule.exports = router;\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst questionController = require(\"../controllers/questionController\");\r\nconst cancelledReasonController = require(\"../controllers/cancelReasonController\");\r\n\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/addquestion\", Authentication, questionController.addQuestions);\r\nrouter.get(\"/getallquestion\", Authentication, questionController.getAllQuestion);\r\nrouter.get(\"/getallquestionbyuser\", Authentication, questionController.getAllQuestionByModel);\r\nrouter.delete(\"/delete-question-byid/:questionid\", Authentication, questionController.deleteQuestionById);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\nconst { getOrderReport, exportSaleReport, exportPurchaseReport, getPaymentReport, updatePaymentReport } = require(\"../controllers/reportController\");\nconst { Authentication } = require(\"../middlewares/auth\");\nconst router = express.Router();\n\nrouter.get(\"/order-report\", Authentication, getOrderReport);\nrouter.post(\"/export-sale-report\", Authentication, exportSaleReport);\nrouter.post(\"/export-purchase-report\", Authentication, exportPurchaseReport);\nrouter.get(\"/payment-report\", Authentication, getPaymentReport);\nrouter.put(\"/update-payment-report/:orderid\", Authentication, updatePaymentReport)\n\nmodule.exports = router;\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst vendorController = require(\"../controllers/vendorController\");\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/addvendor\", vendorController.addVendor);\r\nrouter.get(\"/allvendors\", vendorController.getAllVendors);\r\nrouter.post(\"/create-vendor-by-admin\", Authentication, vendorController.createVendorByAdmin);\r\nrouter.put(\"/update-vendor-by-admin/:vendorId\", Authentication, vendorController.updateVendor);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\nconst { addToWishlist, removeFromWishlist, getWishlistProduct } = require(\"../controllers/wishlistController\");\nconst { AuthenticationCustomer } = require(\"../middlewares/auth\");\nconst router = express.Router();\n\nrouter.post(\"/add-to-wishlist\", AuthenticationCustomer, addToWishlist);\nrouter.delete(\"/remove-from-wishlist/:wishlistId\", AuthenticationCustomer, removeFromWishlist);\nrouter.get(\"/get-wishlist\", AuthenticationCustomer, getWishlistProduct);\nmodule.exports = router;\n","const isExpiryCoupon = (validTill) => {\n    let day = validTill.getDate();\n    let month = validTill.getMonth() + 1;\n    let year = validTill.getFullYear();\n    let expiryDateMS = new Date(`${year}-${month < 10 ? \"0\" + month : month}-${day < 10 ? \"0\" + day : day}`).getTime() / 1000;\n\n    let now = Date.now();\n    // let date = new Date(now + (5.5 * (3600 * 1000))); // Deployment time cases for +5:30 GMT\n    let date = new Date();\n    let dateStr = `${date.getFullYear()}-${date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1}-${date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate()}`;\n    let currentDateMS = new Date(dateStr).getTime() / 1000;\n\n    return currentDateMS <= expiryDateMS ? false : true;\n};\n\nmodule.exports = { isExpiryCoupon };\n","const dateToLocalDate = (date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    day = day < 10 ? \"0\" + day : day;\n    month = month < 10 ? \"0\" + month : month;\n    return `${day}/${month}/${year}`;\n};\n\nconst dateToLocalDateTime = (date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    let hr = date.getHours();\n    let min = date.getMinutes();\n    let ampm = hr < 12 ? \"AM\" : \"PM\";\n    hr = hr % 12;\n    hr = hr ? hr : 12;\n    hr = hr < 10 ? \"0\" + hr : hr;\n    min = min < 10 ? \"0\" + min : min;\n    day = day < 10 ? \"0\" + day : day;\n    month = month < 10 ? \"0\" + month : month;\n    return `${day}/${month}/${year} ${hr}:${min} ${ampm}`;\n};\n\nmodule.exports = { dateToLocalDate, dateToLocalDateTime };\n","let roleEnums = {\r\n    MANAGE_MENU: {\r\n        ADD_CATEGORY: \"ADD_CATEGORY\",\r\n        ADD_SUBCATEGORY: \"ADD_SUBCATEGORY\",\r\n    },\r\n    MANAGE_PRODUCT: {\r\n        ADD_PRODUCT: \"ADD_PRODUCT\",\r\n        ALL_PRODUCT: \"ALL_PRODUCT\",\r\n        PRODUCT_COLOR: \"PRODUCT_COLOR\",\r\n        PRODUCT_SIZE: \"PRODUCT_SIZE\",\r\n        BRAND: \"BRAND\",\r\n        OUT_OF_STOCK_PRODUCTS: \"OUT_OF_STOCK_PRODUCTS\",\r\n        PRODUCT_REVIEW: \"PRODUCT_REVIEW\",\r\n    },\r\n    MANAGE_ORDERS: {\r\n        ALL_ORDERS: \"ALL_ORDERS\",\r\n        CONFIRM_ORDERS: \"CONFIRM_ORDERS\",\r\n        SHIPPED_ORDER: \"SHIPPED_ORDER\",\r\n        PICKUP_PENDING: \"PICKUP_PENDING\",\r\n        DELIVERED_ORDER: \"DELIVERED_ORDER\",\r\n        RTO_ORDER: \"RTO_ORDER\",\r\n        RTO_DELIVERED: \"RTO_DELIVERED\",\r\n        CANCEL_ORDER: \"CANCEL_ORDER\",\r\n        PARTIAL_DELIVERED: \"PARTIAL_DELIVERED\",\r\n        HOLD: \"HOLD\",\r\n        PICKUP_INITIATE: \"PICKUP_INITIATE\",\r\n    },\r\n    IMPORT_PINCODE: \"IMPORT_PINCODE\",\r\n    MANAGE_RETURN: {\r\n        RETURN_REQUEST: \"RETURN_REQUEST\",\r\n        SETTLEMENT_REQUEST: \"SETTLEMENT_REQUEST\",\r\n        REFUNDED: \"REFUNDED\",\r\n        SETTLEMENT_REQUEST_CANCEL: \"SETTLEMENT_REQUEST_CANCEL\",\r\n    },\r\n    ALL_USERS: \"ALL_USERS\",\r\n    MANAGE_COUPONS: {\r\n        ADD_COUPON: \"ADD_COUPON\",\r\n        ALL_COUPON: \"ALL_COUPON\",\r\n    },\r\n    MANAGE_SALES: \"MANAGE_SALES\",\r\n    HOMEPAGE_MANAGE: \"HOMEPAGE_MANAGE\",\r\n    MANAGE_VENDOR: {\r\n        ADD_VENDOR: \"ADD_VENDOR\",\r\n        ALL_VENDOR: \"ALL_VENDOR\",\r\n        ALL_OUTSTANDING: \"ALL_OUTSTANDING\",\r\n        ALL_SETTLED: \"ALL_SETTLED\",\r\n    },\r\n    ADD_EMPLOYEE: \"ADD_EMPLOYEE\",\r\n    EXPORT_INFORMATION: \"EXPORT_INFORMATION\",\r\n};\r\nlet accessControls = {\r\n    ORDERS: {\r\n        ACCESS: {\r\n            ORDERS_VIEW: false,\r\n            ORDERS_EDIT: false,\r\n            ORDERS_DOWNLOAD: false,\r\n        },\r\n        ORDERS_ALL_ORDERS: \"ALL_ORDERS\",\r\n        ORDERS_CHANGE_ORDER_STATUS: \"CHANGE_ORDER_STATUS\",\r\n        ORDERS_ABANDONED_ORDERS: \"ABANDONED_ORDERS\",\r\n    },\r\n    COUPON: {\r\n        ACCESS: {\r\n            COUPON_VIEW: false,\r\n            COUPON_EDIT: false,\r\n            COUPON_DOWNLOAD: false,\r\n        },\r\n        COUPON_ALL_COUPON: \"ALL_COUPON\",\r\n        COUPON_ADD_NEW_COUPON: \"ADD_NEW_COUPON\",\r\n    },\r\n    PRODUCT: {\r\n        ACCESS: {\r\n            PRODUCT_VIEW: false,\r\n            PRODUCT_EDIT: false,\r\n            PRODUCT_DOWNLOAD: false,\r\n        },\r\n        PRODUCT_ALL_PRODUCT: \"ALL_PRODUCT\",\r\n        PRODUCT_ADD_PRODUCT: \"ADD_PRODUCT\",\r\n    },\r\n    VENDOR: {\r\n        ACCESS: {\r\n            VENDOR_VIEW: false,\r\n            VENDOR_EDIT: false,\r\n            VENDOR_DOWNLOAD: false,\r\n        },\r\n        VENDOR_ALL_VENDOR: \"ALL_VENDOR\",\r\n        VENDOR_ADD_VENDOR: \"ADD_VENDOR\",\r\n        VENDOR_VENDOR_PAYMENT: \"VENDOR_PAYMENT\",\r\n        VENDOR_VENDOR_MOV: \"VENDOR_MOV\",\r\n    },\r\n    CUSTOMER: {\r\n        ACCESS: {\r\n            CUSTOMER_VIEW: false,\r\n            CUSTOMER_EDIT: false,\r\n            CUSTOMER_DOWNLOAD: false,\r\n        },\r\n        CUSTOMER_ALL_CUSTOMER: \"ALL_CUSTOMER\",\r\n        CUSTOMER_CUSTOMER_ORDER_BY_PHONE: \"CUSTOMER_ORDER_BY_PHONE\",\r\n    },\r\n    SETTING: {\r\n        SETTING_BUSINESS_INFO_SETTING: \"BUSINESS_INFO_SETTING\",\r\n        SETTING_HOMEPAGE_SETTING: \"HOMEPAGE_SETTING\",\r\n    },\r\n    REPORT: {\r\n        ACCESS: { REPORT_VIEW: false, REPORT_DOWNLOAD: false },\r\n    },\r\n    SUB_ADMIN: {\r\n        ACCESS: { SUBADMIN_VIEW: false, SUBADMIN_DOWNLOAD: false },\r\n        SUB_ADMIN_ALL_ADMIN: \"ALL_ADMIN\",\r\n        SUB_ADMIN_ADD_ADMIN: \"ADD_ADMIN\",\r\n    },\r\n};\r\nconst listOfRoleEnums = () => {\r\n    let arr = [\"ADMIN\"];\r\n\r\n    for (let keys in roleEnums) {\r\n        if (typeof roleEnums[keys] === \"string\") {\r\n            arr.push(roleEnums[keys]);\r\n        } else {\r\n            arr = [...arr, ...Object.values(roleEnums[keys]).flat()];\r\n        }\r\n    }\r\n    return arr;\r\n};\r\n\r\nconst listOfAccessControll = () => {\r\n    let arr = [\"ADMIN\"];\r\n    for (let x of Object.keys(accessControls)) {\r\n        if (typeof accessControls[x] !== \"string\") {\r\n            for (let y of Object.keys(accessControls[x])) {\r\n                if (typeof accessControls[x][y] !== \"string\") {\r\n                    for (let z of Object.keys(accessControls[x][y])) {\r\n                        arr.push(z);\r\n                    }\r\n                } else {\r\n                    arr.push(y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n};\r\n\r\nmodule.exports = {\r\n    roleEnums,\r\n    listOfRoleEnums,\r\n    accessControls,\r\n    listOfAccessControll,\r\n};\r\n","const Puppeteer = require(\"puppeteer\");\r\nvar hbs = require(\"handlebars\");\r\nvar fs = require(\"fs\");\r\nconst path = require(\"path\");\r\n\r\nconst generatePdf = async (invData, footerText) => {\r\n    const templatePath = path.resolve(\"invoice.hbs\");\r\n    const content = fs.readFileSync(templatePath, \"utf8\");\r\n    const template = hbs.compile(content);\r\n    let html = template(invData);\r\n    const browser = await Puppeteer.launch({ headless: \"new\" });\r\n    const page = await browser.newPage();\r\n    await page.setContent(html);\r\n\r\n    await page.addStyleTag({ content: \".pageNumbers { content: counter(page) }\" })\r\n    let pdf = await page.pdf({\r\n        format:'A4',\r\n        printBackground: true,\r\n        displayHeaderFooter: true,\r\n        footerTemplate: `<div style='width:100%; font-size:10px; text-align: end; font-weight: 600; padding-right:20px'>${footerText}<span style=\"margin-left:5px;\"><span class='pageNumber'></span><span>/</span><span class='totalPages'></span></span></div>`,\r\n    });\r\n    await browser.close();\r\n    return pdf;\r\n};\r\n\r\nmodule.exports = { generatePdf };\r\n\r\n\r\n// const data = {\r\n//     logo: \"\",\r\n//     brandName: \"\",\r\n//     soldBy: \"\",\r\n//     soldByAddress: \"\",\r\n//     soldByGst: \"\",\r\n//     invoiceNo: \"\",\r\n//     orderId: \"\",\r\n//     orderDate: \"\",\r\n//     invoiceDate: \"\",\r\n//     billToName: \"\",\r\n//     billToAddress: \"\",\r\n//     billToPhone: \"\",\r\n//     billToGST: \"\",\r\n//     shipToName: \"\",\r\n//     shipToAddress: \"\",\r\n//     shipToPhone: \"\",\r\n//     shipToGST: \"\",\r\n//     tableRow: [],\r\n//     totalAmt: \"\",\r\n//     totalCGSTAmt: \"\",\r\n//     totalSGSTAmt: \"\",\r\n//     totalIGSTAmt: \"\",\r\n//     taxableAmt: \"\",\r\n//     totalTaxAmt: \"\",\r\n//     grossTotalAmt: \"\",\r\n//     discountAmt: \"\",\r\n//     netPayableAmount: \"\",\r\n// };","const financialYear = () => {\n    let date = new Date();\n    let currentYear = date.getFullYear();\n    let currentMonth = date.getMonth() + 1;\n    let year = \"\";\n    if (currentMonth < 4) {\n        year = currentYear - 1;\n    } else {\n        year = currentYear;\n    }\n    return year.toString().slice(2);\n};\n\nmodule.exports = { financialYear };\n","const percentage = (num, per) => {\r\n    return (Number(num)*Number(per))/100;\r\n}\r\n\r\nconst calculateMarginAndSelling = (sellerAmount, margin, sellingGst) => {\r\n    if(Number(sellerAmount) === 0){\r\n        return 0;\r\n    }\r\n  \r\n    let baseAmount = Number(sellerAmount);\r\n    if(Number(margin) === 0){\r\n        return Number(baseAmount.toFixed(2));\r\n    }else{\r\n        let basePlusMarginAmt = percentage(baseAmount, margin) + baseAmount;\r\n        let totalAmt = percentage(basePlusMarginAmt, sellingGst) + Number(basePlusMarginAmt);\r\n        return Number(totalAmt.toFixed(2));\r\n    }\r\n}\r\nmodule.exports = {percentage,calculateMarginAndSelling};","const stateAndCode = {\r\n    \"Himachal Pradesh\": \"02\",\r\n    Punjab: \"03\",\r\n    Chandigarh: \"04\",\r\n    Uttarakhand: \"05\",\r\n    Haryana: \"06\",\r\n    Delhi: \"07\",\r\n    Rajasthan: \"08\",\r\n    \"Uttar Pradesh\": \"09\",\r\n    Bihar: \"10\",\r\n    Sikkim: \"11\",\r\n    \"Arunanchal Pradesh\": \"12\",\r\n    Nagaland: \"13\",\r\n    Manipur: \"14\",\r\n    Mizoram: \"15\",\r\n    Tripura: \"16\",\r\n    Meghalaya: \"17\",\r\n    Assam: \"18\",\r\n    \"West Bengal\": \"19\",\r\n    Jharkhand: \"20\",\r\n    Odisha: \"21\",\r\n    Chattisgarh: \"22\",\r\n    \"Madhya Pradesh\": \"23\",\r\n    Gujarat: \"24\",\r\n    \"Dadra And Nagar Haveli And Daman And  Diu\": \"26\",\r\n    Maharashtra: \"27\",\r\n    Karnataka: \"29\",\r\n    Goa: \"30\",\r\n    Lakshadweep: \"31\",\r\n    Kerela: \"32\",\r\n    \"Tamil Nadu\": \"33\",\r\n    Puducherry: \"34\",\r\n    \"Andaman and Nicobar Islands\": \"35\",\r\n    Telangana: \"36\",\r\n    \"Andhra Pradesh\": \"37\",\r\n    Ladakh: \"38\",\r\n    \"Other Territory\": \"97\",\r\n};\r\n\r\nmodule.exports = {stateAndCode}","const ObjectId = require(\"mongoose\").Types.ObjectId;\r\n\r\nconst isValidRequestBody = (requestBody) => {\r\n  return Object.keys(requestBody).length > 0;\r\n};\r\n\r\nconst isValidObjectId = (objectId) => {\r\n  if (!ObjectId.isValid(objectId)) return false;\r\n  return true;\r\n};\r\n\r\nconst isValid = (value) => {\r\n  if (typeof value === \"undefined\" || typeof value === null) return false;\r\n  if (typeof value === \"string\" && value.trim().length == 0) return false;\r\n  return true;\r\n};\r\n\r\nlet isValidName = function (name) {\r\n  let nameRegex = /^[A-Za-z\\s]{1,}[A-Za-z\\s]{0,}$/;\r\n  return nameRegex.test(name);\r\n};\r\n\r\nconst isValidEmail = function (gmail) {\r\n  let regex = /^\\w+([\\.-]?\\w+)@\\w+([\\.-]?\\w+)(\\.\\w{2,6})+$/;\r\n  return regex.test(gmail);\r\n};\r\n\r\nlet isValidPassword = function (password) {\r\n  let regexPassword =\r\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,15}$/;\r\n  return regexPassword.test(password);\r\n};\r\n\r\nconst isValidMoblie = function (mobile) {\r\n  let regex =\r\n    /^(?:(?:\\+|0{0,2})91(\\s*|[\\-])?|[0]?)?([6789]\\d{2}([-]?)\\d{3}([-]?)\\d{4})$/;\r\n  return regex.test(mobile);\r\n};\r\n\r\nconst isValidGST = function (GST) {\r\n  let regex = /\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/;\r\n  return regex.test(GST);\r\n};\r\n\r\nconst isValidPrice = function (price) {\r\n  let regex = /^\\d+(?:[.,]\\d+)*$/;\r\n  return regex.test(price);\r\n};\r\n\r\nconst isValidImg = (img) => {\r\n  const reg = /image\\/png|image\\/jpeg|image\\/jpg/;\r\n  return reg.test(img);\r\n};\r\n\r\nfunction isValidStatus(value) {\r\n  if( [\"pending\", \"completed\", \"cancled\"].indexOf(value) == -1) {return false}\r\n  else return true\r\n};\r\n\r\nfunction isValidPin(pin) {\r\n  const regex = /^[1-9]{1}[0-9]{2}\\\\s{0, 1}[0-9]{3}$/;\r\n  return regex.test(pin);\r\n}\r\n\r\nmodule.exports = {\r\n  isValidRequestBody,\r\n  isValidObjectId,\r\n  isValid,\r\n  isValidName,\r\n  isValidEmail,\r\n  isValidImg,\r\n  isValidPassword,\r\n  isValidMoblie,\r\n  isValidGST,\r\n  isValidPrice,\r\n  isValidStatus,\r\n  isValidPin\r\n};","module.exports = require(\"aws-sdk\");","module.exports = require(\"aws-sdk/lib/maintenance_mode_message\");","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"convert-csv-to-json\");","module.exports = require(\"cors\");","module.exports = require(\"csvtojson\");","module.exports = require(\"dotenv\");","module.exports = require(\"exceljs\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"firebase/app\");","module.exports = require(\"firebase/storage\");","module.exports = require(\"handlebars\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"puppeteer\");","module.exports = require(\"request\");","module.exports = require(\"slugify\");","module.exports = require(\"twilio\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst fileUpload = require(\"express-fileupload\");\r\nconst path = require(\"path\");\r\nconst cors = require(\"cors\");\r\nconst app = express();\r\nrequire(\"dotenv\").config();\r\n\r\nconst productRoutes = require(\"./src/routes/productRoutes\");\r\nconst categoryRoutes = require(\"./src/routes/categoryRoutes\");\r\nconst brandRoutes = require(\"./src/routes/brandRoutes\");\r\nconst vendorRoutes = require(\"./src/routes/vendorRoutes\");\r\nconst adminRoutes = require(\"./src/routes/adminRoutes\");\r\nconst colorRoutes = require(\"./src/routes/colorRoutes\");\r\nconst customerRoutes = require(\"./src/routes/customerRoutes\");\r\nconst orderRoutes = require(\"./src/routes/orderRoutes\");\r\nconst paymentRoutes = require(\"./src/routes/paymentRoutes\");\r\nconst cartRoutes = require(\"./src/routes/cartRoutes\");\r\nconst questionRoutes = require(\"./src/routes/questionsRoutes\");\r\nconst couponRoutes = require(\"./src/routes/couponCodeRoutes\");\r\nconst businessRoutes = require(\"./src/routes/businessRoutes\");\r\nconst homepageRoutes = require(\"./src/routes/homepageRoutes\");\r\nconst invoiceRoutes = require(\"./src/routes/invoiceRoutes\");\r\nconst optRoutes = require(\"./src/routes/otpRoutes\");\r\nconst orderStatusRoute = require(\"./src/routes/orderStatusTableRoutes\");\r\nconst profileRoutes = require(\"./src/routes/profileRoutes\");\r\nconst reportRoutes = require(\"./src/routes/reportRoutes\");\r\nconst dashboardRoutes = require(\"./src/routes/dashboardRoutes\");\r\nconst wishlistRoutes = require(\"./src/routes/wishlistRoutes\");\r\nconst adminDashboardRoute = require(\"./src/routes/adminDashboardRoute\");\r\nconst { mongoDbUrl, port } = require(\"./src/middlewares/config\");\r\n\r\napp.use(express.json());\r\napp.use(fileUpload());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\nmongoose\r\n    .connect(mongoDbUrl, { useNewUrlParser: true })\r\n    .then(() => console.log(\"Connected with Database\"))\r\n    .catch((err) => console.log(err));\r\n\r\napp.use(\"/\", productRoutes);\r\napp.use(\"/\", categoryRoutes);\r\napp.use(\"/\", brandRoutes);\r\napp.use(\"/\", vendorRoutes);\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", colorRoutes);\r\napp.use(\"/\", customerRoutes);\r\napp.use(\"/\", orderRoutes);\r\napp.use(\"/\", paymentRoutes);\r\napp.use(\"/\", cartRoutes);\r\napp.use(\"/\", questionRoutes);\r\napp.use(\"/\", couponRoutes);\r\napp.use(\"/\", businessRoutes);\r\napp.use(\"/\", homepageRoutes);\r\napp.use(\"/\", invoiceRoutes);\r\napp.use(\"/\", optRoutes);\r\napp.use(\"/\", orderStatusRoute);\r\napp.use(\"/\", profileRoutes);\r\napp.use(\"/\", reportRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", wishlistRoutes);\r\napp.use(\"/\", adminDashboardRoute);\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>factorez.com backend deployed successfully</h1>\");\r\n});\r\n\r\napp.listen(port, () => console.log(`Server is up and running on port: ${port}`));\r\n"],"names":["adminModel","jwt","bcrypt","listOfRoleEnums","roleEnums","adminSecretKey","tokenSecretKey","vendorModel","isValid","isValidEmail","productModel","module","exports","addAdmin","async","req","res","name","email","phone","password","role","body","find","$or","length","status","send","message","hash","data","toLowerCase","isDeleted","admin","create","undefined","isSuperAdmin","error","getAllAdmin","select","createSuperAdmin","params","secretKey","superAdmin","adminLogin","includes","user","findOne","emailId","vendor_unique_id","compare","err","result","date","Date","now","userFlag","userType","photo","profileUrl","vendorId","representativeName","altMobileNo","mobileNo","issueTime","Math","floor","token","sign","userId","_id","toString","userModel","iat","expiresIn","setHeader","hasAccess","getAllSubadminEnums","verifyVendor","vendorMargin","vendorStatus","vendorObj","findById","marginInPercentage","actionTakenBy","updateMany","vendor_id","$set","margin","save","deleteVendor","vendor","changeVendorPassword","newPassword","hashedPassword","updateAdminInfo","adminId","adminid","deleteAdminById","customerModel","orderModel","getDateStrToMS","dateStr","setHours","getTime","getCurrentYear","firstMonth","getFullYear","lastMonth","getCurrentMonth","firstDay","getMonth","lastDay","getCurrentWeek","curr","first","getDate","getDay","last","setDate","console","log","getDashboardData","products","populate","productCount","customerCount","vendorCount","orderCount","todayOrderCount","thisWeakOrderCount","thisMonthOrderCount","thisYearOrderCount","thisYearSale","thisMonthSale","thisWeekSale","overAllSale","todaySale","x","isActive","todayMS","orders","order_date","order_status_id","grand_total","overallOrder","brandModel","isValidObjectId","uploadFile","addBrand","brand_name","brandLogo","logoUrl","files","brandData","newBrand","brand_id","push","getAllBrands","brands","getAllBrandByVendor","verifyBrandById","brandId","brandStatus","brand","businessModel","uploadImage","bannerModel","addBusinessInfo","bName","bEmail","bNumber","businessData","business_name","contactNo","contactEmail","businessExists","addBusinessGST","gsts","defaultGST","getBusinessInfo","business","addBusinessFiles","bLogo","bInvLogo","bPolicy","bTC","business_Logo","invoiceLogo","privacyPolicy","iAgree","setDefaultGst","gst","gstd","gstNo","pickupAddress","stateCode","saveSocialMedia","facebook","instagram","twitter","youtube","linkedin","socialMedia","bannerForClientPage","images","type","url","imageURL","bannerUrl","getBannerForClientPage","bannerDeleteById","bannerId","findByIdAndDelete","cancelledReasonModel","addCancelledReason","questions","customerAnswer","cancelledReasonData","newCancelledReason","cartModel","colorModel","addToCart","customerId","product_id","qty","lotSize","colorId","cart","customer_id","customer","color","Number","colorName","colorHex","addedAt","toLocaleString","dataX","isActivated","cartLength","getAllAbandentCarts","carts","$gte","$size","path","model","getCartByCustomerId","customerData","removeFromCart","index","arr","splice","json","qtyIncreaseDecrease","cartAmt_current","totalPrice","forEach","element","seller_price","sellingGST","price","marginAmt","toFixed","priceCal","totalPriceCalc","currentCoupon","minOrderAmt","categoryModel","subcategoryModel","addCategory","category_name","subCategory","categoryData","sub_category","insertMany","newCategory","getAllCategories","categories","getCategoryById","categoryId","category","updateCategoryById","el","isFound","innerEl","hasOwnProperty","toHexString","findOneAndUpdate","deletedAt","new","subCategoryCreated","objs","xId","deleteCategoryById","addNewColor","deleteColorById","getAllColor","colors","couponCodeModel","isExpiryCoupon","generateCoupon","couponCode","validTill","maxUsers","maxDiscPrice","discountType","discountAmt","createData","createdCoupon","applyCoupon","customerid","orderAmount","coupon","isExpired","isUsed","day","month","year","expiryDateMS","getAllCoupons","coupons","sort","createdAt","deleteCoupon","couponId","couponid","customerAddressModel","isValidRequestBody","stateAndCode","addCustomerInformation","alternate_phone","pincode","address","state","city","addressData","Object","keys","isBlocked","cart_id","newAddress","defaultAddress","getAllAddresses","updateAddressByCustomerId","i","deleteAddressById","addressId","defaultAddressId","addAddress","isValidMoblie","isValidPassword","customerTokenSecretKey","wishlistModel","loginUser","wishlist","wishlistLength","getAllCustomer","customers","getCustomerById","updateCustomerById","deleteCustomerById","blockCustomerById","findOrdersByPhone","userPhone","setDefaultAddress","changePassword","HomepageModel","recommendedProduct","storeInfo","getProductBySlug","slug","product","stockStatus","excelJs","csv2json","request","dateToLocalDateTime","checkProductIds","categoryIds","colorIds","vednorIdForx","x1","color_id","subCatId","exportProductAddDemoSheet","workbook","Workbook","worksheet","addWorksheet","columnData","header","key","product_name","skucode","hsncode","category_id","subcategory_id","lotsize","mrp","in_hand_qty","min_order_qty","sole","material","packing_type","made_in","weight","description","thumbnail_url","multiple_images","unshift","newColumnData","slice","columns","addRow","getRow","eachCell","cell","font","bold","fill","pattern","fgColor","argb","xlsx","write","then","exportIDs","worksheet2","cat","subcategory_name","vendors","singleVendor","firmName","lastRow","obj","column","lengths","values","map","v","maxLength","max","filter","width","csvToJson","vendorIds","csvUrl","csv","resJson","fromStream","get","subscribe","productData","sku_code","hsn_code","lotSizeQty","qty_in_hand","productDataArr","vendorArr","Obj","split","flatMap","trim","thumbnail_pic","multiple_pics","statusX","indexOf","newProductObj","vdr","prdct","e","exportOrderReport","$in","strictPopulate","ordersArr","orderData","productLength","order","orderId","saleInvoice","invoiceNo","invoiceDate","ordered_products","skuCode","selling_gst","seller_gst","soldBy","discounted_amount","total","gstType","GST_amount","pickupCity","pickupState","pickupPincode","vendorAmtInfo","grandTotal","purchaseInvoice","gstAmt","orderStatusList","statusList","updatedDate","updatedAt","updatedBy","orderCol","buyerCol","saleCol","sellerCol","purchaseCol","orderJourney","m","saleSkuCol","purchaseSkuCol","saleGstCol","purchaseGstCol","saleLotSizeCol","purchaseLotSizeCol","orderLen","buyerLen","saleLen","sellerLen","purchaseLen","height","colNum","border","top","style","right","bottom","left","addFeaturedProducts","newArrival","featuredProduct","bestSelling","home","getFeaturedProduct","removeFeaturedProduct","id","idx","findIndex","generateRandomID","preFix","digits","random","generateRandomAlphaNumericID","characters","initializeApp","getStorage","ref","getDownloadURL","uploadBytesResumable","aws","config","awsS3Bucket","awsAccessKey","awsSecretKey","awsS3Region","firebaseConfig","storage","giveCurrentDateTime","today","getHours","getMinutes","getSeconds","update","accessKeyId","secretAccessKey","region","blobFile","dateTime","storageRef","replace","metadata","contentType","mimetype","snapshot","downloadURL","image","Promise","resolve","reject","s3","S3","uploadParams","Bucket","Key","Body","ContentType","upload","Location","invoiceModel","invoiceNoModel","orderedProductModel","generatePdf","financialYear","generatePurchaseInvoice","order_id","gstAmount","totalAmount","invNo","invoiceNoType","fY","invoiceYear","invoiceNoLength","strInvNumber","invNumber","substring","invData","invoiceType","invoiceAddress","shippingAddress","billingAddress","invRes","invoice","generateSaleInvoice","getAllSaleInvoice","invoices","getAllPurchaseInvoice","downoadInvoiceByInvoiceNumber","invoiceNumber","invoicenumber","invoicetype","orderedProduct","logo","brandName","soldByAddress","soldByPhone","soldByGst","orderDate","billToName","billToAddress","billToPhone","billToGST","shipToName","shipToAddress","shipToPhone","shipToGST","tableRow","totalAmt","totalCGSTAmt","totalSGSTAmt","totalIGSTAmt","taxableAmt","totalTaxAmt","grossTotalAmt","netPayableAmount","count","isRemoved","trData","sno","productName","sizeSet","hsnCode","rate","cgstPercentage","cgstAmount","sgstPercentage","sgstAmount","igstPercentage","igstAmount","pdf","customerAddress","mrginAmt","paymentModel","orderStatusTableModel","createPayment","createOrder","address_id","payment_mode","paymentAmt","transaction_id","demoObj","orderAmt","mAmt","totalamt","p","selling_price","sellingGstAmt","currentTotal","vdrAmt","vdrGstAmt","odrObj","addedOrder","maxDiscount","discAmt","singleOrder","percentage","partPayment","payment","payment_id","paymentId","shipping_address","getAllOrders","getOrderByOrderId","getOrdersByCustomerId","customerOrders","cancelOrderByOrderId","Status","updateOrderByOrderId","orderType","cancelMessage","questionId","removedProductIds","partialCanceledAmt","partialCanceledGstAmt","orderedProductAmtInfo","productQty","orderedAmtInfo","s_product","canceledAmt","adminCancelledAmt","order_status","updatedByObj","statusObj","partialCancelOrderInfo","purchaseGstAmount","purchaseTotalAmount","singleOrderProduct","invDataPurchase","invDataSale","partial_payment","payment_amount","return_amount","balance_amount","order_amount","resData","resData2","cancelled","question","cancelledStatus","objOfCancelledStatusList","cancelledStatusList","cod_received","getOrderedProduct","orderedproductid","patchTrackingIdByOrderId","t_id","tracking_id","getAllCancelledOrder","cancelledOrders","createOrderStatusTable","cancelledObj","cancelledBy","reason","orderStatusTableData","isCompleted","OrderStatusTableData","getAllOrderStatusTables","allOrderStatusTables","getOrderStatusTableById","orderStatusTableId","orderStatusTable","updateOrderStatusByOrderId","bulkOrderProcess","orderIds","orderStatusTables","cancelOrderReturnById","twilioAccSID","twilioAuthToken","twilioVerifySID","accountSid","authToken","verifySid","client","sendOTP","isSent","verify","v2","services","verifications","to","channel","verification","catch","verityOTP","otpCode","verificationChecks","code","verification_check","valid","resAcc","statusCode","createAccountAndToken","forgetPasswordUsingOtp","updatePassword","order_sortId","paymentData","payment_status","discount_amt","order_custom_id","transactionId","payment_date","updatePaymentStatus","addPayment","paymentDetails","partial_mode","ten_percent_amount","partialPaymentDetails","amount","firstPartialPayment","partialPaymentModel","partialPaymentData","remaining_amount","newPartialPayment","newPayment","twenty_percent_amount","reduce","sum","item","subCategoryModel","calculateMarginAndSelling","uploadMultipleImage","blob","addProduct","meta","JSON","parse","meta_title","metaTitle","meta_keywords","metaKeyword","meta_description","metaDescription","multipleImage","thumbnail","mulImg","Array","isArray","val","img","brandObj","categoryObj","subCatObj","getAllProducts","getProductById","productId","updateProductByProductId","gst_amount","stock_status","size_qty","primary_category","deleteProductByProductId","getAllProductsForDashboard","changeProductStatus","newStatus","changeProductStockStatus","newStockStatus","csvProduct","getAllProductsForFilter","updateProduct","singleFile","updateProfile","fullName","emailID","altPhone","newPass","oldPass","profileImg","imgRes","y","userid","questionModel","addQuestions","questionFor","questionObj","allQuestion","getAllQuestionByModel","getAllQuestion","deleteQuestionById","questionid","getOrderReport","$exists","exportSaleReport","startDate","endDate","invoice_no","invoice_date","order_qty","invoice_value","advance","discount","net_amount","refund","cash_on_delivery","buyer_name","buyer_no","exportPurchaseReport","seller_name","seller_phone","factorez_gst","purchase","gst_percentage","taxable_value","quantity","getPaymentReport","updatePaymentReport","orderid","paymentStatus","paidAmount","paymentDate","settlementAmt","paymentReportStatus","updateAt","logs","bankModel","documentModel","isValidGST","getAllVendors","addVendor","acHolderName","acNo","bankName","branch","ifsc","termsAndConditions","gstRegDoc","brandRegDoc","cancelledCheque","documentData","bankData","vendorData","document","bank","bank_id","document_id","auth_unique_id","db_unique_id","sharing_unique_id","createVendorByAdmin","basicInfoStatus","updateVendor","vendorObjId","brandX","addToWishlist","removeFromWishlist","wishlistId","findOneAndDelete","getWishlistProduct","Authentication","next","tokenWithBearer","headers","authorization","decode","Authorization","tokenId","UserId","AuthenticationCustomer","mongoDbUrl","process","env","MONGO_DB_URL","TOKEN_SECRET_KEY","CUSTOMER_TOKEN_SECRET_KEY","port","PORT","apiKey","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","measurementId","FIREBASE_MEASUREMENT_ID","ADMIN_SECRET_KEY","TWILIO_AUTH_TOKEN","TWILIO_ACCOUNT_SID","TWILIO_VERIFY_SID","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","S3_REGION","S3_BUCKET","dotenv","accessControls","checkUser","accessEnum","userData","AddProductRole","AllProductRole","PRODUCT","PRODUCT_ALL_PRODUCT","ACCESS","PRODUCT_DOWNLOAD","PRODUCT_EDIT","PRODUCT_VIEW","PRODUCT_ADD_PRODUCT","AllMenuRole","AllVendorRoles","VENDOR","VENDOR_DOWNLOAD","VENDOR_EDIT","VENDOR_VIEW","VENDOR_ADD_VENDOR","VENDOR_ALL_VENDOR","VENDOR_VENDOR_MOV","VENDOR_VENDOR_PAYMENT","AddProductColorRole","MANAGE_PRODUCT","PRODUCT_COLOR","AddProductBrandRole","BRAND","ManageOrderRole","ORDERS","ORDERS_ABANDONED_ORDERS","ORDERS_ALL_ORDERS","ORDERS_CHANGE_ORDER_STATUS","ORDERS_DOWNLOAD","ORDERS_EDIT","ORDERS_VIEW","colorRole","verifyProudct","PRODUCT_REVIEW","outOfStockProduct","abandonedOrderRole","mongoose","ObjectId","Schema","Types","homepageSchema","timestamps","listOfAccessControll","adminSchema","String","required","unique","enum","Boolean","default","bankSchema","bannerSchema","brandSchema","businessSchema","cancelledReasonSchema","cartSchema","categorySchema","colorSchema","couponCodeSchema","generatedBy","customerAddressSchema","customerSchema","documentSchema","invoiceSchema","invoiceStatus","invoiceNoSchema","orderSchema","shipping_charges","total_pairs","transport_bilty","orderStatusTableSchema","orderedProductSchema","paymentSchema","slugify","productSchema","pre","this","lower","strict","questionSchema","subcategorySchema","vendorSchema","order_success","order_canclled","order_pending","order_inprogress","logistics_id","business_id","wishlistSchema","express","router","Router","adminController","post","put","delete","brandController","patch","categoryController","customerController","customerAddressController","orderController","orderStatusTableController","paymentController","productController","questionController","vendorController","dateToLocalDate","hr","min","ampm","MANAGE_MENU","ADD_CATEGORY","ADD_SUBCATEGORY","ADD_PRODUCT","ALL_PRODUCT","PRODUCT_SIZE","OUT_OF_STOCK_PRODUCTS","MANAGE_ORDERS","ALL_ORDERS","CONFIRM_ORDERS","SHIPPED_ORDER","PICKUP_PENDING","DELIVERED_ORDER","RTO_ORDER","RTO_DELIVERED","CANCEL_ORDER","PARTIAL_DELIVERED","HOLD","PICKUP_INITIATE","IMPORT_PINCODE","MANAGE_RETURN","RETURN_REQUEST","SETTLEMENT_REQUEST","REFUNDED","SETTLEMENT_REQUEST_CANCEL","ALL_USERS","MANAGE_COUPONS","ADD_COUPON","ALL_COUPON","MANAGE_SALES","HOMEPAGE_MANAGE","MANAGE_VENDOR","ADD_VENDOR","ALL_VENDOR","ALL_OUTSTANDING","ALL_SETTLED","ADD_EMPLOYEE","EXPORT_INFORMATION","COUPON","COUPON_VIEW","COUPON_EDIT","COUPON_DOWNLOAD","COUPON_ALL_COUPON","COUPON_ADD_NEW_COUPON","CUSTOMER","CUSTOMER_VIEW","CUSTOMER_EDIT","CUSTOMER_DOWNLOAD","CUSTOMER_ALL_CUSTOMER","CUSTOMER_CUSTOMER_ORDER_BY_PHONE","SETTING","SETTING_BUSINESS_INFO_SETTING","SETTING_HOMEPAGE_SETTING","REPORT","REPORT_VIEW","REPORT_DOWNLOAD","SUB_ADMIN","SUBADMIN_VIEW","SUBADMIN_DOWNLOAD","SUB_ADMIN_ALL_ADMIN","SUB_ADMIN_ADD_ADMIN","flat","z","Puppeteer","hbs","fs","footerText","templatePath","content","readFileSync","html","compile","template","browser","launch","headless","page","newPage","setContent","addStyleTag","format","printBackground","displayHeaderFooter","footerTemplate","close","currentYear","num","per","sellerAmount","sellingGst","baseAmount","basePlusMarginAmt","Punjab","Chandigarh","Uttarakhand","Haryana","Delhi","Rajasthan","Bihar","Sikkim","Nagaland","Manipur","Mizoram","Tripura","Meghalaya","Assam","Jharkhand","Odisha","Chattisgarh","Gujarat","Maharashtra","Karnataka","Goa","Lakshadweep","Kerela","Puducherry","Telangana","Ladakh","requestBody","objectId","value","isValidName","test","gmail","isValidImg","mobile","GST","isValidPrice","isValidStatus","isValidPin","pin","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","bodyParser","fileUpload","cors","app","productRoutes","categoryRoutes","brandRoutes","vendorRoutes","adminRoutes","colorRoutes","customerRoutes","orderRoutes","paymentRoutes","cartRoutes","questionRoutes","couponRoutes","businessRoutes","homepageRoutes","invoiceRoutes","optRoutes","orderStatusRoute","profileRoutes","reportRoutes","dashboardRoutes","wishlistRoutes","adminDashboardRoute","use","urlencoded","extended","connect","useNewUrlParser","listen"],"sourceRoot":""}