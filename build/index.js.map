{"version":3,"file":"index.js","mappings":"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","sources":["webpack://shoewebsite/./src/controllers/OTP.js","webpack://shoewebsite/./src/controllers/adminController.js","webpack://shoewebsite/./src/controllers/adminDashboard.js","webpack://shoewebsite/./src/controllers/brandController.js","webpack://shoewebsite/./src/controllers/businessController.js","webpack://shoewebsite/./src/controllers/cancelReasonController.js","webpack://shoewebsite/./src/controllers/cartController.js","webpack://shoewebsite/./src/controllers/categoryController.js","webpack://shoewebsite/./src/controllers/colorController.js","webpack://shoewebsite/./src/controllers/couponCodeController.js","webpack://shoewebsite/./src/controllers/customerAddressController.js","webpack://shoewebsite/./src/controllers/customerController.js","webpack://shoewebsite/./src/controllers/dashboardController.js","webpack://shoewebsite/./src/controllers/excelFileController.js","webpack://shoewebsite/./src/controllers/homepageController.js","webpack://shoewebsite/./src/controllers/idGeneratorController.js","webpack://shoewebsite/./src/controllers/imageController.js","webpack://shoewebsite/./src/controllers/invoiceController.js","webpack://shoewebsite/./src/controllers/orderController.js","webpack://shoewebsite/./src/controllers/orderStatusTableController.js","webpack://shoewebsite/./src/controllers/otpController.js","webpack://shoewebsite/./src/controllers/paymentController.js","webpack://shoewebsite/./src/controllers/productController.js","webpack://shoewebsite/./src/controllers/profileController.js","webpack://shoewebsite/./src/controllers/questionController.js","webpack://shoewebsite/./src/controllers/reportController.js","webpack://shoewebsite/./src/controllers/vendorController.js","webpack://shoewebsite/./src/controllers/wishlistController.js","webpack://shoewebsite/./src/middlewares/auth.js","webpack://shoewebsite/./src/middlewares/config.js","webpack://shoewebsite/./src/middlewares/firebase.js","webpack://shoewebsite/./src/middlewares/roleAuth.js","webpack://shoewebsite/./src/models/HomepageModel.js","webpack://shoewebsite/./src/models/adminModel.js","webpack://shoewebsite/./src/models/bankModel.js","webpack://shoewebsite/./src/models/bannerModel.js","webpack://shoewebsite/./src/models/brandModel.js","webpack://shoewebsite/./src/models/businessModel.js","webpack://shoewebsite/./src/models/cancelledReasonModel.js","webpack://shoewebsite/./src/models/cartModel.js","webpack://shoewebsite/./src/models/categoryModel.js","webpack://shoewebsite/./src/models/colorModel.js","webpack://shoewebsite/./src/models/couponCodeModel.js","webpack://shoewebsite/./src/models/customerAddressModel.js","webpack://shoewebsite/./src/models/customerModel.js","webpack://shoewebsite/./src/models/documentModel.js","webpack://shoewebsite/./src/models/invoiceModel.js","webpack://shoewebsite/./src/models/invoiceNoModel.js","webpack://shoewebsite/./src/models/orderModel.js","webpack://shoewebsite/./src/models/orderStatusTableModel.js","webpack://shoewebsite/./src/models/orderedProductModel.js","webpack://shoewebsite/./src/models/otpModel.js","webpack://shoewebsite/./src/models/paymentModel.js","webpack://shoewebsite/./src/models/productModel.js","webpack://shoewebsite/./src/models/questionModel.js","webpack://shoewebsite/./src/models/subcategoryModel.js","webpack://shoewebsite/./src/models/vendorModel.js","webpack://shoewebsite/./src/models/wishlistModel.js","webpack://shoewebsite/./src/routes/adminDashboardRoute.js","webpack://shoewebsite/./src/routes/adminRoutes.js","webpack://shoewebsite/./src/routes/brandRoutes.js","webpack://shoewebsite/./src/routes/businessRoutes.js","webpack://shoewebsite/./src/routes/cartRoutes.js","webpack://shoewebsite/./src/routes/categoryRoutes.js","webpack://shoewebsite/./src/routes/colorRoutes.js","webpack://shoewebsite/./src/routes/couponCodeRoutes.js","webpack://shoewebsite/./src/routes/customerRoutes.js","webpack://shoewebsite/./src/routes/dashboardRoutes.js","webpack://shoewebsite/./src/routes/homepageRoutes.js","webpack://shoewebsite/./src/routes/invoiceRoutes.js","webpack://shoewebsite/./src/routes/orderRoutes.js","webpack://shoewebsite/./src/routes/orderStatusTableRoutes.js","webpack://shoewebsite/./src/routes/otpRoutes.js","webpack://shoewebsite/./src/routes/paymentRoutes.js","webpack://shoewebsite/./src/routes/productRoutes.js","webpack://shoewebsite/./src/routes/profileRoutes.js","webpack://shoewebsite/./src/routes/questionsRoutes.js","webpack://shoewebsite/./src/routes/reportRoutes.js","webpack://shoewebsite/./src/routes/vendorRoutes.js","webpack://shoewebsite/./src/routes/wishlistRoutes.js","webpack://shoewebsite/./src/utils/couponExpireUtil.js","webpack://shoewebsite/./src/utils/dateUtils.js","webpack://shoewebsite/./src/utils/enums.js","webpack://shoewebsite/./src/utils/generatePdf.js","webpack://shoewebsite/./src/utils/getFinancialYear.js","webpack://shoewebsite/./src/utils/percentage.js","webpack://shoewebsite/./src/utils/stateNameAndCode.js","webpack://shoewebsite/./src/utils/utils.js","webpack://shoewebsite/external commonjs \"aws-sdk\"","webpack://shoewebsite/external commonjs \"aws-sdk/lib/maintenance_mode_message\"","webpack://shoewebsite/external commonjs \"axios\"","webpack://shoewebsite/external commonjs \"bcrypt\"","webpack://shoewebsite/external commonjs \"body-parser\"","webpack://shoewebsite/external commonjs \"convert-csv-to-json\"","webpack://shoewebsite/external commonjs \"cors\"","webpack://shoewebsite/external commonjs \"csvtojson\"","webpack://shoewebsite/external commonjs \"dotenv\"","webpack://shoewebsite/external commonjs \"exceljs\"","webpack://shoewebsite/external commonjs \"express\"","webpack://shoewebsite/external commonjs \"express-fileupload\"","webpack://shoewebsite/external commonjs \"firebase/app\"","webpack://shoewebsite/external commonjs \"firebase/storage\"","webpack://shoewebsite/external commonjs \"handlebars\"","webpack://shoewebsite/external commonjs \"jsonwebtoken\"","webpack://shoewebsite/external commonjs \"lodash\"","webpack://shoewebsite/external commonjs \"mongoose\"","webpack://shoewebsite/external commonjs \"puppeteer\"","webpack://shoewebsite/external commonjs \"request\"","webpack://shoewebsite/external commonjs \"slugify\"","webpack://shoewebsite/external commonjs \"twilio\"","webpack://shoewebsite/external node-commonjs \"fs\"","webpack://shoewebsite/external node-commonjs \"path\"","webpack://shoewebsite/webpack/bootstrap","webpack://shoewebsite/./index.js"],"sourcesContent":["const axios = require(\"axios\");\r\nconst _ = require(\"lodash\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst otpModel = require(\"../models/otpModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\n\r\n// GENERATE RANDOM NUMERIC ID OF GIVEN LENGTH\r\nfunction generateRandomID(length) {\r\n    let id = \"\";\r\n    const digits = \"0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * digits.length);\r\n        id += digits[randomIndex];\r\n    }\r\n    return id;\r\n}\r\n\r\n// SEND OTP THROUGH KALEYRA SMS API\r\nconst sentOTP = async (req, res) => {\r\n    try {\r\n        let { mobile } = req.body;\r\n        const apiKey = \"A78cd4e6b7179e5439caac3c9f5f75b63\";\r\n        const sid = \"HXIN1777665894IN\";\r\n        const type = \"OTP\";\r\n        const senderId = \"FCTREZ\";\r\n        // let to = 917042072054;\r\n        let OTP = generateRandomID(4);\r\n        const otpTemplateId = \"1007482403267557324\";\r\n        // const { to, OTP } = req.body;\r\n        // console.log(\"mobile: \", to);\r\n        const body = `Your OTP Code for registration on factorez is ${OTP}. Thank you for Signup on FactorEz.com`;\r\n        const smsData = {\r\n            method: \"POST\",\r\n            url: `https://api.kaleyra.io/v1/${sid}/messages`,\r\n            headers: {\r\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                \"api-key\": apiKey,\r\n            },\r\n            data: `to=91${mobile}&type=${type}&sender=${senderId}&body=${body}&template_id=${otpTemplateId}`,\r\n        };\r\n\r\n        const response = await axios(smsData);\r\n        // console.log(\"OTP SMS sent successfully!\", response.data);\r\n\r\n        let hashedOTP = await bcrypt.hash(OTP, 10);\r\n        OTP = hashedOTP;\r\n\r\n        let otp = await otpModel.findOne({ mobile: mobile });\r\n        if (otp) {\r\n            otp.otp = OTP;\r\n        } else {\r\n            otp = new otpModel({ mobile: mobile, otp: OTP });\r\n        }\r\n\r\n        await otp.save();\r\n        return res.status(200).send({ status: true, message: \"OTP sent successfully\", data: response.data });\r\n    } catch (error) {\r\n        console.log(\"Error sending SMS:\", error.message);\r\n        return res.status(401).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst forgetOTP = async (req, res) => {\r\n    try {\r\n        let { mobile } = req.body;\r\n        const apiKey = \"A78cd4e6b7179e5439caac3c9f5f75b63\";\r\n        const sid = \"HXIN1777665894IN\";\r\n        const type = \"OTP\";\r\n        const senderId = \"FCTREZ\";\r\n        // let to = 917042072054;\r\n        let OTP = generateRandomID(4);\r\n        const otpTemplateId = \"1007051288684950055\";\r\n\r\n        const body = `OTP for reset your password on FactorEz is ${OTP} - factorez.com`;\r\n        const smsData = {\r\n            method: \"POST\",\r\n            url: `https://api.kaleyra.io/v1/${sid}/messages`,\r\n            headers: {\r\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                \"api-key\": apiKey,\r\n            },\r\n            data: `to=91${mobile}&type=${type}&sender=${senderId}&body=${body}&template_id=${otpTemplateId}`,\r\n        };\r\n\r\n        const response = await axios(smsData);\r\n        // console.log(\"OTP SMS sent successfully!\", response.data);\r\n\r\n        let hashedOTP = await bcrypt.hash(OTP, 10);\r\n        OTP = hashedOTP;\r\n\r\n        // console.log(\"hashed OTP: \", OTP);\r\n\r\n        let otp = await otpModel.findOne({ mobile: mobile });\r\n        if (otp) {\r\n            otp.otp = OTP;\r\n        } else {\r\n            otp = new otpModel({ mobile: mobile, otp: OTP });\r\n        }\r\n\r\n        await otp.save();\r\n\r\n        return res.status(200).send({ status: true, message: \"OTP sent successfully\", data: response.data });\r\n    } catch (error) {\r\n        console.log(\"Error sending SMS:\", error.message);\r\n        return res.status(401).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst createAccountAndToken = async (phone) => {\r\n    try {\r\n        let customer = await customerModel.findOne({ phone: phone, isDeleted: false });\r\n\r\n        if (!customer) {\r\n            customer = await customerModel.create({ phone });\r\n        }\r\n        if (customer.isBlocked) {\r\n            return { statusCode: 403, status: false, message: \"This account has been blocked\" };\r\n        }\r\n        if (!customer.isActivated) {\r\n            return { statusCode: 200, status: true, isActivated: false, data: { customerId: customer._id }, message: \"Account is not active, Please fill your information\" };\r\n        }\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            userType: \"CUSTOMER\",\r\n            customerId: customer._id.toString(),\r\n            phone: customer.phone,\r\n            isActivated: customer.isActivated,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n\r\n        let date = Date.now();\r\n        let issueTime = Math.floor(date / 1000);\r\n        let token = jwt.sign(\r\n            {\r\n                userId: customer._id.toString(),\r\n                phone: customer.phone,\r\n                userModel: \"CUSTOMER\",\r\n                iat: issueTime,\r\n            },\r\n            customerTokenSecretKey,\r\n            { expiresIn: \"24h\" }\r\n        );\r\n        data.token = token;\r\n        return { statusCode: 200, status: true, message: \"Login successfully\", data: data };\r\n    } catch (error) {\r\n        return { statusCode: 500, status: false, message: \"something went wrong\" };\r\n    }\r\n};\r\nconst updatePassword = async (phone, password) => {\r\n    try {\r\n        let customer = await customerModel.findOne({ phone: phone, isDeleted: false });\r\n        if (!customer) {\r\n            customer = await customerModel.create({ phone });\r\n        }\r\n        if (customer.isBlocked) {\r\n            return { statusCode: 403, status: false, message: \"This account has been blocked\" };\r\n        }\r\n        if (!customer.isActivated) {\r\n            return { statusCode: 200, status: true, isActivated: false, data: { customerId: customer._id }, message: \"Account is not active, Please fill your information\" };\r\n        }\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        customer.password = hashedPassword;\r\n\r\n        await customer.save();\r\n        return { statusCode: 200, status: true, message: \"Password updated successfully\" };\r\n    } catch (error) {\r\n        return { statusCode: 500, status: false, message: \"something went wrong\" };\r\n    }\r\n};\r\n// VERIFY OTP\r\nconst verifyOTP = async (req, res) => {\r\n    try {\r\n        let { mobile, OTP } = req.body;\r\n\r\n        let otpHolder = await otpModel.findOne({ mobile: mobile });\r\n\r\n        if (!otpHolder) {\r\n            return res.status(401).send({ status: false, message: \"Please send OTP\" });\r\n        }\r\n        let validUser = bcrypt.compare(OTP, otpHolder.otp);\r\n\r\n        if (otpHolder.mobile === mobile && validUser) {\r\n            await otpModel.deleteOne({ mobile: otpHolder.mobile });\r\n\r\n            let resAcc = await createAccountAndToken(mobile);\r\n            // console.log(resAcc);\r\n            if (resAcc.statusCode === 403) {\r\n                return res.status(403).send({ status: false, message: resAcc.message });\r\n            } else if (resAcc.statusCode === 200 && resAcc.isActivated) {\r\n                res.setHeader(\"Authorization\", \"Bearer \" + resAcc.data.token);\r\n                return res.status(200).send({ status: true, isActivated: true, message: resAcc.message, data: resAcc.data });\r\n            } else if (resAcc.statusCode === 200 && !resAcc.isActivated) {\r\n                return res.status(200).send({ status: true, isActivated: false, message: resAcc.message, data: resAcc.data });\r\n            } else if (resAcc.statusCode === 500) {\r\n                return res.status(500).send({ status: false, message: resAcc.message });\r\n            } else {\r\n                return res.status(400).send({ status: false, message: \"Something went wrong...\" });\r\n            }\r\n            // return res.status(200).send({ status: true, message: \"OTP verified successfully\" });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Authentication failed\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst verifyResetOTP = async (req, res) => {\r\n    try {\r\n        let { mobile, OTP, password } = req.body;\r\n        if (!mobile || !OTP || !password) {\r\n            return res.status(400).send({ status: false, message: \"Phone number, password and otp are required\" });\r\n        }\r\n        let otpHolder = await otpModel.findOne({ mobile: mobile });\r\n\r\n        if (!otpHolder) {\r\n            return res.status(401).send({ status: false, message: \"Please send OTP\" });\r\n        }\r\n        let validUser = bcrypt.compare(OTP, otpHolder.otp);\r\n\r\n        if (otpHolder.mobile === mobile && validUser) {\r\n            await otpModel.deleteOne({ mobile: otpHolder.mobile });\r\n            let resAcc = await updatePassword(mobile, password);\r\n            return res.status(resAcc.statusCode).send({ status: resAcc.status, message: resAcc.message });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Authentication failed\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { sentOTP, verifyOTP, forgetOTP, verifyResetOTP };\r\n","const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { listOfRoleEnums, roleEnums } = require(\"../utils/enums\");\r\nconst { adminSecretKey, tokenSecretKey } = require(\"../middlewares/config\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst documentModel = require(\"../models/documentModel\");\r\nconst bankModel = require(\"../models/bankModel\");\r\nconst brandModel = require(\"../models/brandModel\");\r\nconst { isValid, isValidEmail } = require(\"../utils/utils\");\r\nconst productModel = require(\"../models/productModel\");\r\n\r\nconst addAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, phone, password, role } = req.body;\r\n\r\n        let admins = await adminModel.find({\r\n            $or: [{ email: email }, { phone: phone }],\r\n        });\r\n        if (admins.length > 0) {\r\n            return res.status(400).send({\r\n                message: \"Email or Password already exists\",\r\n                status: false,\r\n            });\r\n        }\r\n        if (name === \"\") {\r\n            return res.status(400).send({ message: \"Name is required\", status: false });\r\n        }\r\n        if (email === \"\") {\r\n            return res.status(400).send({ message: \"Email is required\", status: false });\r\n        }\r\n        if (phone === \"\") {\r\n            return res.status(400).send({ message: \"Phone number is required\", status: false });\r\n        }\r\n        if (password === \"\") {\r\n            return res.status(400).send({ message: \"Password is required\", status: false });\r\n        }\r\n        if (role === \"\") {\r\n            return res.status(400).send({ message: \"Admin Role is required\", status: false });\r\n        }\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        password = hashedPassword;\r\n        let data = {\r\n            name,\r\n            email: email.toLowerCase(),\r\n            password,\r\n            role,\r\n            phone,\r\n            isDeleted: false,\r\n        };\r\n        let admin = await adminModel.create(data);\r\n        admin.password = undefined;\r\n        admin.isSuperAdmin = undefined;\r\n        return res.status(201).send({ status: true, message: \"Successful\", data: admin });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllAdmin = async (req, res) => {\r\n    let admin = await adminModel.find({ isSuperAdmin: false, isDeleted: false }).select([\"-password\", \"-isSuperAdmin\"]);\r\n    return res.status(200).send({ status: true, message: \"All admins\", data: admin });\r\n};\r\n\r\nconst updateAdminInfo = async (req, res) => {\r\n    try {\r\n        let adminId = req.params.adminid;\r\n        let { phone, password, email, name, role } = req.body;\r\n        let admin = await adminModel.findOne({ _id: adminId, isDeleted: false });\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (phone) admin.phone = phone;\r\n        if (email) admin.email = email.toLowerCase();\r\n        if (name) admin.name = name;\r\n        if (role) admin.role = role;\r\n        if (password) {\r\n            let hashedPassword = await bcrypt.hash(password, 10);\r\n            admin.password = hashedPassword;\r\n        }\r\n        await admin.save();\r\n        return res.status(202).send({ status: true, message: \"Admin Updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst createSuperAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, phone, password } = req.body;\r\n        let params = req.params.secretKey;\r\n        if (params === adminSecretKey) {\r\n            let admins = await adminModel.find({\r\n                $or: [{ email: email }, { phone: phone }],\r\n            });\r\n            if (admins.length > 0) {\r\n                return res.status(400).send({\r\n                    message: \"Email or Password already exists\",\r\n                    status: false,\r\n                });\r\n            }\r\n            if (name === \"\") {\r\n                return res.status(400).send({ message: \"Name is required\", status: false });\r\n            }\r\n            if (email === \"\") {\r\n                return res.status(400).send({ message: \"Email is required\", status: false });\r\n            }\r\n            if (phone === \"\") {\r\n                return res.status(400).send({ message: \"Phone number is required\", status: false });\r\n            }\r\n            if (password === \"\") {\r\n                return res.status(400).send({ message: \"Password is required\", status: false });\r\n            }\r\n            let hashedPassword = await bcrypt.hash(password, 10);\r\n            password = hashedPassword;\r\n            let data = {\r\n                name,\r\n                email: email.toLowerCase(),\r\n                password,\r\n                role: [\"ADMIN\"],\r\n                phone,\r\n                isSuperAdmin: true,\r\n                isDeleted: false,\r\n            };\r\n            let superAdmin = await adminModel.create(data);\r\n            superAdmin.password = undefined;\r\n            superAdmin.isSuperAdmin = undefined;\r\n            return res.status(201).send({ status: true, message: \"Successful\", data: superAdmin });\r\n        }\r\n        return res.status(401).send({ status: true, message: \"Invalid signature\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n        if (!isValid(email)) {\r\n            return res.status(400).send({ status: false, message: \"Email or USER Id is required\" });\r\n        }\r\n\r\n        if (email.includes(\"@\")) {\r\n            if (!isValidEmail(email)) {\r\n                return res.status(400).send({ status: false, message: \"Invalid email\" });\r\n            }\r\n        }\r\n        if (!isValid(password)) {\r\n            return res.status(400).send({ status: false, message: \"password is required\" });\r\n        }\r\n        // const EmailRegex = /^\\w+([\\.]?\\w+)*@\\w+([\\.]?\\w+)*(\\.\\w{2,3})+$/;\r\n        // const UserIDReges = /^[0-9]{8,14}$/;\r\n        // const PasswordRegex = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{10,20}$/;\r\n\r\n        // if ((!EmailRegex.test(email) && !UserIDReges.test(email)) || !PasswordRegex.test(password)) {\r\n        //     return res.status(400).send({ status: false, message: \"Please provide valid Credentials\" });\r\n        // }\r\n        let user = null;\r\n        if (email.includes(\"@\")) {\r\n            user = await adminModel.findOne({ email: email.toLowerCase(), isDeleted: false });\r\n            if (!user) {\r\n                user = await vendorModel.findOne({ emailId: email.toLowerCase() });\r\n            }\r\n        } else {\r\n            user = await vendorModel.findOne({ vendor_unique_id: email });\r\n        }\r\n        if (!user) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Email id or Username\" });\r\n        }\r\n        bcrypt.compare(password, user.password, function (err, result) {\r\n            if (err) {\r\n                return res.status(400).send({ status: false, message: err.message });\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        function hasAccess(result) {\r\n            if (result) {\r\n                let date = Date.now();\r\n                let data = {};\r\n                let userFlag = \"isSuperAdmin\" in user;\r\n                if (!userFlag) {\r\n                    if (user.status === \"Pending\" || user.status === \"Inprogress\") {\r\n                        return res.status(401).send({ status: false, message: \"Account is under review\" });\r\n                    }\r\n                    if (user.status === \"Rejected\") {\r\n                        return res.status(401).send({ status: false, message: \"Account has been Rejected, Please contact us.\" });\r\n                    }\r\n                }\r\n                if (!userFlag) {\r\n                    data.name = user.representativeName;\r\n                    data.email = user.emailId;\r\n                    data.userType = \"Seller\";\r\n                    data.role = user.role;\r\n                    data.altMobileNo = user.altMobileNo;\r\n                    data.phone = user.mobileNo;\r\n                    data.photo = user.profileUrl;\r\n                    data.vendorId = user.vendor_unique_id;\r\n                } else {\r\n                    data.name = user.name;\r\n                    data.email = user.email;\r\n                    data.userType = user.isSuperAdmin ? \"Super Admin\" : \"Admin\";\r\n                    data.role = user.role;\r\n                    data.phone = user.phone;\r\n                    data.photo = user.profileUrl;\r\n                    data.vendorId = null;\r\n                }\r\n\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        email: data.email,\r\n                        userId: user._id.toString(),\r\n                        userModel: userFlag ? \"ADMIN\" : \"VENDOR\",\r\n                        iat: issueTime,\r\n                    },\r\n                    tokenSecretKey,\r\n                    { expiresIn: \"12h\" }\r\n                );\r\n                data.token = token;\r\n\r\n                res.setHeader(\"Authorization\", \"Bearer\", token);\r\n                return res.status(200).send({\r\n                    status: false,\r\n                    message: \"Successfully logged in\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Incorrect Password\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst getAllSubadminEnums = async (req, res) => {\r\n    try {\r\n        return res.status(200).send({ status: true, message: \"Data Accessed\", data: roleEnums });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst verifyVendor = async (req, res) => {\r\n    try {\r\n        let { vendorMargin, vendorStatus } = req.body;\r\n        let vendorObj = await vendorModel.findById(req.params.vendorId);\r\n        if (vendorStatus === \"Approved\") {\r\n            if (vendorMargin) {\r\n                vendorObj.marginInPercentage = vendorMargin;\r\n            }\r\n            vendorObj.status = vendorStatus;\r\n            vendorObj.actionTakenBy = req.userId;\r\n            await productModel.updateMany({ vendor_id: vendorObj._id }, { $set: { margin: vendorMargin } });\r\n            await vendorObj.save();\r\n        } else if (vendorStatus === \"Rejected\") {\r\n            vendorObj.status = vendorStatus;\r\n            vendorObj.actionTakenBy = req.userId;\r\n            await vendorObj.save();\r\n        } else {\r\n            if (vendorMargin) {\r\n                await productModel.updateMany({ vendor_id: vendorObj._id }, { $set: { margin: vendorMargin } });\r\n                vendorObj.marginInPercentage = vendorMargin;\r\n            }\r\n            await vendorObj.save();\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Vendor Updated\", data: \"Updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst deleteVendor = async (req, res) => {\r\n    try {\r\n        let { vendorId } = req.body;\r\n        if (!vendorId) {\r\n            return res.status(400).send({ status: false, message: \"bad request\" });\r\n        }\r\n        let vendor = await vendorModel.findById(vendorId);\r\n        if (!vendor) {\r\n            return res.status(400).send({ status: false, message: \"vendor not found\" });\r\n        }\r\n        vendor.isDeleted = true;\r\n        await vendor.save();\r\n        return res.status(202).send({ status: true, message: \"vendor deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst changeVendorPassword = async (req, res) => {\r\n    try {\r\n        let { vendorId, newPassword } = req.body;\r\n\r\n        let vendor = await vendorModel.findOne({ _id: vendorId });\r\n        if (!vendor) {\r\n            return res.status(404).send({ status: false, message: \"Vendor Not Found\" });\r\n        }\r\n        if (newPassword === \"\") {\r\n            return res.status(400).send({ message: \"Password is required\", status: false });\r\n        }\r\n        let hashedPassword = await bcrypt.hash(newPassword, 10);\r\n\r\n        vendor.password = hashedPassword;\r\n        await vendor.save();\r\n        return res.status(201).send({ message: \"Password updated\", status: true });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst deleteAdminById = async (req, res) => {\r\n    try {\r\n        let adminId = req.params.adminid;\r\n        let admin = await adminModel.findById(adminId);\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        admin.isDeleted = true;\r\n        await admin.save();\r\n        return res.status(202).send({ status: true, message: \"Admin Deleted\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addAdmin,\r\n    getAllAdmin,\r\n    createSuperAdmin,\r\n    adminLogin,\r\n    getAllSubadminEnums,\r\n    verifyVendor,\r\n    deleteVendor,\r\n    changeVendorPassword,\r\n    updateAdminInfo,\r\n    deleteAdminById,\r\n};\r\n","const productModel = require(\"../models/productModel\");\nconst customerModel = require(\"../models/customerModel\");\nconst vendorModel = require(\"../models/vendorModel\");\nconst orderModel = require(\"../models/orderModel\");\n\nconst getDateStrToMS = (dateStr) => {\n    dateStr.setHours(0, 0, 0, 0);\n    return dateStr.getTime();\n};\n\nconst getCurrentYear = () => {\n    var date = new Date();\n    var firstMonth = new Date(date.getFullYear(), 0, 1);\n    var lastMonth = new Date(date.getFullYear(), 12, 0);\n    return [firstMonth.getTime(), lastMonth.getTime()];\n};\n\nconst getCurrentMonth = () => {\n    var date = new Date();\n    var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n    var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n    return [firstDay.getTime(), lastDay.getTime()];\n};\n\nconst getCurrentWeek = () => {\n    var curr = new Date();\n    curr.setHours(0, 0, 0, 0);\n    var first = curr.getDate() - curr.getDay();\n    var last = first + 6;\n    var firstDay = new Date(curr.setDate(first));\n    var lastDay = new Date(curr.setDate(last));\n    console.log(firstDay);\n    console.log(lastDay);\n    return [firstDay.getTime(), lastDay.getTime()];\n};\n\nconst getDashboardData = async (req, res) => {\n    try {\n        let products = await productModel.find({ isDeleted: false }).populate(\"vendor_id\");\n        let productCount = 0;\n        let customerCount = 0;\n        let vendorCount = 0;\n        let orderCount = 0;\n        let todayOrderCount = 0;\n        let thisWeakOrderCount = 0;\n        let thisMonthOrderCount = 0;\n        let thisYearOrderCount = 0;\n        let thisYearSale = 0;\n        let thisMonthSale = 0;\n        let thisWeekSale = 0;\n        let overAllSale = 0;\n        let todaySale = 0;\n        for (let x of products) {\n            if (x.vendor_id.isActive === \"Active\") {\n                productCount++;\n            }\n        }\n        let customer = await customerModel.find({ isDeleted: false });\n        customerCount += customer.length;\n        let vendors = await vendorModel.find({ isActive: \"Active\" });\n        vendorCount += vendors.length;\n\n        let todayMS = getDateStrToMS(new Date());\n\n        let orders = await orderModel.find().populate(\"order_status_id\");\n        for (let x of orders) {\n            console.log(x);\n            if (getDateStrToMS(x.order_date) === todayMS) {\n                todayOrderCount++;\n                if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                    todaySale += x.grand_total;\n                }\n            }\n            if (getDateStrToMS(x.order_date) >= getCurrentWeek()[0] && getDateStrToMS(x.order_date) <= getCurrentWeek()[1]) {\n                thisWeakOrderCount++;\n                if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                    thisWeekSale += x.grand_total;\n                }\n            }\n            if (getDateStrToMS(x.order_date) >= getCurrentMonth()[0] && getDateStrToMS(x.order_date) <= getCurrentMonth()[1]) {\n                thisMonthOrderCount++;\n                if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                    thisMonthSale += x.grand_total;\n                }\n            }\n            if (getDateStrToMS(x.order_date) >= getCurrentYear()[0] && getDateStrToMS(x.order_date) <= getCurrentYear()[1]) {\n                thisYearOrderCount++;\n                if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                    thisYearSale += x.grand_total;\n                }\n            }\n            if (x.order_status_id.status !== \"PENDING\" && x.order_status_id.status !== \"CANCELLED\") {\n                overAllSale += x.grand_total;\n            }\n            orderCount++;\n        }\n\n        let data = {\n            productCount,\n            customerCount,\n            vendorCount,\n            todayOrderCount,\n            thisWeakOrderCount,\n            thisMonthOrderCount,\n            thisYearOrderCount,\n            thisYearSale,\n            thisMonthSale,\n            thisWeekSale,\n            todaySale,\n            overAllSale,\n            overallOrder: orderCount,\n        };\n        return res.status(200).send({ status: true, data: { ...data }, message: \"Dashboard data fetched\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nmodule.exports = { getDashboardData };\n","const brandModel = require(\"../models/brandModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst { uploadFile } = require(\"./imageController\");\r\n// ADD BRAND DETAILS\r\nconst addBrand = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let { brand_name, vendor_id, brandLogo } = data;\r\n        if (!isValid(brand_name)) {\r\n            return res.status(400).send({ status: false, message: \"Brand Name is required\" });\r\n        }\r\n\r\n        let brand = await brandModel.findOne({\r\n            brand_name: brand_name,\r\n        });\r\n        if (brand) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"This category is already exists, please enter a new category\",\r\n            });\r\n        }\r\n        let vendor = await vendorModel.findOne({ vendor_unique_id: vendor_id });\r\n        let logoUrl = null;\r\n        if (req.files) {\r\n            logoUrl = await uploadFile(req.files.brandLogo);\r\n        } else {\r\n            logoUrl = brandLogo;\r\n        }\r\n        let brandData = {\r\n            brand_name: brand_name,\r\n            vendor_id: vendor,\r\n            brandLogo: logoUrl,\r\n        };\r\n\r\n        let newBrand = await brandModel.create(brandData);\r\n        vendor.brand_id.push(newBrand);\r\n        await vendor.save();\r\n\r\n        return res.status(201).send({ status: true, message: \"success\", data: newBrand });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BRANDS\r\nconst getAllBrands = async (req, res) => {\r\n    try {\r\n        let brands = null;\r\n        if (req.userModel === \"VENDOR\") {\r\n            brands = await brandModel.find({ isDeleted: false, vendor_id: req.userId }).populate(\"vendor_id\");\r\n        } else {\r\n            brands = await brandModel.find({ isDeleted: false }).populate(\"vendor_id\");\r\n        }\r\n        return res.status(200).send({ status: true, data: brands });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllBrandByVendor = async (req, res) => {\r\n    try {\r\n        if (req.userModel === \"VENDOR\") {\r\n            let vendor = await vendorModel.findOne({ vendor_unique_id: req.params.vendorId }).populate(\"brand_id\");\r\n            if (!vendor) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Vendor Not Found\",\r\n                });\r\n            }\r\n            return res.status(200).send({ status: true, data: vendor.brand_id });\r\n        } else {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Bad Request\",\r\n            });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst verifyBrandById = async (req, res) => {\r\n    try {\r\n        let brandId = req.params.brandId;\r\n        let brandStatus = req.body.brandStatus;\r\n        if (req.userModel === \"Super Admin\" || req.userModel === \"ADMIN\") {\r\n            let brand = await brandModel.findById(brandId);\r\n            if (!brand) {\r\n                return res.status(400).send({ status: false, data: \"Bad request\" });\r\n            }\r\n            brand.brandStatus = brandStatus;\r\n            await brand.save();\r\n            return res.status(202).send({ status: true, data: \"Brand status change successfully\" });\r\n        } else {\r\n            return res.status(400).send({ status: false, data: \"Bad request\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { addBrand, getAllBrands, getAllBrandByVendor, verifyBrandById };\r\n","const businessModel = require(\"../models/businessModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst { uploadFile, uploadImage } = require(\"./imageController\");\r\nconst bannerModel = require(\"../models/bannerModel\");\r\n\r\n// ADD BUSINESS DETAILS\r\nconst addBusinessInfo = async (req, res) => {\r\n    try {\r\n        let { bName, bEmail, bNumber } = req.body;\r\n\r\n        if (!bName || !bEmail || !bNumber) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let businessData = {\r\n            business_name: bName,\r\n            contactNo: bNumber,\r\n            contactEmail: bEmail,\r\n        };\r\n        console.log(businessData);\r\n        let businessExists = await businessModel.find();\r\n        console.log(businessExists);\r\n        if (businessExists.length > 0) {\r\n            businessExists[0].business_name = bName;\r\n            businessExists[0].contactNo = bNumber;\r\n            businessExists[0].contactEmail = bEmail;\r\n            await businessExists[0].save();\r\n        } else {\r\n            await businessModel.create(businessData);\r\n        }\r\n        return res.status(201).send({ status: true, message: \"Success\", data: \"business\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst addBusinessGST = async (req, res) => {\r\n    try {\r\n        let { gsts } = req.body;\r\n        if (!gsts || gsts.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"Add GST\" });\r\n        }\r\n\r\n        let businessExists = await businessModel.find();\r\n        if (businessExists.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"Add business Name and other fields then add GST\" });\r\n        }\r\n        businessExists[0].gsts = gsts;\r\n        businessExists[0].defaultGST = {};\r\n        await businessExists[0].save();\r\n        return res.status(201).send({ status: true, message: \"GST updated to business\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst addBusinessFiles = async (req, res) => {\r\n    try {\r\n        let { bLogo, bInvLogo, bPolicy, bTC } = req.files;\r\n        let business = await businessModel.find();\r\n        if (bLogo) {\r\n            business[0].business_Logo = await uploadFile(bLogo);\r\n        }\r\n        if (bInvLogo) {\r\n            business[0].invoiceLogo = await uploadFile(bInvLogo);\r\n        }\r\n        if (bPolicy) {\r\n            business[0].privacyPolicy = await uploadFile(bPolicy);\r\n        }\r\n        if (bTC) {\r\n            business[0].iAgree = await uploadFile(bTC);\r\n        }\r\n        await business[0].save();\r\n        return res.status(201).send({ status: true, message: \"Success\", data: \"business\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getBusinessInfo = async (req, res) => {\r\n    try {\r\n        let business = await businessModel.find();\r\n        if (business.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"No record available\" });\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Record fetched...\", data: business[0] });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst setDefaultGst = async (req, res) => {\r\n    try {\r\n        let { gst } = req.body;\r\n        let business = await businessModel.find();\r\n        if (business.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"No record available\" });\r\n        }\r\n\r\n        for (let gstd of business[0].gsts) {\r\n            console.log(gstd);\r\n            if (gstd.gstNo === gst) {\r\n                business[0].defaultGST.gstNo = gstd.gstNo;\r\n                business[0].defaultGST.pickupAddress = gstd.pickupAddress;\r\n                business[0].defaultGST.stateCode = gstd.stateCode;\r\n            }\r\n        }\r\n        await business[0].save();\r\n        console.log(req.body);\r\n        return res.status(200).send({ status: true, message: \"Default gst updated...\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst saveSocialMedia = async (req, res) => {\r\n    try {\r\n        let { facebook, instagram, twitter, youtube, linkedin } = req.body;\r\n        let business = await businessModel.find();\r\n        if (business.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"No record available\" });\r\n        }\r\n        if (facebook) {\r\n            business[0].socialMedia.facebook = facebook;\r\n        }\r\n        if (instagram) {\r\n            business[0].socialMedia.instagram = instagram;\r\n        }\r\n        if (twitter) {\r\n            business[0].socialMedia.twitter = twitter;\r\n        }\r\n        if (youtube) {\r\n            business[0].socialMedia.youtube = youtube;\r\n        }\r\n        if (linkedin) {\r\n            business[0].socialMedia.linkedin = linkedin;\r\n        }\r\n        await business[0].save();\r\n        return res.status(200).send({ status: true, message: \"Social media links added\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst bannerForClientPage = async (req, res) => {\r\n    try {\r\n        let { images } = req.files;\r\n        let { type } = req.body;\r\n        if (images && type) {\r\n            if (type === \"MULTIPLE\") {\r\n                for await (let x of images) {\r\n                    let url = (await uploadImage(x)).imageURL;\r\n                    await bannerModel.create({ bannerUrl: url, type: \"MULTIPLE\" });\r\n                }\r\n            } else if (type === \"SINGLE\") {\r\n                let url = (await uploadImage(images)).imageURL;\r\n                await bannerModel.create({ bannerUrl: url, type: \"SINGLE\" });\r\n            }\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Banner added\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getBannerForClientPage = async (req, res) => {\r\n    try {\r\n        let data = await bannerModel.find();\r\n        return res.status(200).send({ status: true, data: data, message: \"Banner Images fetched\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst bannerDeleteById = async (req, res) => {\r\n    try {\r\n        let bannerId = req.params.bannerId;\r\n        await bannerModel.findByIdAndDelete(bannerId);\r\n        return res.status(200).send({ status: true, message: \"Banner deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addBusinessInfo,\r\n    addBusinessGST,\r\n    getBusinessInfo,\r\n    addBusinessFiles,\r\n    setDefaultGst,\r\n    saveSocialMedia,\r\n    bannerForClientPage,\r\n    getBannerForClientPage,\r\n    bannerDeleteById\r\n};\r\n","const cancelledReasonModel = require(\"../models/cancelledReasonModel\");\r\nconst questionModel = require(\"../models/questionModel\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// CANCEL ORDER BY ORDER ID\r\nconst addCancelledReason = async (req, res) => {\r\n  try {\r\n    \r\n    let data = req.body;\r\n\r\n    let { questions, customerAnswer } = data;\r\n\r\n    let cancelledReasonData = {\r\n      questions,\r\n      customerAnswer,\r\n    };\r\n\r\n    let newCancelledReason = await cancelledReasonModel.create(\r\n      cancelledReasonData\r\n    );\r\n\r\n    return res\r\n      .status(201)\r\n      .send({ status: true, message: \"Success\", data: newCancelledReason });\r\n  } catch (error) {\r\n    return res.status(500).send({ status: false, message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { addCancelledReason }","const { isValidObjectId } = require(\"mongoose\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst colorModel = require(\"../models/colorModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\n\r\n// ADD TO CART\r\nconst addToCart = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let { product_id, qty, lotSize, colorId } = req.body;\r\n        // Find the cart for the customer\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer ID\" });\r\n        }\r\n        if (!isValidObjectId(colorId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Color ID\" });\r\n        }\r\n        let cart = await cartModel.findOne({ customer_id: customerId });\r\n        let customer = await customerModel.findById(customerId);\r\n        let color = await colorModel.findById(colorId);\r\n\r\n        let isProductExists = await productModel.findOne({\r\n            _id: product_id,\r\n            status: \"Approved\",\r\n        });\r\n\r\n        if (!isProductExists) {\r\n            return res.status(404).send({ status: false, message: \"Product not found\" });\r\n        }\r\n\r\n        let data = {\r\n            product_id: product_id,\r\n            qty: Number(qty),\r\n            lotSize: lotSize,\r\n            color: {\r\n                colorName: color.colorName,\r\n                colorHex: color.colorHex,\r\n            },\r\n        };\r\n        if (!cart) {\r\n            return res.status(400).send({ status: false, message: \"Server Error\" });\r\n        } else {\r\n            data.addedAt = new Date().toLocaleString();\r\n            cart.products.push(data);\r\n        }\r\n        await cart.save();\r\n\r\n        let dataX = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n            cartLength: cart.products.length,\r\n        };\r\n\r\n        res.status(201).send({ status: true, message: \"Cart updated successfully\", data: dataX });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst priceCal = (price, margin, gst) => {\r\n    let marginAmt = Number(price) + (Number(price) * Number(margin)) / 100;\r\n    let gstAmt = (Number(marginAmt) * Number(gst)) / 100;\r\n    return (gstAmt + marginAmt).toFixed(2);\r\n};\r\nconst totalPriceCalc = (products) => {\r\n    let totalPrice = 0;\r\n    products.forEach((element) => {\r\n        let { seller_price, margin, sellingGST } = element.product_id;\r\n        totalPrice += Number(element.qty) * Number(priceCal(seller_price, margin, sellingGST));\r\n    });\r\n    return totalPrice.toFixed(2);\r\n};\r\n\r\nconst qtyIncreaseDecrease = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let index = req.params.index;\r\n        let qty = req.params.qty;\r\n        let cart = await cartModel.findOne({ customer_id: customerId }).populate(\"products.product_id\");\r\n        if (!cart) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        if (cart.products.length > 0) {\r\n            cart.products[index].qty = qty;\r\n            let cartAmt_current = totalPriceCalc(cart.products);\r\n            console.log(cartAmt_current);\r\n            if (cart.currentCoupon && cartAmt_current < cart.currentCoupon.minOrderAmt) {\r\n                console.log(\"hell\");\r\n                cart.currentCoupon = undefined;\r\n            }\r\n            await cart.save();\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        return res.status(201).json({ message: \"Quantity updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst removeFromCart = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let index = req.params.index;\r\n        let cart = await cartModel.findOne({ customer_id: customerId });\r\n\r\n        if (!cart) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (cart.products.length > 0) {\r\n            let arr = cart.products;\r\n            arr.splice(index, 1);\r\n            cart.products = arr;\r\n            await cart.save();\r\n        }\r\n        res.status(201).json({ message: \"Product removed successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL CARTS\r\nconst getAllAbandentCarts = async (req, res) => {\r\n    try {\r\n        let carts = await cartModel.find({ products: { $gte: [{ $size: 0 }] } }).populate([\"customer_id\", { path: \"products.product_id\", model: \"Product\" }]);\r\n        return res.status(200).send({ status: true, data: carts });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET CART BY CUSTOMER ID\r\nconst getCartByCustomerId = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let cart = await cartModel.findOne({ customer_id: customerId }).populate({ path: \"products.product_id\", model: \"Product\", populate: { path: \"brandId\", model: \"Brand\" } });\r\n\r\n        if (!cart) {\r\n            return res.status(404).send({ status: false, message: \"No cart found with this customer\" });\r\n        }\r\n        let customer = await customerModel.findById(customerId);\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n            cartLength: cart.products.length,\r\n        };\r\n        return res.status(200).send({ status: true, data: cart, customerData: data });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addToCart,\r\n    getAllAbandentCarts,\r\n    getCartByCustomerId,\r\n    removeFromCart,\r\n    qtyIncreaseDecrease,\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nconst subcategoryModel = require(\"../models/subcategoryModel\");\r\nconst productModel = require(\"../models/productModel\");\r\n\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// ADD CATEGORY\r\nconst addCategory = async (req, res) => {\r\n   try {\r\n      let data = req.body;\r\n      let { category_name, subCategory } = data;\r\n\r\n      if (!isValid(category_name)) {\r\n         return res\r\n            .status(400)\r\n            .send({ status: false, message: \"category is required\" });\r\n      }\r\n\r\n      let category = await categoryModel.findOne({\r\n         category_name: category_name,\r\n      });\r\n\r\n      if (category) {\r\n         return res.status(400).send({\r\n            status: false,\r\n            message:\r\n               \"This category is already exists, please enter a new category\",\r\n         });\r\n      }\r\n      let subCategories = await subcategoryModel.insertMany(subCategory);\r\n\r\n      let categoryData = {\r\n         category_name: category_name,\r\n         sub_category: subCategories,\r\n      };\r\n\r\n      let newCategory = await categoryModel.create(categoryData);\r\n\r\n      return res\r\n         .status(201)\r\n         .send({ status: true, message: \"success\", data: newCategory });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\n// GET ALL CATEGORIES\r\nconst getAllCategories = async (req, res) => {\r\n   try {\r\n      let categories = await categoryModel\r\n         .find({ isDeleted: false })\r\n         .populate(\"sub_category\");\r\n      return res.status(200).send({ status: true, data: categories });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\n// GET CATEGORY BY CATEGORY ID\r\nconst getCategoryById = async (req, res) => {\r\n   try {\r\n      let categoryId = req.params.categoryId;\r\n      if (!isValidObjectId(categoryId)) {\r\n         return res\r\n            .status(400)\r\n            .send({ status: false, message: \"Invalid categoryId\" });\r\n      }\r\n\r\n      let category = await categoryModel.findOne({\r\n         _id: categoryId,\r\n         isDeleted: false,\r\n      });\r\n\r\n      if (!category) {\r\n         return res\r\n            .status(404)\r\n            .send({ status: false, message: \"Category not found\" });\r\n      }\r\n\r\n      return res\r\n         .status(200)\r\n         .send({ status: true, message: \"success\", data: category });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\n// UPDATE CATEGORY BY CATEGORY ID\r\nconst updateCategoryById = async (req, res) => {\r\n   try {\r\n      let categoryId = req.params.categoryId;\r\n\r\n      if (!isValidObjectId(categoryId)) {\r\n         return res\r\n            .status(400)\r\n            .send({ status: false, message: \"invalid category id\" });\r\n      }\r\n\r\n      let category = await categoryModel\r\n         .findOne({ _id: categoryId })\r\n         .populate(\"sub_category\");\r\n\r\n      if (!category) {\r\n         return res\r\n            .status(404)\r\n            .send({ status: false, message: \"Category not found\" });\r\n      }\r\n      let { category_name, subCategory } = req.body;\r\n\r\n      console.log(subCategory, \"sub category1\");\r\n      console.log(category.sub_category, \"sub category2\");\r\n      category.sub_category.forEach(async (el) => {\r\n         let isFound = false;\r\n         subCategory.forEach((innerEl) => {\r\n            if (innerEl.hasOwnProperty(\"_id\")) {\r\n               if (innerEl._id === el._id.toHexString()) {\r\n                  isFound = true;\r\n               }\r\n            }\r\n         });\r\n         if (!isFound) {\r\n            console.log(el._id);\r\n            await subcategoryModel.findOneAndUpdate(\r\n               { _id: el._id, isDeleted: false },\r\n               { isDeleted: true, deletedAt: Date.now() },\r\n               { new: true }\r\n            );\r\n         }\r\n      });\r\n      let subCategoryCreated = [];\r\n      for (const objs of subCategory) {\r\n         if (!objs.hasOwnProperty(\"_id\")) {\r\n            let xId = await subcategoryModel.create(objs);\r\n            subCategoryCreated.push(xId);\r\n         } else {\r\n            subCategoryCreated.push(objs);\r\n         }\r\n      }\r\n\r\n      category.category_name = category_name;\r\n      category.sub_category = subCategoryCreated;\r\n\r\n      console.log(subCategoryCreated, \"crate arr\");\r\n      await category.save();\r\n      return res\r\n         .status(200)\r\n         .send({\r\n            status: true,\r\n            message: \"success\",\r\n            data: \"Category updated successfully\",\r\n         });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\n// DELETE CATEGORY BY CATEGORY ID\r\nconst deleteCategoryById = async (req, res) => {\r\n   try {\r\n      let categoryId = req.params.categoryId;\r\n      if (!isValidObjectId(categoryId)) {\r\n         return res\r\n            .status(400)\r\n            .send({ status: false, message: \"Invalid category id\" });\r\n      }\r\n\r\n      let category = await categoryModel.findOne({ _id: categoryId });\r\n\r\n      if (!category) {\r\n         return res\r\n            .status(404)\r\n            .send({ status: false, message: \"Category not found\" });\r\n      }\r\n\r\n      let deleteCategory = await categoryModel.findOneAndUpdate(\r\n         {\r\n            _id: categoryId,\r\n            isDeleted: false,\r\n         },\r\n         {\r\n            isDeleted: true,\r\n            deletedAt: new Date(),\r\n         },\r\n         { new: true }\r\n      );\r\n\r\n      if (!deleteCategory) {\r\n         return res.status(404).send({\r\n            status: false,\r\n            message: \"category not found or already deletec\",\r\n         });\r\n      }\r\n\r\n      return res.status(200).send({ status: true, message: \"success\" });\r\n   } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n   }\r\n};\r\n\r\nmodule.exports = {\r\n   addCategory,\r\n   getAllCategories,\r\n   getCategoryById,\r\n   updateCategoryById,\r\n   deleteCategoryById,\r\n};\r\n","const colorModel = require('../models/colorModel');\r\nconst addNewColor = async (req, res) => {\r\n    try {\r\n        let {colorName, colorHex} = req.body;\r\n        if (colorName === \"\") {\r\n            return res\r\n                .status(400)\r\n                .send({message: \"Color Name is required\", status: false});\r\n        }\r\n        if (colorHex === \"\") {\r\n            return res\r\n                .status(400)\r\n                .send({message: \"Color Hex is required\", status: false});\r\n        }\r\n\r\n        let colors = await colorModel.find({\r\n            $or: [{colorName: colorName}, {colorHex: colorHex}],\r\n        });\r\n\r\n        if(colors.length > 0) {\r\n            return res.status(400).send({\r\n                message: \"This color is already exists\",\r\n                status: false,\r\n            });\r\n        }\r\n        await colorModel.create({colorName: colorName, colorHex: colorHex});\r\n        return res.status(201).send({status: true, message: 'Color added successfully'});\r\n    } catch (error) {\r\n        return res.status(500).send({status: false, message: error.message});\r\n    }\r\n}\r\n\r\nconst deleteColorById = async (req, res) => {\r\n    try {\r\n        let colorId = req.params.colorId;\r\n        let color = await colorModel.findById(colorId);\r\n        if (!color) {\r\n            return res.status(400).send({status: false, message: \"Bad Request\"});\r\n        }\r\n        color.isDeleted = true;\r\n        await color.save();\r\n        return res.status(202).send({status: true, message: 'Color deleted successfully'});\r\n    } catch (error) {\r\n        return res.status(500).send({status: false, message: error.message});\r\n    }\r\n}\r\n\r\nconst getAllColor = async (req, res) => {\r\n    try {\r\n        let colors = await colorModel.find({isDeleted:false});\r\n        return res.status(200).send({status: true, message: 'Color fetched successfully', data: colors});\r\n    } catch (error) {\r\n        return res.status(500).send({status: false, message: error.message});\r\n    }\r\n}\r\n\r\nmodule.exports = {addNewColor, deleteColorById, getAllColor}","const couponCodeModel = require(\"../models/couponCodeModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst { isExpiryCoupon } = require(\"../utils/couponExpireUtil\");\r\n\r\n// const isExpiryCoupon = (validTill) => {\r\n//     let day = validTill.getDate();\r\n//     let month = validTill.getMonth() + 1;\r\n//     let year = validTill.getFullYear();\r\n//     let expiryDateMS = new Date(`${year}-${month < 10 ? \"0\" + month : month}-${day < 10 ? \"0\" + day : day}`).getTime() / 1000;\r\n\r\n//     let now = Date.now();\r\n//     // let date = new Date(now + (5.5 * (3600 * 1000))); // Deployment time cases for +5:30 GMT\r\n//     let date = new Date();\r\n//     let dateStr = `${date.getFullYear()}-${date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1}-${date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate()}`;\r\n//     let currentDateMS = new Date(dateStr).getTime() / 1000;\r\n\r\n//     return currentDateMS <= expiryDateMS ? false : true;\r\n// };\r\n\r\nconst generateCoupon = async (req, res) => {\r\n    try {\r\n        let { couponCode, validTill, maxUsers, maxDiscPrice, discountType, discountAmt, minOrderAmt } = req.body;\r\n        if (!couponCode || couponCode === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Coupon code required\" });\r\n        }\r\n        if (!validTill || validTill === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Coupon expiry date required\" });\r\n        }\r\n        if (!maxUsers || Number(maxUsers) === 0) {\r\n            return res.status(400).send({ status: false, message: \"Coupon uses limit is required\" });\r\n        }\r\n\r\n        if (!discountAmt || Number(discountAmt) === 0) {\r\n            return res.status(400).send({ status: false, message: \"Coupon discount amount is required\" });\r\n        }\r\n        if (!discountType || discountType === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Coupon discount type is required\" });\r\n        }\r\n        if (!minOrderAmt || minOrderAmt === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Minimum order is required\" });\r\n        }\r\n        if (discountType === \"Percentage\") {\r\n            if (!maxDiscPrice || Number(maxDiscPrice) === 0) {\r\n                return res.status(400).send({ status: false, message: \"Coupon Maximum discount price is required\" });\r\n            }\r\n        }\r\n        let coupon = await couponCodeModel.findOne({ couponCode: couponCode, isDeleted: false });\r\n        if (coupon) {\r\n            return res.status(200).send({ status: false, message: \"This coupon code is already created\" });\r\n        }\r\n        let newDate = new Date(validTill);\r\n        let createData = {\r\n            couponCode,\r\n            validTill: newDate,\r\n            maxUsers,\r\n            maxDiscPrice,\r\n            discountType,\r\n            discountAmt,\r\n            minOrderAmt,\r\n        };\r\n        if (discountType === \"PRICE\") {\r\n            createData.maxDiscPrice = discountAmt;\r\n        }\r\n        let createdCoupon = await couponCodeModel.create(createData);\r\n        res.status(201).send({ status: true, message: \"Coupon created successfully...\", data: createdCoupon });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst applyCoupon = async (req, res) => {\r\n    try {\r\n        let customer_id = req.params.customerid;\r\n        let { couponCode, orderAmount } = req.body;\r\n        if (!couponCode || couponCode === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Coupon id required\" });\r\n        }\r\n        if (!orderAmount || orderAmount === \"\") {\r\n            return res.status(400).send({ status: false, message: \"Order Amount required\" });\r\n        }\r\n        if (!isValidObjectId(customer_id)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Request\" });\r\n        }\r\n        let customer = await customerModel.findById(customer_id).populate(\"cart_id\");\r\n        if (!customer) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let coupon = await couponCodeModel.findOne({ couponCode: couponCode, isDeleted: false });\r\n        if (!coupon) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Coupon Code\" });\r\n        }\r\n        if (coupon.isExpired) {\r\n            return res.status(200).send({ status: false, message: \"Coupon code expired\" });\r\n        }\r\n        if (coupon.isUsed) {\r\n            return res.status(200).send({ status: false, message: \"Coupon code uses has exceed to its maximum limit\" });\r\n        }\r\n        if (coupon.minOrderAmt > orderAmount) {\r\n            return res.status(200).send({ status: false, message: `This coupon is applicable for Minimum order amount ${coupon.minOrderAmt}` });\r\n        }\r\n\r\n        let day = coupon.validTill.getDate();\r\n        let month = coupon.validTill.getMonth() + 1;\r\n        let year = coupon.validTill.getFullYear();\r\n        let expiryDateMS = new Date(`${year}-${month < 10 ? \"0\" + month : month}-${day < 10 ? \"0\" + day : day}`).getTime() / 1000;\r\n\r\n        let now = Date.now();\r\n        // let date = new Date(now + (5.5 * (3600 * 1000))); // Deployment time cases for +5:30 GMT\r\n        let date = new Date();\r\n        let dateStr = `${date.getFullYear()}-${date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1}-${date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate()}`;\r\n        let currentDateMS = new Date(dateStr).getTime() / 1000;\r\n\r\n        if (currentDateMS <= expiryDateMS) {\r\n            if (coupon.customer_id.includes(customer_id)) {\r\n                return res.status(200).send({ status: false, message: \"Coupon Already applied\" });\r\n            } else {\r\n                if (coupon.customer_id.length >= coupon.maxUsers && coupon.isUsed === false) {\r\n                    coupon.isUsed = true;\r\n                    await coupon.save();\r\n                    return res.status(200).send({ status: false, message: \"Coupon code uses has exceed to its maximum limit\" });\r\n                }\r\n\r\n                // coupon.customer_id.push(customer_id);\r\n                // if (coupon.customer_id.length === coupon.maxUsers) {\r\n                //     coupon.isUsed = true;\r\n                // }\r\n                // await coupon.save();\r\n                // let couponData = {\r\n                //     couponCode: coupon.couponCode,\r\n                //     minOrderAmt: coupon.minOrderAmt,\r\n                //     discountAmt: coupon.discountAmt,\r\n                // };\r\n                // customer.cart_id.currentCoupon = couponData;\r\n                // await customer.cart_id.save();\r\n                return res.status(202).send({\r\n                    status: true,\r\n                    data: coupon.discountAmt,\r\n                    message: \"Coupon applied successfully...\",\r\n                });\r\n            }\r\n        } else {\r\n            coupon.isExpired = true;\r\n            await coupon.save();\r\n            return res.status(200).send({ status: false, message: \"Coupon code expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllCoupons = async (req, res) => {\r\n    try {\r\n        let coupons = await couponCodeModel.find({ isDeleted: false }).sort({ createdAt: -1 }).populate(\"customer_id\");\r\n        for (let coupon of coupons) {\r\n            if (!coupon.isExpired) {\r\n                if (isExpiryCoupon(coupon.validTill)) {\r\n                    coupon.isExpired = true;\r\n                    await coupon.save();\r\n                }\r\n            }\r\n        }\r\n        res.status(200).send({ status: true, message: \"All Coupons fetched successfully...\", data: coupons });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst deleteCoupon = async (req, res) => {\r\n    try {\r\n        let couponId = req.params.couponid;\r\n        let coupon = await couponCodeModel.findById(couponId);\r\n        if (!coupon) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        coupon.isDeleted = true;\r\n        await coupon.save();\r\n        return res.status(202).send({ status: true, message: \"Coupon deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { generateCoupon, applyCoupon, getAllCoupons, deleteCoupon };\r\n","const { isValidObjectId } = require(\"mongoose\");\r\nconst customerAddressModel = require(\"../models/customerAddressModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst { isValidRequestBody, isValid } = require(\"../utils/utils\");\r\nconst { stateAndCode } = require(\"../utils/stateNameAndCode\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst bcrypt = require(\"bcrypt\");\r\n// ADD ADDRESS\r\nconst addCustomerInformation = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let customerId = req.params.customerid;\r\n        let { name, alternate_phone, gstNo, email, pincode, password, address, state, city } = data;\r\n\r\n        if (!isValid(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (!state || !name || !pincode || !city || !password || !address) {\r\n            return res.status(400).send({ status: false, message: \"Please provide all required fields\" });\r\n        }\r\n        let addressData = {\r\n            customerId,\r\n            address,\r\n            state,\r\n            pincode,\r\n            city,\r\n        };\r\n        if (Object.keys(stateAndCode).includes(state)) {\r\n            addressData.stateCode = stateAndCode[state];\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Invalid State\" });\r\n        }\r\n\r\n        let customer = await customerModel.findOne({ _id: customerId, isDeleted: false, isBlocked: false });\r\n        if (!customer) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        customer.name = name;\r\n        customer.password = hashedPassword;\r\n        if (gstNo) {\r\n            customer.gstNo = gstNo;\r\n        }\r\n        if (alternate_phone) {\r\n            customer.alternate_phone = alternate_phone;\r\n        }\r\n        if (email) {\r\n            customer.email = email;\r\n        }\r\n\r\n        if (customer.isActivated === true) {\r\n            return res.status(400).send({ status: false, message: \"Account is already active\" });\r\n        }\r\n\r\n        let cart = await cartModel.create({ customer_id: customer._id });\r\n        if (!cart) {\r\n            return res.status(500).send({ status: false, message: \"Internal Server Error\" });\r\n        }\r\n        customer.cart_id = cart;\r\n        customer.isActivated = true;\r\n        addressData.customerId = customer;\r\n        let newAddress = await customerAddressModel.create(addressData);\r\n        customer.defaultAddress = newAddress._id;\r\n        await customer.save();\r\n        return res.status(201).send({ status: true, message: \"Successfully registered\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ADDRESSES BY CUSTOMER ID\r\nconst getAllAddresses = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        if (!customerId) {\r\n            return res.status(400).send({ status: false, message: \"Customer id is required in params\" });\r\n        }\r\n        let address = await customerAddressModel.find({ customerId: customerId, isDeleted: false });\r\n        return res.status(200).send({ status: true, data: address });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE ADDRESS BY CUSTOMER ID\r\nconst updateAddressByCustomerId = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        if (!customerId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Please provide the customerId in params\",\r\n            });\r\n        }\r\n        let customer = await customerAddressModel.findOne({\r\n            customerId: customerId,\r\n        });\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n\r\n        let body = req.body;\r\n\r\n        if (!isValidRequestBody(body)) {\r\n            return res.status(400).send({ status: false, message: \"Please enter data in body\" });\r\n        }\r\n\r\n        if (\"address\" in body) {\r\n            for (let i = 0; i < customer.address.length; i++) {\r\n                customer.address[i] = body.address[i];\r\n            }\r\n        }\r\n        await customer.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Address updated successfully\",\r\n            data: customer,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE CUSTOMER ADDRESS BY CUSTOMER ID\r\nconst deleteAddressById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let addressId = req.params.addressId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        if (!isValidObjectId(addressId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid address id\" });\r\n        }\r\n        let address = await customerAddressModel.findById(addressId);\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"customer not found with this id\" });\r\n        }\r\n        if (!address) {\r\n            return res.status(404).send({ status: false, message: \"address not found with this id\" });\r\n        }\r\n        address.isDeleted = true;\r\n        await address.save();\r\n        if (customer.defaultAddress.toString() === addressId) {\r\n            customer.defaultAddress = undefined;\r\n            customer.save();\r\n        }\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n        if (customer.gstNo) data.gstNo = customer.gstNo;\r\n        if (customer.defaultAddress) data.defaultAddressId = customer.defaultAddress._id.toString();\r\n        return res.status(200).send({ status: true, data: data, message: \"Address deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst addAddress = async (req, res) => {\r\n    try {\r\n        let { address, state, city, pincode, stateCode } = req.body;\r\n        let customerId = req.params.customerId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (!address || !state || !city || !pincode || !stateCode) {\r\n            return res.status(400).send({ status: false, message: \"All fields are requited\" });\r\n        }\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!customer) {\r\n            return res.status(400).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        let addressObj = await customerAddressModel.create({ customerId, address, state, city, pincode, stateCode });\r\n\r\n        return res.status(201).send({ status: true, message: \"Address created\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nmodule.exports = {\r\n    addCustomerInformation,\r\n    getAllAddresses,\r\n    updateAddressByCustomerId,\r\n    deleteAddressById,\r\n    addAddress,\r\n};\r\n","const customerModel = require(\"../models/customerModel\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { isValid, isValidMoblie, isValidEmail, isValidPassword } = require(\"../utils/utils\");\r\nconst { customerTokenSecretKey } = require(\"../middlewares/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst customerAddressModel = require(\"../models/customerAddressModel\");\r\nconst wishlistModel = require(\"../models/wishlistModel\");\r\n\r\nconst loginUser = async (req, res) => {\r\n    try {\r\n        let { phone, password } = req.body;\r\n\r\n        if (!phone || !password) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        let customer = await customerModel.findOne({ phone: phone, isDeleted: false }).populate(\"cart_id\");\r\n\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Account not found this mobile number, you have to register first\" });\r\n        }\r\n        let wishlist = await wishlistModel.find({ userId: customer._id });\r\n        if (customer.isBlocked) {\r\n            return res.status(403).send({ status: false, message: \"This account has been blocked, Please Contact us!\" });\r\n        }\r\n        \r\n        bcrypt.compare(password, customer.password, function (err, result) {\r\n            if (err) {\r\n                return res.status(400).send({ status: false, message: err.message });\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        function hasAccess(result) {\r\n            if (result) {\r\n                let date = Date.now();\r\n                let data = {\r\n                    name: customer.name,\r\n                    email: customer.email,\r\n                    customerId: customer._id.toString(),\r\n                    userType: \"CUSTOMER\",\r\n                    isActivated: customer.isActivated,\r\n                    phone: customer.phone,\r\n                    cartLength: customer.cart_id.products.length,\r\n                    wishlistLength: wishlist.length,\r\n                };\r\n                if (customer.profileUrl) data.photo = customer.profileUrl;\r\n                if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n                if (customer.gstNo) data.gstNo = customer.gstNo;\r\n                if (customer.defaultAddress) data.defaultAddressId = customer.defaultAddress._id.toString();\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        userId: customer._id.toString(),\r\n                        phone: customer.phone,\r\n                        userModel: \"CUSTOMER\",\r\n                        iat: issueTime,\r\n                    },\r\n                    customerTokenSecretKey,\r\n                    { expiresIn: \"24h\" }\r\n                );\r\n                data.token = token;\r\n                res.setHeader(\"Authorization\", \"Bearer \" + token);\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Login successfully\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Login denied\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL CUSTOMERS\r\nconst getAllCustomer = async (req, res) => {\r\n    try {\r\n        let customers = await customerModel.find({ isDeleted: false }).populate(\"defaultAddress\");\r\n        return res.status(200).send({ status: true, data: customers });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET CUSTOMER BY CUSTOMER ID\r\nconst getCustomerById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let customer = await customerModel.findOne({ _id: customerId });\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        return res.status(200).send({ status: true, data: customer });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE CUSTOMER BY CUSTOMER ID\r\nconst updateCustomerById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        let { name, gstNo, alternate_phone, email, password } = req.body;\r\n        if (!name && !gstNo && alternate_phone && email && password) {\r\n            return res.status(400).send({ status: false, message: \"At least one field is require to update your information\" });\r\n        }\r\n        if (name) {\r\n            customer.name = name;\r\n        }\r\n        if (gstNo) {\r\n            customer.gstNo = gstNo;\r\n        }\r\n        if (alternate_phone) {\r\n            customer.alternate_phone = alternate_phone;\r\n        }\r\n        if (email) {\r\n            customer.email = email.toLowerCase();\r\n        }\r\n        if (password) {\r\n            let hashedPassword = await bcrypt.hash(password, 10);\r\n            customer.password = hashedPassword;\r\n        }\r\n        await customer.save();\r\n\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n        if (customer.gstNo) data.gstNo = customer.gstNo;\r\n        if (customer.defaultAddress) data.defaultAddressId = customer.defaultAddress._id.toString();\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Customer updated successfully\",\r\n            data: data,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE CUSTOMER BY CUSTOMER ID\r\nconst deleteCustomerById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let customer = await customerModel.findOne({ _id: customerId });\r\n\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        customer.isDeleted = true;\r\n        // customer.isNew = true;\r\n        await customer.save();\r\n        return res.status(200).send({ status: true, message: \"Customer deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst blockCustomerById = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let customer = await customerModel.findOne({ _id: customerId });\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        customer.isBlocked = !customer.isBlocked;\r\n        await customer.save();\r\n        let message = customer.isBlocked ? \"Customer has been blocked\" : \"Customer is now Active\";\r\n        return res.status(202).send({ status: true, message: message });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst findOrdersByPhone = async (req, res) => {\r\n    try {\r\n        let { userPhone } = req.body;\r\n        let customer = await customerModel.findOne({ phone: userPhone }).populate({\r\n            path: \"orders\",\r\n            model: \"Order\",\r\n            populate: [\r\n                { path: \"vendorId\", model: \"Vendor\" },\r\n                { path: \"order_status_id\", model: \"Order_Status_Table\" },\r\n                { path: \"ordered_products\", model: \"Ordered_Product\" },\r\n            ],\r\n        });\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n        let orders = customer.orders;\r\n        return res.status(200).send({ status: true, message: \"Order fetch successfully\", data: orders });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst setDefaultAddress = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let addressId = req.params.addressId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        if (!isValidObjectId(addressId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid address id\" });\r\n        }\r\n        let address = await customerAddressModel.findById(addressId);\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!address) {\r\n            return res.status(404).send({ status: false, message: \"Address not found with this id\" });\r\n        }\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found with this id\" });\r\n        }\r\n        customer.defaultAddress = address._id;\r\n        await customer.save();\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            customerId: customer._id.toString(),\r\n            userType: \"CUSTOMER\",\r\n            isActivated: customer.isActivated,\r\n            phone: customer.phone,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n        if (customer.gstNo) data.gstNo = customer.gstNo;\r\n        if (customer.defaultAddress) data.defaultAddressId = customer.defaultAddress._id.toString();\r\n        return res.status(200).send({ status: true, data: data, message: \"Default address updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst changePassword = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let { password } = req.body;\r\n        if (!password) {\r\n            return res.status(400).send({ status: false, message: \"Password is required\" });\r\n        }\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        let customer = await customerModel.findById(customerId);\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found with this id\" });\r\n        }\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        customer.password = hashedPassword;\r\n        await customer.save();\r\n        return res.status(202).send({ status: true, message: \"Password Updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    loginUser,\r\n    getAllCustomer,\r\n    getCustomerById,\r\n    updateCustomerById,\r\n    deleteCustomerById,\r\n    blockCustomerById,\r\n    findOrdersByPhone,\r\n    setDefaultAddress,\r\n    changePassword,\r\n};\r\n","const HomepageModel = require(\"../models/HomepageModel\");\r\nconst businessModel = require(\"../models/businessModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst colorModel = require(\"../models/colorModel\");\r\nconst getDashboardData = async (req, res) => {\r\n    try {\r\n        let recommendedProduct = await HomepageModel.find().populate([\"featuredProduct\", \"newArrival\", \"bestSelling\"]);\r\n        let storeInfo = await businessModel.find();\r\n        let category = await categoryModel.find().populate(\"sub_category\");\r\n        let color = await colorModel.find();\r\n        storeInfo[0].defaultGST = undefined;\r\n        storeInfo[0].gsts = undefined;\r\n        let data = {\r\n            recommendedProduct: recommendedProduct[0],\r\n            storeInfo: storeInfo[0],\r\n            category,\r\n            color,\r\n        };\r\n        return res.status(200).send({ status: true, message: \"success\", data: data });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getProductBySlug= async (req, res) => {\r\n    try {\r\n        let slug = req.params.slug;\r\n        // console.log(slug);\r\n        let product = await productModel.findOne({slug:slug, isDeleted:false, stockStatus:'In_stock'}).populate([\"color_id\", \"categoryId\",\"brandId\",\"vendor_id\"]);\r\n        // console.log(product);\r\n        if (product) {\r\n            return res.status(200).send({ message: \"product info fetched\", data: product });\r\n        } else {\r\n            return res.status(200).send({ message: \"product info fetched\", data: null });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { getDashboardData,getProductBySlug };\r\n","const excelJs = require(\"exceljs\");\r\nconst csv2json = require(\"csvtojson\");\r\nlet csvToJsonC = require(\"convert-csv-to-json\");\r\nconst request = require(\"request\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst colorModel = require(\"../models/colorModel\");\r\nconst { uploadFile } = require(\"./imageController\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst { dateToLocalDateTime } = require(\"../utils/dateUtils\");\r\n\r\nconst checkProductIds = async (req, res, product) => {\r\n    let categoryIds = {};\r\n    let colorIds = {};\r\n    let vednorIdForx = \"\";\r\n    if (req.userModel === \"ADMIN\") {\r\n        let x = await vendorModel.findOne({ vendor_unique_id: product.vendor_id }).populate(\"brand_id\");\r\n        vednorIdForx = x._id;\r\n    }\r\n    if (Object.keys(categoryIds).length === 0) {\r\n        let x = await categoryModel.find();\r\n        for (let x1 of x) {\r\n            categoryIds[x1._id] = x1.sub_category;\r\n        }\r\n    }\r\n    if (Object.keys(colorIds).length === 0) {\r\n        let x = await colorModel.find();\r\n        for (let x1 of x) {\r\n            colorIds[x1._id] = x1._id;\r\n        }\r\n    }\r\n\r\n    if (product.brandId === \"\" || product.color_id === \"\" || product.categoryId === \"\" || product.subCatId === \"\") {\r\n        return {\r\n            status: false,\r\n            message: \"Please Provide All Dependent Ids for brand, color, category and sub category\",\r\n        };\r\n    }\r\n    if (categoryIds[product.categoryId] !== undefined) {\r\n        if (!categoryIds[product.categoryId].includes(product.subCatId)) {\r\n            return { status: false, message: \"Invalid Sub Category Id\" };\r\n        }\r\n    } else {\r\n        return { status: false, message: \"Invalid Category Id\" };\r\n    }\r\n\r\n    if (product.color_id.length > 0) {\r\n        // console.log(colorIds);\r\n        console.log(colorIds, product.color_id);\r\n        for (let x of product.color_id) {\r\n            // console.log(colorIds, x);\r\n            if (x !== \"\" && colorIds[x] === undefined) {\r\n                return { status: false, message: \"Invalid Color Id\" };\r\n            }\r\n        }\r\n    } else {\r\n        return { status: false, message: \"Color id required\" };\r\n    }\r\n    return {\r\n        status: true,\r\n        message: \"Everyhting is ok\",\r\n        vendorId: vednorIdForx,\r\n    };\r\n};\r\n\r\nconst exportIDs = async (req, res) => {\r\n    //req.userModel === 'ADMIN' || 'VENDOR'\r\n    //req.userId\r\n    try {\r\n        var workbook = new excelJs.Workbook();\r\n        var worksheet = workbook.addWorksheet(\"Brand\");\r\n        var worksheet2 = workbook.addWorksheet(\"Category & SubCategory & Colors\");\r\n\r\n        let categories = await categoryModel.find().populate(\"sub_category\");\r\n        let colors = await colorModel.find();\r\n        worksheet2.columns = [\r\n            { header: \"Category ID\", key: \"category_id\" },\r\n            { header: \"Category Name\", key: \"category_name\" },\r\n            { header: \"SubCategory ID\", key: \"subcategory_id\" },\r\n            { header: \"SubCategory Name\", key: \"subcategory_name\" },\r\n        ];\r\n        for (let cat of categories) {\r\n            Object.keys(cat[\"sub_category\"]).forEach((keys) => {\r\n                worksheet2.addRow({\r\n                    category_id: cat[\"_id\"].toString(),\r\n                    category_name: cat[\"category_name\"],\r\n                    subcategory_id: cat[\"sub_category\"][keys]._id.toString(),\r\n                    subcategory_name: cat[\"sub_category\"][keys].subcategory_name,\r\n                });\r\n            });\r\n        }\r\n        if (req.userModel === \"ADMIN\") {\r\n            let vendors = await vendorModel.find({ isActive: \"Active\", status: \"Approved\" }).populate(\"brand_id\");\r\n\r\n            worksheet.columns = [\r\n                { header: \"Vendor ID\", key: \"vendor_unique_id\" },\r\n                { header: \"Firm Name\", key: \"firmName\" },\r\n                { header: \"Brand ID\", key: \"brand_id\" },\r\n                { header: \"Brand Name\", key: \"brand_name\" },\r\n            ];\r\n\r\n            for (let singleVendor of vendors) {\r\n                Object.keys(singleVendor[\"brand_id\"]).forEach(function (key) {\r\n                    if (singleVendor.marginInPercentage > 0) {\r\n                        worksheet.addRow({\r\n                            vendor_unique_id: singleVendor[\"vendor_unique_id\"].toString(),\r\n                            firmName: singleVendor[\"firmName\"],\r\n                            brand_id: singleVendor[\"brand_id\"][key]._id.toString(),\r\n                            brand_name: singleVendor[\"brand_id\"][key].brand_name,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            let singleVendor = await vendorModel\r\n                .findById({\r\n                    _id: req.userId,\r\n                    isActive: \"Active\",\r\n                    status: \"Approved\",\r\n                })\r\n                .populate(\"brand_id\");\r\n            worksheet.columns = [\r\n                { header: \"Brand ID\", key: \"brand_id\" },\r\n                { header: \"Brand Name\", key: \"brand_name\" },\r\n            ];\r\n            Object.keys(singleVendor[\"brand_id\"]).forEach(function (key) {\r\n                worksheet.addRow({\r\n                    brand_id: singleVendor[\"brand_id\"][key]._id.toString(),\r\n                    brand_name: singleVendor[\"brand_id\"][key].brand_name,\r\n                });\r\n            });\r\n        }\r\n\r\n        worksheet.getRow(1).eachCell((cell) => {\r\n            cell.font = { bold: true };\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"F08080\" },\r\n            };\r\n        });\r\n        worksheet2.getRow(1).eachCell((cell) => {\r\n            cell.font = { bold: true };\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"9E99F7\" },\r\n            };\r\n        });\r\n        worksheet2.addRow();\r\n        worksheet2.addRow({\r\n            category_id: \"Color ID\",\r\n            category_name: \"Color Name\",\r\n        });\r\n        worksheet2.lastRow.eachCell((cell) => {\r\n            cell.font = { bold: true };\r\n            cell.pattern = \"solid\";\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"F08080\" },\r\n            };\r\n        });\r\n        for (let obj of colors) {\r\n            worksheet2.addRow({\r\n                category_id: obj._id.toString(),\r\n                category_name: obj.colorName,\r\n            });\r\n        }\r\n        worksheet.columns.forEach((column) => {\r\n            const lengths = column.values.map((v) => v.toString().length);\r\n            const maxLength = Math.max(...lengths.filter((v) => typeof v === \"number\"));\r\n            column.width = maxLength + 3;\r\n        });\r\n        worksheet2.columns.forEach((column) => {\r\n            const lengths = column.values.map((v) => v.toString().length);\r\n            const maxLength = Math.max(...lengths.filter((v) => typeof v === \"number\"));\r\n            column.width = maxLength + 3;\r\n        });\r\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n        res.setHeader(\"Content-Disposition\", `attachment; brandid.xlsx`);\r\n\r\n        return workbook.xlsx.write(res).then(() => {\r\n            res.status(200);\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst exportProductAddDemoSheet = async (req, res) => {\r\n    //req.userModel === 'ADMIN' || 'VENDOR'\r\n    try {\r\n        var workbook = new excelJs.Workbook();\r\n        var worksheet = workbook.addWorksheet(\"Add Bulk Product\");\r\n\r\n        let columnData = [\r\n            { header: \"Product Name\", key: \"product_name\" },\r\n            { header: \"SKU CODE\", key: \"skucode\" },\r\n            { header: \"HSN CODE\", key: \"hsncode\" },\r\n            { header: \"Brand ID\", key: \"brand_id\" },\r\n            { header: \"Category ID\", key: \"category_id\" },\r\n            { header: \"Sub Category ID\", key: \"subcategory_id\" },\r\n            { header: \"Color ID\", key: \"color_id\" },\r\n            { header: \"Lot Size\", key: \"lotsize\" },\r\n            { header: \"MRP\", key: \"mrp\" },\r\n            { header: \"GST\", key: \"gst\" },\r\n            { header: \"Seller Price\", key: \"seller_price\" },\r\n            { header: \"In Hand QTY\", key: \"in_hand_qty\" },\r\n            { header: \"Min Order QTY\", key: \"min_order_qty\" },\r\n            { header: \"Sole\", key: \"sole\" },\r\n            { header: \"Material\", key: \"material\" },\r\n            { header: \"Packing Type\", key: \"packing_type\" },\r\n            { header: \"Made In\", key: \"made_in\" },\r\n            { header: \"Weight\", key: \"weight\" },\r\n            { header: \"Description\", key: \"description\" },\r\n            { header: \"Thumbnail URL\", key: \"thumbnail_url\" },\r\n            { header: \"Multiple Images\", key: \"multiple_images\" },\r\n        ];\r\n        var data = {\r\n            product_name: \"Demo prouduct name\",\r\n            skucode: \"---\",\r\n            hsncode: \"---\",\r\n            brand_id: \"64b53---demo---id---747b\",\r\n            category_id: \"64b53---demo---id---747b\",\r\n            subcategory_id: \"64b53---demo---id---747b\",\r\n            color_id: \"64b53---demo---id---747b\",\r\n            lotsize: \"put multiple lot size seperat by ',' comma\",\r\n            mrp: \"100\",\r\n            gst: \"12\",\r\n            seller_price: \"00\",\r\n            in_hand_qty: \"00\",\r\n            min_order_qty: \"0\",\r\n            sole: \"--\",\r\n            material: \"--\",\r\n            packing_type: \"--\",\r\n            made_in: \"India\",\r\n            weight: \"0\",\r\n            description: \"This is demo Description\",\r\n            thumbnail_url: \"put url here\",\r\n            multiple_images: \"put multiple url seperated by ',' comma\",\r\n        };\r\n        if (req.userModel === \"ADMIN\") {\r\n            columnData.unshift({ header: \"Vendor ID\", key: \"vendor_id\" });\r\n            const newColumnData = [...columnData.slice(0, 12), { header: \"Margin\", key: \"margin\" }, { header: \"Selling GST\", key: \"sellingGST\" }, ...columnData.slice(12)];\r\n            columnData = newColumnData;\r\n            data.vendor_id = \"64b53---demo---id---747b\";\r\n            data.margin = 0;\r\n            data.sellingGST = 0;\r\n        }\r\n        worksheet.columns = columnData;\r\n        worksheet.addRow(data);\r\n        worksheet.getRow(1).eachCell((cell) => {\r\n            cell.font = { bold: true };\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"F08080\" },\r\n            };\r\n        });\r\n\r\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n        res.setHeader(\"Content-Disposition\", `attachment; brandid.xlsx`);\r\n\r\n        return workbook.xlsx.write(res).then(() => {\r\n            res.status(200);\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst csvToJson = async (req, res) => {\r\n    try {\r\n        vendorIds = {};\r\n        categoryIds = {};\r\n        colorIds = {};\r\n        let csvUrl = await uploadFile(req.files.csv);\r\n        let resJson = [];\r\n        await csv2json()\r\n            .fromStream(request.get(csvUrl))\r\n            .subscribe((json) => {\r\n                if (json[\"Product Name\"] !== \"\") {\r\n                    resJson.push(json);\r\n                }\r\n            });\r\n        let productData = {\r\n            vendor_id: \"\",\r\n            product_name: \"\",\r\n            sku_code: \"\",\r\n            hsn_code: \"\",\r\n            brandId: \"\",\r\n            color_id: \"\",\r\n            categoryId: \"\",\r\n            subCatId: \"\",\r\n            lotSizeQty: \"\",\r\n            mrp: \"\",\r\n            gst: \"\",\r\n            seller_price: \"\",\r\n            qty_in_hand: \"\",\r\n            min_order_qty: \"\",\r\n            sole: \"\",\r\n            material: \"\",\r\n            packing_type: \"\",\r\n            made_in: \"\",\r\n            weight: \"\",\r\n            description: \"\",\r\n        };\r\n        let productDataArr = [];\r\n        let vendorArr = [];\r\n        for (let Obj of resJson) {\r\n            if (Obj[\"Vendor ID\"] !== undefined) {\r\n                productData.vendor_id = Obj[\"Vendor ID\"];\r\n            }\r\n            if (Obj[\"Product Name\"] !== undefined) {\r\n                productData.product_name = Obj[\"Product Name\"];\r\n            }\r\n            if (Obj[\"SKU CODE\"] !== undefined) {\r\n                productData.sku_code = Obj[\"SKU CODE\"];\r\n            }\r\n            if (Obj[\"HSN CODE\"] !== undefined) {\r\n                productData.hsn_code = Obj[\"HSN CODE\"];\r\n            }\r\n            if (Obj[\"Brand ID\"] !== undefined) {\r\n                productData.brandId = Obj[\"Brand ID\"];\r\n            }\r\n            if (Obj[\"Category ID\"] !== undefined) {\r\n                productData.categoryId = Obj[\"Category ID\"];\r\n            }\r\n            if (Obj[\"Sub Category ID\"] !== undefined) {\r\n                productData.subCatId = Obj[\"Sub Category ID\"];\r\n            }\r\n            if (Obj[\"Color ID\"] !== undefined) {\r\n                productData.color_id = Obj[\"Color ID\"].split(\",\").flatMap((el) => {\r\n                    if (el !== \"\" && el !== \" \") {\r\n                        return el.trim();\r\n                    }\r\n                    return [];\r\n                });\r\n            }\r\n            if (Obj[\"Lot Size\"] !== undefined) {\r\n                productData.lotSizeQty = Obj[\"Lot Size\"].split(\",\").flatMap((el) => {\r\n                    if (el !== \"\" && el !== \" \") {\r\n                        return el.trim();\r\n                    }\r\n                    return [];\r\n                });\r\n            }\r\n            if (Obj[\"MRP\"] !== undefined) {\r\n                productData.mrp = Number(Obj[\"MRP\"]);\r\n            }\r\n            if (Obj[\"GST\"] !== undefined) {\r\n                productData.gst = Number(Obj[\"GST\"]);\r\n            }\r\n            if (Obj[\"Seller Price\"] !== undefined) {\r\n                productData.seller_price = Number(Obj[\"Seller Price\"]);\r\n            }\r\n            if (Obj[\"Margin\"] !== undefined) {\r\n                productData.margin = Number(Obj[\"Margin\"]);\r\n            }\r\n            if (Obj[\"Selling GST\"] !== undefined) {\r\n                productData.sellingGST = Number(Obj[\"Selling GST\"]);\r\n            }\r\n            if (Obj[\"In Hand QTY\"] !== undefined) {\r\n                productData.qty_in_hand = Number(Obj[\"In Hand QTY\"]);\r\n            }\r\n            if (Obj[\"Min Order QTY\"] !== undefined) {\r\n                productData.min_order_qty = Number(Obj[\"Min Order QTY\"]);\r\n            }\r\n            if (Obj[\"Sole\"] !== undefined) {\r\n                productData.sole = Obj[\"Sole\"];\r\n            }\r\n            if (Obj[\"Material\"] !== undefined) {\r\n                productData.material = Obj[\"Material\"];\r\n            }\r\n            if (Obj[\"Packing Type\"] !== undefined) {\r\n                productData.packing_type = Obj[\"Packing Type\"];\r\n            }\r\n            if (Obj[\"Made In\"] !== undefined) {\r\n                productData.made_in = Obj[\"Made In\"];\r\n            }\r\n            if (Obj[\"Weight\"] !== undefined) {\r\n                productData.weight = Obj[\"Weight\"];\r\n            }\r\n            if (Obj[\"Description\"] !== undefined) {\r\n                productData.description = Obj[\"Description\"];\r\n            }\r\n            if (Obj[\"Thumbnail URL\"] !== undefined) {\r\n                productData.thumbnail_pic = Obj[\"Thumbnail URL\"];\r\n            }\r\n            if (Obj[\"Multiple Images\"] !== undefined) {\r\n                productData.multiple_pics = Obj[\"Multiple Images\"].split(\",\").map((el) => el.trim());\r\n            }\r\n            if (req.userModel === \"VENDOR\") {\r\n                productData.vendor_id = req.userId;\r\n            }\r\n            let statusX = await checkProductIds(req, res, productData);\r\n            if (statusX.status) {\r\n                if (req.userModel === \"ADMIN\") {\r\n                    if (vendorArr.indexOf(statusX.vendorId) === -1) {\r\n                        vendorArr.push(statusX.vendorId);\r\n                    }\r\n                    productData.vendor_id = statusX.vendorId;\r\n                    productData.status = \"Approved\";\r\n                }\r\n            } else {\r\n                return res.status(400).send({ status: false, message: statusX.message });\r\n            }\r\n\r\n            productDataArr.push(productData);\r\n            productData = {\r\n                vendor_id: \"\",\r\n                product_name: \"\",\r\n                sku_code: \"\",\r\n                hsn_code: \"\",\r\n                brandId: \"\",\r\n                color_id: \"\",\r\n                categoryId: \"\",\r\n                subCatId: \"\",\r\n                lotSizeQty: \"\",\r\n                mrp: \"\",\r\n                gst: \"\",\r\n                seller_price: \"\",\r\n                qty_in_hand: \"\",\r\n                min_order_qty: \"\",\r\n                sole: \"\",\r\n                material: \"\",\r\n                packing_type: \"\",\r\n                made_in: \"\",\r\n                weight: \"\",\r\n                description: \"\",\r\n                thumbnail_pic: \"\",\r\n                multiple_pics: [],\r\n            };\r\n            if (req.userModel === \"ADMIN\") {\r\n                productData.margin = \"\";\r\n                productData.sellingGST = \"\";\r\n            }\r\n        }\r\n        if (req.userModel === \"ADMIN\") {\r\n            let newProductObj = await productModel.insertMany(productDataArr);\r\n            let arr = [];\r\n            for (let vdr of vendorArr) {\r\n                let x = await vendorModel.findById(vdr);\r\n                arr.push(x);\r\n            }\r\n            for (let prdct of newProductObj) {\r\n                let obj = arr.find((e) => e._id.toString() === prdct.vendor_id.toString());\r\n                if (obj) {\r\n                    obj.products.push(prdct);\r\n                }\r\n            }\r\n            for (let vdr of arr) {\r\n                await vdr.save();\r\n            }\r\n        } else {\r\n            let vendorObj = await vendorModel.findById(req.userId);\r\n            let newProductObj = await productModel.insertMany(productDataArr);\r\n            vendorObj.products.push(...newProductObj);\r\n            await vendorObj.save();\r\n        }\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Bulk Product Added Successfully\",\r\n            data: { categoryIds, colorIds, vendorIds },\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst exportOrderReport = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let orders = await orderModel\r\n            .find({ _id: { $in: data } })\r\n            .populate([\r\n                \"vendorId\",\r\n                \"payment_id\",\r\n                \"order_status_id\",\r\n                \"ordered_products\",\r\n                \"purchaseInvoice\",\r\n                \"saleInvoice\",\r\n                { path: \"CouponCode\", strictPopulate: false },\r\n                { path: \"customer_id\", model: \"Customer\", strictPopulate: false, populate: { path: \"defaultAddress\", model: \"CustomerAddress\", strictPopulate: false } },\r\n            ]);\r\n        let ordersArr = [];\r\n        let orderData = {};\r\n        let productLength = 0;\r\n\r\n        for (let order of orders) {\r\n            orderData[\"orderId\"] = order.orderId;\r\n            orderData[\"orderDate\"] = dateToLocalDateTime(order.order_date);\r\n            orderData[\"invoiceNo\"] = order.saleInvoice ? order.saleInvoice.invoiceNo : \"\";\r\n            orderData[\"invoiceDate\"] = order.saleInvoice ? dateToLocalDateTime(order.saleInvoice.invoiceDate) : \"\";\r\n            orderData[\"productsLength\"] = order.ordered_products ? order.ordered_products.products.length : \"\";\r\n            if (order.ordered_products && order.ordered_products.products.length > productLength) {\r\n                productLength = order.ordered_products.products.length;\r\n            }\r\n            if (order.ordered_products) {\r\n                for (let x1 = 0; x1 < order.ordered_products.products.length; x1++) {\r\n                    orderData[`sale_sku_code_${x1 + 1}`] = order.ordered_products.products[x1].skuCode;\r\n                    orderData[`purchase_sku_code_${x1 + 1}`] = order.ordered_products.products[x1].skuCode;\r\n                    orderData[`sale_lotSize_${x1 + 1}`] = order.ordered_products.products[x1].lotSize;\r\n                    orderData[`purchase_lotSize_${x1 + 1}`] = order.ordered_products.products[x1].lotSize;\r\n                    orderData[`sale_gst_percentage_${x1 + 1}`] = order.ordered_products.products[x1].selling_gst;\r\n                    orderData[`purchase_gst_percentage_${x1 + 1}`] = order.ordered_products.products[x1].seller_gst;\r\n                }\r\n            }\r\n            orderData[\"soldByGst\"] = order.saleInvoice ? order.saleInvoice.soldBy.gst : \"\";\r\n            orderData[\"customerName\"] = order.customer_id.name;\r\n            orderData[\"customerPhone\"] = order.customer_id.phone;\r\n            orderData[\"customerAddress\"] = order.customer_id.defaultAddress.address;\r\n            orderData[\"customerCity\"] = order.customer_id.defaultAddress.city;\r\n            orderData[\"customerState\"] = order.customer_id.defaultAddress.state;\r\n            orderData[\"customerPincode\"] = order.customer_id.defaultAddress.pincode;\r\n            orderData[\"customerGstNo\"] = order.customer_id.gstNo;\r\n            orderData[\"customerAltPhone\"] = order.customer_id.alternate_phone;\r\n            orderData[\"saleGrandTotal\"] = order.grand_total;\r\n            orderData[\"saleInvGrandTotal\"] = order.grand_total;\r\n            orderData[\"saleDiscount\"] = order.discounted_amount;\r\n            orderData[\"saleNetTotal\"] = Number(order.grand_total) - Number(order.discounted_amount);\r\n            orderData[\"saleTaxableAmt\"] = order.total;\r\n            orderData[\"saleGstType\"] = order.saleInvoice ? order.saleInvoice.gstType : \"\";\r\n            orderData[\"saleGstAmt\"] = order.GST_amount;\r\n            orderData[\"sellerName\"] = order.vendorId.representativeName;\r\n            orderData[\"sellerPhone\"] = order.vendorId.mobileNo;\r\n            orderData[\"sellerAddress\"] = order.vendorId.pickupAddress;\r\n            orderData[\"sellerCity\"] = order.vendorId.pickupCity;\r\n            orderData[\"sellerState\"] = order.vendorId.pickupState;\r\n            orderData[\"sellerPincode\"] = order.vendorId.pickupPincode;\r\n            orderData[\"sellerGstNo\"] = order.vendorId.gstNo;\r\n            orderData[\"sellerAltNo\"] = order.vendorId.altMobileNo;\r\n            orderData[\"purchaseGrandTotal\"] = order.vendorAmtInfo.grandTotal;\r\n            orderData[\"purchaseInvGrandTotal\"] = order.vendorAmtInfo.grandTotal;\r\n            orderData[\"purchaseNetTotal\"] = order.vendorAmtInfo.grandTotal;\r\n            orderData[\"purchaseTaxableAmt\"] = order.vendorAmtInfo.total;\r\n            orderData[\"purchaseGstType\"] = order.purchaseInvoice ? order.purchaseInvoice.gstType : \"\";\r\n            orderData[\"purchaseGstAmt\"] = order.vendorAmtInfo.gstAmt;\r\n            orderData[\"orderJourneyFinalStatus\"] = order.order_status_id.status;\r\n            for (let orderStatusList of order.order_status_id.statusList) {\r\n                let actionTakenBy = \"\";\r\n                let updatedDate = dateToLocalDateTime(orderStatusList.updatedAt);\r\n                if (orderStatusList.updatedBy.admin) actionTakenBy = \"ADMIN\";\r\n                if (orderStatusList.updatedBy.vendor) actionTakenBy = \"SELLER\";\r\n                orderData[orderStatusList.status] = `${updatedDate} | ${actionTakenBy}`;\r\n            }\r\n            ordersArr.push(orderData);\r\n            orderData = {};\r\n        }\r\n        var workbook = new excelJs.Workbook();\r\n        var worksheet = workbook.addWorksheet(\"Order Report\");\r\n        let orderCol = [\r\n            { header: \"Order ID\", key: \"orderId\" },\r\n            { header: \"Order date and time\", key: \"orderDate\" },\r\n            { header: \"Invoice No\", key: \"invoiceNo\" },\r\n            { header: \"Invoice date\", key: \"invoiceDate\" },\r\n            { header: \"Order Quantity\", key: \"productsLength\" },\r\n            { header: \"factorEz GST\", key: \"soldByGst\" },\r\n            { header: \"STATE\", key: \"orderStatus\" },\r\n        ];\r\n        let buyerCol = [\r\n            { header: \"Buyer Name\", key: \"customerName\" },\r\n            { header: \"Buyer Phone Number\", key: \"customerPhone\" },\r\n            { header: \"Full Address\", key: \"customerAddress\" },\r\n            { header: \"Buyer City\", key: \"customerCity\" },\r\n            { header: \"Buyer State\", key: \"customerState\" },\r\n            { header: \"Pincode\", key: \"customerPincode\" },\r\n            { header: \"Gst No.\", key: \"customerGstNo\" },\r\n            { header: \"alternative phone\", key: \"customerAltPhone\" },\r\n        ];\r\n        let saleCol = [\r\n            { header: \"Total Amount\", key: \"saleGrandTotal\" },\r\n            { header: \"Discount\", key: \"saleDiscount\" },\r\n            { header: \"Final amount/ sales\", key: \"saleNetTotal\" },\r\n            { header: \"Invoice Value\", key: \"saleInvGrandTotal\" },\r\n            { header: \"Taxable value\", key: \"saleTaxableAmt\" },\r\n            { header: \"Gst Type\", key: \"saleGstType\" },\r\n            { header: \"Gst amount\", key: \"saleGstAmt\" },\r\n        ];\r\n        let sellerCol = [\r\n            { header: \"Seller name\", key: \"sellerName\" },\r\n            { header: \"Seller phone Number\", key: \"sellerPhone\" },\r\n            { header: \"Full Address\", key: \"sellerAddress\" },\r\n            { header: \"Seller City\", key: \"sellerCity\" },\r\n            { header: \"Seller State\", key: \"sellerState\" },\r\n            { header: \"Pincode\", key: \"sellerPincode\" },\r\n            { header: \"Gst No.\", key: \"sellerGstNo\" },\r\n            { header: \"alternative phone\", key: \"sellerAltNo\" },\r\n        ];\r\n        let purchaseCol = [\r\n            { header: \"Total Amount\", key: \"purchaseGrandTotal\" },\r\n            { header: \"Seller Discount\", key: \"purchaseDiscount\" },\r\n            { header: \"Final amount/ purchase\", key: \"purchaseNetTotal\" },\r\n            { header: \"invoice value\", key: \"purchaseInvGrandTotal\" },\r\n            { header: \"Taxable value\", key: \"purchaseTaxableAmt\" },\r\n            { header: \"Gst Type\", key: \"purchaseGstType\" },\r\n            { header: \"Gst amount\", key: \"purchaseGstAmt\" },\r\n        ];\r\n        let orderJourney = [\r\n            { header: \"Final Status\", key: \"orderJourneyFinalStatus\" },\r\n            { header: \"Delivered\", key: \"DELIVERED\" },\r\n            { header: \"Out For Delivery\", key: \"OUT_FOR_DELIVERY\" },\r\n            { header: \"Return delivered to seller/warehouse\", key: \"RETURNED_RTO_DELIVERED\" },\r\n            { header: \"Return\", key: \"RETURNED\" },\r\n            { header: \"Pickup-done/In transit\", key: \"PICKUP_DONE\" },\r\n            { header: \"Pickup-Aligned\", key: \"PICKUP_ALIGNED\" },\r\n            { header: \"Ready to dispatch\", key: \"READY_TO_DISPATCH\" },\r\n            { header: \"Confirmed/in-process\", key: \"CONFIRMED\" },\r\n            { header: \"cancelled\", key: \"CANCELLED\" },\r\n            { header: \"Remarks\", key: \"remarks\" },\r\n        ];\r\n        for (let m = 0; m < productLength; m++) {\r\n            let saleSkuCol = { header: `SKU code ${m + 1}`, key: `sale_sku_code_${m + 1}` };\r\n            let purchaseSkuCol = { header: `SKU code ${m + 1}`, key: `purchase_sku_code_${m + 1}` };\r\n            let saleGstCol = { header: `GST percentage ${m + 1}`, key: `sale_gst_percentage_${m + 1}` };\r\n            let purchaseGstCol = { header: `GST percentage ${m + 1}`, key: `purchase_gst_percentage_${m + 1}` };\r\n            let saleLotSizeCol = { header: `Lot Set/Size set ${m + 1}`, key: `sale_lotSize_${m + 1}` };\r\n            let purchaseLotSizeCol = { header: `Lot Set/Size set ${m + 1}`, key: `purchase_lotSize_${m + 1}` };\r\n            saleCol.push(saleSkuCol, saleLotSizeCol, saleGstCol);\r\n            purchaseCol.push(purchaseSkuCol, purchaseLotSizeCol, purchaseGstCol);\r\n        }\r\n        let columnData = [...orderCol, ...buyerCol, ...saleCol, ...sellerCol, ...purchaseCol, ...orderJourney];\r\n        worksheet.columns = columnData;\r\n        for (let x of ordersArr) {\r\n            worksheet.addRow(x);\r\n        }\r\n        let orderLen = orderCol.length;\r\n        let buyerLen = buyerCol.length + orderLen;\r\n        let saleLen = saleCol.length + buyerLen;\r\n        let sellerLen = sellerCol.length + saleLen;\r\n        let purchaseLen = purchaseCol.length + sellerLen;\r\n        let orderJLen = orderJourney.length + purchaseLen;\r\n        worksheet.getRow(1).height = 20;\r\n        worksheet.getRow(1).eachCell((cell, colNum) => {\r\n            cell.border = {\r\n                top: { style: \"thin\" },\r\n                right: { style: \"thin\" },\r\n                bottom: { style: \"thin\" },\r\n                left: { style: \"thin\" },\r\n            };\r\n            cell.font = { bold: true };\r\n            if (colNum <= orderLen) {\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"d7ff38\" },\r\n                };\r\n            } else if (colNum <= buyerLen) {\r\n                cell.font = { color: { argb: \"ffffff\" } };\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"2e397d\" },\r\n                };\r\n            } else if (colNum <= saleLen) {\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"cad1fa\" },\r\n                };\r\n            } else if (colNum <= sellerLen) {\r\n                cell.font = { color: { argb: \"ffffff\" } };\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"556b58\" },\r\n                };\r\n            } else if (colNum <= purchaseLen) {\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"07f027\" },\r\n                };\r\n            } else {\r\n                cell.font = { color: { argb: \"ffffff\" } };\r\n                cell.fill = {\r\n                    type: \"pattern\",\r\n                    pattern: \"solid\",\r\n                    fgColor: { argb: \"288a70\" },\r\n                };\r\n            }\r\n        });\r\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\r\n        res.setHeader(\"Content-Disposition\", `attachment; orderReport.xlsx`);\r\n        return workbook.xlsx.write(res).then(() => {\r\n            res.status(200);\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { exportProductAddDemoSheet, exportIDs, csvToJson, exportOrderReport };\r\n","const HomepageModel = require(\"../models/HomepageModel\");\r\n\r\nconst addFeaturedProducts = async (req, res) => {\r\n    try {\r\n        let { newArrival, featuredProduct, bestSelling } = req.body;\r\n        let home = await HomepageModel.find();\r\n        if (home.length > 0) {\r\n            if (featuredProduct) {\r\n                if (!home[0].featuredProduct.includes(featuredProduct)) {\r\n                    home[0].featuredProduct.push(featuredProduct);\r\n                }\r\n            }\r\n            if (newArrival) {\r\n                if (!home[0].newArrival.includes(newArrival)) {\r\n                    home[0].newArrival.push(newArrival);\r\n                }\r\n            }\r\n            if (bestSelling) {\r\n                if (!home[0].bestSelling.includes(bestSelling)) {\r\n                    home[0].bestSelling.push(bestSelling);\r\n                }\r\n            }\r\n            await home[0].save();\r\n        } else {\r\n            let data = {};\r\n            if (featuredProduct) {\r\n                data.featuredProduct = featuredProduct;\r\n            }\r\n            if (newArrival) {\r\n                data.newArrival = newArrival;\r\n            }\r\n            if (bestSelling) {\r\n                data.bestSelling = bestSelling;\r\n            }\r\n            await HomepageModel.create(data);\r\n        }\r\n\r\n        return res.status(200).send({ status: true, message: \"Product Added to respective sections...\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst getFeaturedProduct = async (req, res) => {\r\n    try {\r\n        let products = await HomepageModel.find().populate([\r\n            { path: \"featuredProduct\", model: \"Product\", populate: { path: \"vendor_id\", model: \"Vendor\" } },\r\n            { path: \"bestSelling\", model: \"Product\", populate: { path: \"vendor_id\", model: \"Vendor\" } },\r\n            { path: \"newArrival\", model: \"Product\", populate: { path: \"vendor_id\", model: \"Vendor\" } },\r\n        ]);\r\n        return res.status(200).send({ status: true, message: \"fetched...\", data: products[0] ? products[0] : null });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst removeFeaturedProduct = async (req, res) => {\r\n    try {\r\n        let { key, id } = req.body;\r\n        let home = await HomepageModel.find();\r\n        if (home.length > 0) {\r\n            if (key === \"featuredProduct\") {\r\n                let idx = home[0].featuredProduct.findIndex((e) => e._id.toString() === id);\r\n                if (idx >= 0) {\r\n                    home[0].featuredProduct.splice(idx, 1);\r\n                }\r\n            }\r\n            if (key === \"bestSelling\") {\r\n                let idx = home[0].bestSelling.findIndex((e) => e._id.toString() === id);\r\n                if (idx >= 0) {\r\n                    home[0].bestSelling.splice(idx, 1);\r\n                }\r\n            }\r\n            if (key === \"newArrival\") {\r\n                let idx = home[0].newArrival.findIndex((e) => e._id.toString() === id);\r\n                if (idx >= 0) {\r\n                    home[0].newArrival.splice(idx, 1);\r\n                }\r\n            }\r\n            await home[0].save();\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Removed...\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addFeaturedProducts,\r\n    getFeaturedProduct,\r\n    removeFeaturedProduct,\r\n};\r\n","// Generate Random ID of given length\r\nfunction generateRandomID(length, preFix) {\r\n    let id = preFix ? preFix : '';\r\n    const digits = \"0123456789\";\r\n    for (let i = 0; i < length - 5; i++) {\r\n        const randomIndex = Math.floor(Math.random() * digits.length);\r\n        id += digits[randomIndex];\r\n    }\r\n    id += Date.now().toString().slice(8);\r\n    return id;\r\n}\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n}\r\n\r\nmodule.exports = { generateRandomID, generateRandomAlphaNumericID };\r\n","const express = require(\"express\");\r\nconst { initializeApp } = require(\"firebase/app\");\r\nconst { getStorage, ref, getDownloadURL, uploadBytesResumable } = require(\"firebase/storage\");\r\nconst aws = require(\"aws-sdk\");\r\nrequire(\"aws-sdk/lib/maintenance_mode_message\").suppress = true;\r\nconst config = require(\"../middlewares/firebase\");\r\nconst { awsS3Bucket, awsAccessKey, awsSecretKey, awsS3Region } = require(\"../middlewares/config\");\r\n//Initialize a firebase application\r\ninitializeApp(config.firebaseConfig);\r\n\r\n// Initialize Cloud Storage and get a reference to the service\r\nconst storage = getStorage();\r\nconst uploadImage = async (blobFile) => {\r\n    const dateTime = giveCurrentDateTime();\r\n    const storageRef = ref(storage, `files/${dateTime.toString().replace(\" \", \"_\") + \"_\" + blobFile.name.replace(\" \", \"_\")}`);\r\n\r\n    // // Create file metadata including the content type\r\n    const metadata = {\r\n        contentType: blobFile.mimetype,\r\n    };\r\n\r\n    // // Upload the file in the bucket storage\r\n    const snapshot = await uploadBytesResumable(storageRef, blobFile.data, metadata);\r\n    //by using uploadBytesResumable we can control the progress of uploading like pause, resume, cancel\r\n\r\n    // Grab the public url\r\n    const downloadURL = await getDownloadURL(snapshot.ref);\r\n    return {\r\n        message: \"file uploaded to firebase storage\",\r\n        name: snapshot.metadata.name,\r\n        type: blobFile.mimetype,\r\n        imageURL: downloadURL,\r\n    };\r\n};\r\n\r\nconst giveCurrentDateTime = () => {\r\n    const today = new Date();\r\n    const date = today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\r\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    const dateTime = date + \" \" + time;\r\n    return dateTime;\r\n};\r\n\r\naws.config.update({\r\n    accessKeyId: awsAccessKey,\r\n    secretAccessKey: awsSecretKey,\r\n    region: awsS3Region,\r\n});\r\n\r\nlet uploadFile = async (image) => {\r\n    return new Promise(function (resolve, reject) {\r\n        let s3 = new aws.S3();\r\n        const dateTime = giveCurrentDateTime();\r\n        var uploadParams = {\r\n            Bucket: awsS3Bucket,\r\n            Key: \"images/\" + dateTime.toString().replace(\" \", \"_\") + \"_\" + image.name.replace(\" \", \"_\"),\r\n            Body: image.data,\r\n            ContentType: image.mimetype,\r\n        };\r\n        s3.upload(uploadParams, function (err, data) {\r\n            if (err) {\r\n                return reject({ error: err });\r\n            }\r\n            return resolve(data.Location);\r\n        });\r\n    });\r\n};\r\n\r\nmodule.exports = { uploadImage, uploadFile };\r\n","const customerModel = require(\"../models/customerModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst businessModel = require(\"../models/businessModel\");\r\nconst invoiceModel = require(\"../models/invoiceModel\");\r\nconst invoiceNoModel = require(\"../models/invoiceNoModel\");\r\nconst customerAddressModel = require(\"../models/customerAddressModel\");\r\nconst orderedProductModel = require(\"../models/orderedProductModel\");\r\nconst { generatePdf } = require(\"../utils/generatePdf\");\r\nconst { dateToLocalDateTime } = require(\"../utils/dateUtils\");\r\nconst { financialYear } = require(\"../utils/getFinancialYear\");\r\n\r\nconst generatePurchaseInvoice = async (data) => {\r\n    try {\r\n        let { vendor_id, order_id, gstAmount, totalAmount } = data;\r\n        let vendor = await vendorModel.findById(vendor_id);\r\n        let business = await businessModel.find();\r\n        if (business.length === 0 || !business[0].defaultGST) {\r\n            return { status: false, err: \"Default gst not found\" };\r\n        }\r\n\r\n        let invNo = await invoiceNoModel.findOne({ invoiceNoType: \"PURCHASE\" });\r\n        let fY = financialYear();\r\n        if (!invNo) {\r\n            invNo = await invoiceNoModel.create({\r\n                invoiceNo: 1,\r\n                invoiceYear: fY,\r\n                invoiceNoLength: 6,\r\n                invoiceNoType: \"PURCHASE\",\r\n            });\r\n        }\r\n        if (Number(fY) !== invNo.invoiceYear) {\r\n            invNo.invoiceNo = 1;\r\n            invNo.invoiceYear = fY;\r\n        }\r\n        let strInvNumber = \"0000000000\" + invNo.invoiceNo;\r\n        let invNumber = `FPIN${invNo.invoiceYear}${strInvNumber.substring(strInvNumber.length - invNo.invoiceNoLength)}`;\r\n        invNo.invoiceNo += 1;\r\n        let generateDate = new Date();\r\n        let invData = {\r\n            invoiceNo: invNumber,\r\n            invoiceDate: generateDate,\r\n            vendor_id,\r\n            order_id,\r\n            gstAmount: gstAmount.toFixed(2),\r\n            totalAmount: totalAmount.toFixed(2),\r\n            invoiceType: \"PURCHASE\",\r\n        };\r\n        if (vendor.gstNo.substring(0, 2) === business[0].defaultGST.gstNo.substring(0, 2)) {\r\n            invData.gstType = \"CGST_SGST\";\r\n        } else {\r\n            invData.gstType = \"IGST\";\r\n        }\r\n\r\n        invData.soldBy = {\r\n            name: vendor.firmName,\r\n            address: vendor.invoiceAddress,\r\n            phone: vendor.mobileNo,\r\n            gst: vendor.gstNo,\r\n        };\r\n\r\n        invData.shippingAddress = {\r\n            name: business[0].business_name,\r\n            address: business[0].defaultGST.pickupAddress,\r\n            phone: business[0].contactNo,\r\n            gst: business[0].defaultGST.gstNo,\r\n        };\r\n        invData.billingAddress = {\r\n            name: business[0].business_name,\r\n            address: business[0].defaultGST.pickupAddress,\r\n            phone: business[0].contactNo,\r\n            gst: business[0].defaultGST.gstNo,\r\n        };\r\n        let invRes = await invoiceModel.create(invData);\r\n        await invNo.save();\r\n        return { status: true, invoice: invRes };\r\n    } catch (err) {\r\n        return { status: false, err: err };\r\n    }\r\n};\r\nconst generateSaleInvoice = async (data) => {\r\n    try {\r\n        let { customer_id, order_id, gstAmount, totalAmount, address } = data;\r\n        let customer = await customerModel.findById(customer_id);\r\n        let business = await businessModel.find();\r\n        if (business.length === 0 || !business[0].defaultGST) {\r\n            return { status: false, err: \"Default gst not found\" };\r\n        }\r\n\r\n        let invNo = await invoiceNoModel.findOne({ invoiceNoType: \"SALE\" });\r\n        let fY = financialYear();\r\n        if (!invNo) {\r\n            invNo = await invoiceNoModel.create({\r\n                invoiceNo: 1,\r\n                invoiceYear: fY,\r\n                invoiceNoLength: 6,\r\n                invoiceNoType: \"SALE\",\r\n            });\r\n        }\r\n        if (Number(fY) !== invNo.invoiceYear) {\r\n            invNo.invoiceNo = 1;\r\n            invNo.invoiceYear = fY;\r\n        }\r\n        let strInvNumber = \"0000000000\" + invNo.invoiceNo;\r\n        let invNumber = `FSIN${invNo.invoiceYear}${strInvNumber.substring(strInvNumber.length - invNo.invoiceNoLength)}`;\r\n        invNo.invoiceNo += 1;\r\n        let generateDate = new Date();\r\n        let invData = {\r\n            invoiceNo: invNumber,\r\n            invoiceDate: generateDate,\r\n            customer_id,\r\n            order_id,\r\n            gstAmount: gstAmount.toFixed(2),\r\n            totalAmount: totalAmount.toFixed(2),\r\n            invoiceType: \"SALE\",\r\n        };\r\n\r\n        if (customer.defaultAddress.stateCode === business[0].defaultGST.gstNo.substring(0, 2)) {\r\n            invData.gstType = \"CGST_SGST\";\r\n        } else {\r\n            invData.gstType = \"IGST\";\r\n        }\r\n        invData.soldBy = {\r\n            name: business[0].business_name,\r\n            address: business[0].defaultGST.pickupAddress,\r\n            phone: business[0].contactNo,\r\n            gst: business[0].defaultGST.gstNo,\r\n        };\r\n        invData.shippingAddress = {\r\n            name: customer.name,\r\n            address: address.address,\r\n            phone: customer.phone,\r\n            gst: customer.gstNo,\r\n        };\r\n        invData.billingAddress = {\r\n            name: customer.name,\r\n            address: address.address,\r\n            phone: customer.phone,\r\n            gst: customer.gstNo,\r\n        };\r\n        let invRes = await invoiceModel.create(invData);\r\n\r\n        await invNo.save();\r\n        return { status: true, invoice: invRes };\r\n    } catch (err) {\r\n        return { status: false, err: err };\r\n    }\r\n};\r\n\r\nconst getAllSaleInvoice = async (req, res) => {\r\n    try {\r\n        let userType = req.userModel;\r\n        let invoices = null;\r\n        if (userType === \"ADMIN\") {\r\n            invoices = await invoiceModel.find({ invoiceType: \"SALE\" });\r\n        } else {\r\n            invoices = await invoiceModel.find({ invoiceType: \"PURCHASE\" });\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Invoice fetched successfully...\", data: invoices });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst getAllPurchaseInvoice = async (req, res) => {\r\n    try {\r\n        let invoices = [];\r\n        if (req.userModel === \"ADMIN\") {\r\n            invoices = await invoiceModel.find({ invoiceType: \"PURCHASE\" });\r\n        }\r\n        if (req.userModel === \"VENDOR\") {\r\n            invoices = await invoiceModel.find({ invoiceType: \"PURCHASE\", vendor_id: req.userId });\r\n        }\r\n        return res.status(200).send({ status: true, message: \"Invoice fetched successfully...\", data: invoices });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst data = {\r\n    logo: \"\",\r\n    brandName: \"\",\r\n    soldBy: \"\",\r\n    soldByAddress: \"\",\r\n    soldByGst: \"\",\r\n    invoiceNo: \"\",\r\n    orderId: \"\",\r\n    orderDate: \"\",\r\n    invoiceDate: \"\",\r\n    billToName: \"\",\r\n    billToAddress: \"\",\r\n    billToPhone: \"\",\r\n    billToGST: \"\",\r\n    shipToName: \"\",\r\n    shipToAddress: \"\",\r\n    shipToPhone: \"\",\r\n    shipToGST: \"\",\r\n    tableRow: [],\r\n    totalAmt: \"\",\r\n    totalCGSTAmt: \"\",\r\n    totalSGSTAmt: \"\",\r\n    totalIGSTAmt: \"\",\r\n    taxableAmt: \"\",\r\n    totalTaxAmt: \"\",\r\n    grossTotalAmt: \"\",\r\n    discountAmt: \"\",\r\n    netPayableAmount: \"\",\r\n};\r\ndata.tableRow = [\r\n    {\r\n        sno: \"1\",\r\n        productName: \"Demo Product 1\",\r\n        color: \"Black\",\r\n        sizeSet: \"5/2 7/2 8/2 9/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"5\",\r\n        rate: \"800\",\r\n        total: \"4000\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"480\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"480\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"2\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"3\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"4\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"5\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"6\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"7\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"8\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"9\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"10\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"11\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"12\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"13\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"14\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n    {\r\n        sno: \"15\",\r\n        productName: \"Demo Product 2\",\r\n        color: \"Blue\",\r\n        sizeSet: \"8/2 9/2 5/2 7/2\",\r\n        hsnCode: \"123456\",\r\n        qty: \"6\",\r\n        rate: \"910\",\r\n        total: \"5460\",\r\n        cgstPercentage: \"12\",\r\n        cgstAmount: \"655.20\",\r\n        sgstPercentage: \"12\",\r\n        sgstAmount: \"655.20\",\r\n        igstPercentage: \"\",\r\n        igstAmount: \"\",\r\n    },\r\n];\r\ndata.logo = \"https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png\";\r\ndata.brandName = \"Shoes House\";\r\ndata.soldBy = \"Mohit Shoes\";\r\ndata.soldByAddress = \"Vinayak logistic Park, Village Hinaura,hasanganj, Unnao-209859, Uttar Pradesh, Lucknow, UTTAR PRADESH, India - 209859, IN-UP\";\r\ndata.soldByGst = \"07AABCU9603R1ZX\";\r\ndata.invoiceNo = \"FSIN2300000007\";\r\n\r\nconst downoadInvoiceByInvoiceNumber = async (req, res) => {\r\n    try {\r\n        let invoiceNumber = req.params.invoicenumber;\r\n        let invoicetype = req.params.invoicetype;\r\n\r\n        let invoice = await invoiceModel.findOne({ invoiceNo: invoiceNumber }).populate(\"order_id\");\r\n        if (!invoice) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (invoicetype === \"PURCHASE\" && !invoice.vendor_id) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let orderedProduct = await orderedProductModel.findOne({ order_id: invoice.order_id }).populate({ path: \"products.product_id\", model: \"Product\" });\r\n        if (!orderedProduct) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let business = await businessModel.find();\r\n        if (business.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (invoicetype === \"PURCHASE\") {\r\n            let invData = {\r\n                logo: business[0].invoiceLogo,\r\n                brandName: business[0].business_name,\r\n                soldBy: invoice.soldBy.name,\r\n                soldByAddress: invoice.soldBy.address,\r\n                soldByPhone: invoice.soldBy.phone,\r\n                soldByGst: invoice.soldBy.gst,\r\n                invoiceNo: invoiceNumber,\r\n                orderId: invoice.order_id.orderId,\r\n                orderDate: dateToLocalDateTime(invoice.order_id.order_date),\r\n                invoiceDate: dateToLocalDateTime(invoice.invoiceDate),\r\n                billToName: invoice.billingAddress.name,\r\n                billToAddress: invoice.billingAddress.address,\r\n                billToPhone: invoice.billingAddress.phone,\r\n                billToGST: invoice.billingAddress.gst,\r\n                shipToName: invoice.shippingAddress.name,\r\n                shipToAddress: invoice.shippingAddress.address,\r\n                shipToPhone: invoice.shippingAddress.phone,\r\n                shipToGST: invoice.shippingAddress.gst,\r\n                tableRow: [],\r\n                totalAmt: \"₹\" + invoice.totalAmount,\r\n                totalCGSTAmt: \"\",\r\n                totalSGSTAmt: \"\",\r\n                totalIGSTAmt: \"\",\r\n                taxableAmt: invoice.totalAmount,\r\n                totalTaxAmt: invoice.gstAmount,\r\n                grossTotalAmt: (Number(invoice.gstAmount) + Number(invoice.totalAmount)).toFixed(2),\r\n                discountAmt: \"0\",\r\n                netPayableAmount: (Number(invoice.gstAmount) + Number(invoice.totalAmount)).toFixed(2),\r\n            };\r\n            if (invoice.soldBy.gst.substring(0, 2) === invoice.billingAddress.gst.substring(0, 2)) {\r\n                invData.totalCGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                invData.totalSGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                let count = 1;\r\n                for (let product of orderedProduct.products) {\r\n                    if (!product.isRemoved) {\r\n                        let trData = {\r\n                            sno: count,\r\n                            productName: \"\",\r\n                            color: \"\",\r\n                            sizeSet: \"\",\r\n                            hsnCode: \"\",\r\n                            qty: \"\",\r\n                            rate: \"\",\r\n                            total: \"\",\r\n                            cgstPercentage: \"\",\r\n                            cgstAmount: \"\",\r\n                            sgstPercentage: \"\",\r\n                            sgstAmount: \"\",\r\n                            igstPercentage: \"\",\r\n                            igstAmount: \"\",\r\n                        };\r\n                        count += 1;\r\n                        trData.productName = product.product_id.product_name;\r\n                        trData.color = product.color.colorName;\r\n                        trData.sizeSet = product.lotSize;\r\n                        trData.hsnCode = product.hsnCode;\r\n                        trData.qty = product.qty;\r\n                        trData.rate = product.seller_price;\r\n                        trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                        trData.cgstPercentage = Number(product.seller_gst) / 2;\r\n                        trData.cgstAmount = ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                        trData.sgstPercentage = Number(product.seller_gst) / 2;\r\n                        trData.sgstAmount = ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                        trData.igstPercentage = \"\";\r\n                        trData.igstAmount = \"\";\r\n                        invData.tableRow.push(trData);\r\n                    }\r\n                }\r\n            } else {\r\n                invData.totalIGSTAmt = invoice.gstAmount;\r\n                let count = 1;\r\n                for (let product of orderedProduct.products) {\r\n                    if (!product.isRemoved) {\r\n                        let trData = {\r\n                            sno: count,\r\n                            productName: \"\",\r\n                            color: \"\",\r\n                            sizeSet: \"\",\r\n                            hsnCode: \"\",\r\n                            qty: \"\",\r\n                            rate: \"\",\r\n                            total: \"\",\r\n                            cgstPercentage: \"\",\r\n                            cgstAmount: \"\",\r\n                            sgstPercentage: \"\",\r\n                            sgstAmount: \"\",\r\n                            igstPercentage: \"\",\r\n                            igstAmount: \"\",\r\n                        };\r\n                        count += 1;\r\n                        trData.productName = product.product_id.product_name;\r\n                        trData.color = product.color.colorName;\r\n                        trData.sizeSet = product.lotSize;\r\n                        trData.hsnCode = product.hsnCode;\r\n                        trData.qty = product.qty;\r\n                        trData.rate = product.seller_price;\r\n                        trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                        trData.cgstPercentage = \"\";\r\n                        trData.cgstAmount = \"\";\r\n                        trData.sgstPercentage = \"\";\r\n                        trData.sgstAmount = \"\";\r\n                        trData.igstPercentage = product.seller_gst;\r\n                        trData.igstAmount = \"₹\" + ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                        invData.tableRow.push(trData);\r\n                    }\r\n                }\r\n            }\r\n            let pdf = await generatePdf(invData, \"factorEz.com\");\r\n            res.setHeader(\"Content-Type\", \"application/pdf\");\r\n            res.setHeader(\"Content-Disposition\", \"attachment; invoice.pdf\");\r\n            return res.send(pdf);\r\n        } else {\r\n            let customerAddress = await customerAddressModel.findOne({ customerId: invoice.customer_id });\r\n            let invData = {\r\n                logo: business[0].invoiceLogo,\r\n                brandName: business[0].business_name,\r\n                soldBy: invoice.soldBy.name,\r\n                soldByAddress: invoice.soldBy.address,\r\n                soldByGst: invoice.soldBy.gst,\r\n                soldByPhone: invoice.soldBy.phone,\r\n                invoiceNo: invoiceNumber,\r\n                orderId: invoice.order_id.orderId,\r\n                orderDate: dateToLocalDateTime(invoice.order_id.order_date),\r\n                invoiceDate: dateToLocalDateTime(invoice.invoiceDate),\r\n                billToName: invoice.billingAddress.name,\r\n                billToAddress: invoice.billingAddress.address,\r\n                billToPhone: invoice.billingAddress.phone,\r\n                billToGST: invoice.billingAddress.gst,\r\n                shipToName: invoice.shippingAddress.name,\r\n                shipToAddress: invoice.shippingAddress.address,\r\n                shipToPhone: invoice.shippingAddress.phone,\r\n                shipToGST: invoice.shippingAddress.gst,\r\n                totalAmt: \"₹\" + invoice.totalAmount,\r\n                tableRow: [],\r\n                totalCGSTAmt: \"\",\r\n                totalSGSTAmt: \"\",\r\n                totalIGSTAmt: \"\",\r\n                taxableAmt: invoice.totalAmount,\r\n                totalTaxAmt: invoice.gstAmount,\r\n                grossTotalAmt: (Number(invoice.gstAmount) + Number(invoice.totalAmount)).toFixed(2),\r\n                discountAmt: \"\",\r\n                netPayableAmount: \"\",\r\n            };\r\n            if (invoice.billingAddress.gst) {\r\n                if (invoice.soldBy.gst.substring(0, 2) === invoice.billingAddress.gst.substring(0, 2)) {\r\n                    invData.totalCGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                    invData.totalSGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                    let count = 1;\r\n                    for (let product of orderedProduct.products) {\r\n                        if (!product.isRemoved) {\r\n                            let trData = {\r\n                                sno: count,\r\n                                productName: \"\",\r\n                                color: \"\",\r\n                                sizeSet: \"\",\r\n                                hsnCode: \"\",\r\n                                qty: \"\",\r\n                                rate: \"\",\r\n                                total: \"\",\r\n                                cgstPercentage: \"\",\r\n                                cgstAmount: \"\",\r\n                                sgstPercentage: \"\",\r\n                                sgstAmount: \"\",\r\n                                igstPercentage: \"\",\r\n                                igstAmount: \"\",\r\n                            };\r\n                            count += 1;\r\n                            trData.productName = product.product_id.product_name;\r\n                            trData.color = product.color.colorName;\r\n                            trData.sizeSet = product.lotSize;\r\n                            trData.hsnCode = product.hsnCode;\r\n                            trData.qty = product.qty;\r\n                            trData.rate = product.seller_price;\r\n                            trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                            trData.cgstPercentage = Number(product.seller_gst) / 2;\r\n                            trData.cgstAmount = ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                            trData.sgstPercentage = Number(product.seller_gst) / 2;\r\n                            trData.sgstAmount = ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                            trData.igstPercentage = \"\";\r\n                            trData.igstAmount = \"\";\r\n                            invData.tableRow.push(trData);\r\n                        }\r\n                    }\r\n                } else {\r\n                    invData.totalIGSTAmt = invoice.gstAmount;\r\n                    let count = 1;\r\n                    for (let product of orderedProduct.products) {\r\n                        if (!product.isRemoved) {\r\n                            let trData = {\r\n                                sno: count,\r\n                                productName: \"\",\r\n                                color: \"\",\r\n                                sizeSet: \"\",\r\n                                hsnCode: \"\",\r\n                                qty: \"\",\r\n                                rate: \"\",\r\n                                total: \"\",\r\n                                cgstPercentage: \"\",\r\n                                cgstAmount: \"\",\r\n                                sgstPercentage: \"\",\r\n                                sgstAmount: \"\",\r\n                                igstPercentage: \"\",\r\n                                igstAmount: \"\",\r\n                            };\r\n                            count += 1;\r\n                            trData.productName = product.product_id.product_name;\r\n                            trData.color = product.color.colorName;\r\n                            trData.sizeSet = product.lotSize;\r\n                            trData.hsnCode = product.hsnCode;\r\n                            trData.qty = product.qty;\r\n                            trData.rate = product.seller_price;\r\n                            trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                            trData.cgstPercentage = \"\";\r\n                            trData.cgstAmount = \"\";\r\n                            trData.sgstPercentage = \"\";\r\n                            trData.sgstAmount = \"\";\r\n                            trData.igstPercentage = product.seller_gst;\r\n                            trData.igstAmount = \"₹\" + ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                            invData.tableRow.push(trData);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (invoice.soldBy.gst.substring(0, 2) === customerAddress.stateCode) {\r\n                    invData.totalCGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                    invData.totalSGSTAmt = \"₹\" + (Number(invoice.gstAmount) / 2).toFixed(2);\r\n                    let count = 1;\r\n                    for (let product of orderedProduct.products) {\r\n                        if (!product.isRemoved) {\r\n                            let trData = {\r\n                                sno: count,\r\n                                productName: \"\",\r\n                                color: \"\",\r\n                                sizeSet: \"\",\r\n                                hsnCode: \"\",\r\n                                qty: \"\",\r\n                                rate: \"\",\r\n                                total: \"\",\r\n                                cgstPercentage: \"\",\r\n                                cgstAmount: \"\",\r\n                                sgstPercentage: \"\",\r\n                                sgstAmount: \"\",\r\n                                igstPercentage: \"\",\r\n                                igstAmount: \"\",\r\n                            };\r\n                            count += 1;\r\n                            trData.productName = product.product_id.product_name;\r\n                            trData.color = product.color.colorName;\r\n                            trData.sizeSet = product.lotSize;\r\n                            trData.hsnCode = product.hsnCode;\r\n                            trData.qty = product.qty;\r\n                            trData.rate = Number(product.seller_price) + (Number(product.seller_price) * Number(product.margin)) / 100;\r\n                            trData.total = (Number(trData.rate) * Number(product.qty)).toFixed(2);\r\n                            trData.cgstPercentage = Number(product.selling_gst) / 2;\r\n                            let mrginAmt = Number(product.seller_price) * Number(product.qty) + (Number(product.seller_price) * Number(product.qty) * Number(product.margin)) / 100;\r\n                            trData.cgstAmount = ((mrginAmt * Number(product.selling_gst)) / 100).toFixed(2);\r\n                            trData.sgstPercentage = Number(product.selling_gst) / 2;\r\n                            trData.sgstAmount = ((mrginAmt * Number(product.selling_gst)) / 100).toFixed(2);\r\n                            trData.igstPercentage = \"\";\r\n                            trData.igstAmount = \"\";\r\n                            invData.tableRow.push(trData);\r\n                        }\r\n                    }\r\n                } else {\r\n                    invData.totalIGSTAmt = invoice.gstAmount;\r\n                    let count = 1;\r\n                    for (let product of orderedProduct.products) {\r\n                        if (!product.isRemoved) {\r\n                            let trData = {\r\n                                sno: count,\r\n                                productName: \"\",\r\n                                color: \"\",\r\n                                sizeSet: \"\",\r\n                                hsnCode: \"\",\r\n                                qty: \"\",\r\n                                rate: \"\",\r\n                                total: \"\",\r\n                                cgstPercentage: \"\",\r\n                                cgstAmount: \"\",\r\n                                sgstPercentage: \"\",\r\n                                sgstAmount: \"\",\r\n                                igstPercentage: \"\",\r\n                                igstAmount: \"\",\r\n                            };\r\n                            count += 1;\r\n                            trData.productName = product.product_id.product_name;\r\n                            trData.color = product.color.colorName;\r\n                            trData.sizeSet = product.lotSize;\r\n                            trData.hsnCode = product.hsnCode;\r\n                            trData.qty = product.qty;\r\n                            trData.rate = product.seller_price;\r\n                            trData.total = (Number(product.seller_price) * Number(product.qty)).toFixed(2);\r\n                            trData.cgstPercentage = \"\";\r\n                            trData.cgstAmount = \"\";\r\n                            trData.sgstPercentage = \"\";\r\n                            trData.sgstAmount = \"\";\r\n                            trData.igstPercentage = product.seller_gst;\r\n                            trData.igstAmount = \"₹\" + ((Number(product.seller_price) * Number(product.qty) * Number(product.seller_gst)) / 100).toFixed(2);\r\n                            invData.tableRow.push(trData);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (invoice.order_id.discounted_amount) {\r\n                invData.discountAmt = \"₹\" + invoice.order_id.discounted_amount;\r\n                invData.netPayableAmount = Number(invoice.gstAmount) + Number(invoice.totalAmount) - Number(invoice.order_id.discounted_amount);\r\n            } else {\r\n                invData.discountAmt = 0;\r\n                invData.netPayableAmount = invData.grossTotalAmt;\r\n            }\r\n            let pdf = await generatePdf(invData, \"factorEz.com\");\r\n\r\n            res.setHeader(\"Content-Type\", \"application/pdf\");\r\n            res.setHeader(\"Content-Disposition\", \"attachment; invoice.pdf\");\r\n            return res.send(pdf);\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { generatePurchaseInvoice, generateSaleInvoice, getAllSaleInvoice, getAllPurchaseInvoice, downoadInvoiceByInvoiceNumber };\r\n","const orderModel = require(\"../models/orderModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst customerAddressModel = require(\"../models/customerAddressModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst paymentModel = require(\"../models/paymentModel\");\r\nconst cancelledReasonModel = require(\"../models/cancelledReasonModel\");\r\n\r\nconst { generateRandomID, generateRandomAlphaNumericID } = require(\"../controllers/idGeneratorController\");\r\n\r\nconst orderedProductModel = require(\"../models/orderedProductModel\");\r\nconst orderStatusTableModel = require(\"../models/orderStatusTableModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst couponCodeModel = require(\"../models/couponCodeModel\");\r\nconst { createPayment } = require(\"./paymentController\");\r\nconst { generatePurchaseInvoice, generateSaleInvoice } = require(\"./invoiceController\");\r\nconst { isExpiryCoupon } = require(\"../utils/couponExpireUtil\");\r\n// CREATE ORDER\r\nconst createOrder = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let data = req.body;\r\n\r\n        let { address_id, payment_mode, couponCode, paymentAmt, transaction_id } = data;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id request\" });\r\n        }\r\n        if (!isValidObjectId(address_id)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Address id request\" });\r\n        }\r\n\r\n        if (!payment_mode) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (payment_mode !== \"CUSTOM\" && payment_mode !== \"TWENTY_ADV\" && payment_mode !== \"PREPAID\" && payment_mode !== \"COD\") {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        if ((payment_mode === \"CUSTOM\" || payment_mode === \"TWENTY_ADV\" || payment_mode === \"PREPAID\") && !transaction_id) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        let customer = await customerModel.findById(customerId);\r\n        let address = await customerAddressModel.findById(address_id);\r\n        if (!customer || !address) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let cart = await cartModel.findOne({ customer_id: customerId }).populate({\r\n            path: \"products.product_id\",\r\n            model: \"Product\",\r\n        });\r\n\r\n        let demoObj = {};\r\n        let coupon = null;\r\n        if (couponCode) {\r\n            coupon = await couponCodeModel.findOne({\r\n                couponCode: couponCode,\r\n                isDeleted: false,\r\n                isExpired: false,\r\n            });\r\n            if (!coupon) {\r\n                return res.status(400).send({ status: false, message: \"Invalid Coupon Code\" });\r\n            }\r\n            if (coupon && isExpiryCoupon(coupon.validTill)) {\r\n                coupon.isExpired = true;\r\n                await coupon.save();\r\n                return res.status(400).send({ status: false, message: \"Coupon Code Expired\" });\r\n            }\r\n            if (coupon.customer_id.includes(customerId)) {\r\n                return res.status(200).send({ status: false, message: \"Coupon Already applied\" });\r\n            }\r\n        }\r\n\r\n        if (!cart) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request\" });\r\n        }\r\n        let orderAmt = 0;\r\n        for (let product of cart.products) {\r\n            let mAmt = product.product_id.seller_price + (product.product_id.margin * product.product_id.seller_price) / 100;\r\n            let totalamt = mAmt + (mAmt * product.product_id.sellingGST) / 100;\r\n            orderAmt += product.qty * totalamt;\r\n            let key = product.product_id.vendor_id.toString();\r\n            if (key in demoObj) {\r\n                demoObj[key].push(product);\r\n            } else {\r\n                demoObj[key] = [product];\r\n            }\r\n        }\r\n        if (coupon && coupon.minOrderAmt > orderAmt) {\r\n            return res.status(200).send({ status: false, message: `Coupon not applied, minimum order should be ${coupon.minOrderAmt}` });\r\n        }\r\n        let orders = [];\r\n        let grandTotal = 0;\r\n        for (let vendor of Object.keys(demoObj)) {\r\n            let orderedProduct = null;\r\n            let vendorAmtInfo = {\r\n                grandTotal: 0,\r\n                gstAmt: 0,\r\n                total: 0,\r\n            };\r\n            let total = 0;\r\n            let GST_amount = 0;\r\n            for (let p of demoObj[vendor]) {\r\n                let x = {\r\n                    product_id: \"\",\r\n                    vendor_id: \"\",\r\n                    mrp: \"\",\r\n                    seller_price: \"\",\r\n                    seller_gst: \"\",\r\n                    selling_price: \"\",\r\n                    selling_gst: \"\",\r\n                    margin: \"\",\r\n                    lotSize: \"\",\r\n                    color: {\r\n                        colorName: \"\",\r\n                        colorHex: \"\",\r\n                    },\r\n                    hsnCode: \"\",\r\n                    skuCode: \"\",\r\n                    qty: \"\",\r\n                    addedAt: \"\",\r\n                };\r\n                x.product_id = p.product_id._id;\r\n                x.vendor_id = vendor;\r\n                x.mrp = p.product_id.mrp;\r\n                x.seller_price = p.product_id.seller_price;\r\n                x.seller_gst = p.product_id.gst;\r\n                let marginAmt = (Number(p.product_id.seller_price) * Number(p.product_id.margin)) / 100;\r\n                let sellingGstAmt = ((Number(p.product_id.seller_price) + marginAmt) * Number(p.product_id.sellingGST)) / 100;\r\n                x.selling_price = (Number(p.product_id.seller_price) + marginAmt + sellingGstAmt).toFixed(2);\r\n                x.selling_gst = p.product_id.sellingGST;\r\n                x.lotSize = p.lotSize;\r\n                x.color = {\r\n                    colorName: p.color.colorName,\r\n                    colorHex: p.color.colorHex,\r\n                };\r\n                x.hsnCode = p.product_id.hsn_code;\r\n                x.skuCode = p.product_id.sku_code;\r\n                x.margin = p.product_id.margin;\r\n                x.qty = p.qty;\r\n                x.lotSize = p.lotSize;\r\n                x.addedAt = p.addedAt;\r\n                let currentTotal = (Number(p.product_id.seller_price) + marginAmt) * Number(p.qty);\r\n                total += Number(currentTotal);\r\n                GST_amount += sellingGstAmt * Number(p.qty);\r\n\r\n                let vdrAmt = Number(p.product_id.seller_price) * Number(p.qty);\r\n                let vdrGstAmt = (vdrAmt * Number(p.product_id.gst)) / 100;\r\n                vendorAmtInfo.grandTotal += vdrAmt + vdrGstAmt;\r\n                vendorAmtInfo.gstAmt += vdrGstAmt;\r\n                vendorAmtInfo.total += vdrAmt;\r\n\r\n                if (orderedProduct === null) {\r\n                    orderedProduct = await orderedProductModel.create({\r\n                        products: [x],\r\n                    });\r\n                } else {\r\n                    orderedProduct.products.push(x);\r\n                }\r\n            }\r\n            await orderedProduct.save();\r\n            let odrObj = {\r\n                orderId: generateRandomID(10, \"FZ\"),\r\n                vendorId: vendor,\r\n                order_date: new Date(),\r\n                ordered_products: orderedProduct,\r\n                customer_id: customerId,\r\n                address_id: address_id,\r\n                GST_amount: GST_amount.toFixed(2),\r\n                total: total.toFixed(2),\r\n                grand_total: (Number(GST_amount) + Number(total)).toFixed(2),\r\n                vendorAmtInfo: vendorAmtInfo,\r\n            };\r\n            if (coupon !== null) {\r\n                odrObj.couponCode = coupon._id;\r\n            }\r\n            grandTotal += Number(total) + Number(GST_amount);\r\n            let addedOrder = await orderModel.create(odrObj);\r\n            let status = await orderStatusTableModel.create({\r\n                order_id: addedOrder._id,\r\n            });\r\n            addedOrder.order_status_id = status;\r\n            await addedOrder.save();\r\n            orderedProduct.order_id = addedOrder._id;\r\n            await orderedProduct.save();\r\n            orders.push(addedOrder);\r\n        }\r\n        cart.products = [];\r\n        await cart.save();\r\n        if (coupon !== null && coupon.maxDiscPrice < grandTotal) {\r\n            let maxDiscount = 0;\r\n            if (coupon.discountType === \"PERCENTAGE\") {\r\n                let discAmt = (Number(grandTotal) * Number(coupon.discountAmt)) / 100;\r\n                if (discAmt > coupon.maxDiscPrice) {\r\n                    maxDiscount = coupon.maxDiscPrice;\r\n                } else {\r\n                    maxDiscount = discAmt;\r\n                }\r\n            } else if (coupon.discountType === \"PRICE\") {\r\n                maxDiscount = coupon.discountAmt;\r\n            }\r\n\r\n            if (payment_mode === \"PREPAID\" && Number(paymentAmt) < Number(grandTotal) - Number(maxDiscount)) {\r\n                return res.status(400).send({ status: false, message: \"payment should be equal to grand total amount\" });\r\n            }\r\n\r\n            for (let singleOrder of orders) {\r\n                let percentage = Number(((Number(singleOrder.grand_total) * 100) / Number(grandTotal)).toFixed(2));\r\n                let discountAmt = Number(((Number(maxDiscount) * Number(percentage)) / 100).toFixed(2));\r\n                let partPayment = 0;\r\n                if (payment_mode === \"CUSTOM\" || payment_mode === \"TWENTY_ADV\") {\r\n                    partPayment = Number(((Number(paymentAmt) * Number(percentage)) / 100).toFixed(2));\r\n                }\r\n                if (payment_mode === \"PREPAID\") {\r\n                    partPayment = Number(singleOrder.grand_total) - Number(discountAmt);\r\n                }\r\n                singleOrder.discounted_amount = discountAmt;\r\n                let payment = await createPayment(\r\n                    singleOrder.order_status_id.status,\r\n                    payment_mode,\r\n                    singleOrder.orderId,\r\n                    singleOrder._id,\r\n                    singleOrder.grand_total,\r\n                    discountAmt,\r\n                    partPayment,\r\n                    customerId,\r\n                    transaction_id\r\n                );\r\n                if (payment.status) {\r\n                    singleOrder.payment_id = payment.paymentId;\r\n                } else {\r\n                    return res.status(400).send({ status: false, message: \"Bad request\" });\r\n                }\r\n                singleOrder.shipping_address = {\r\n                    stateCode: address.stateCode,\r\n                    state: address.state,\r\n                    address: address.address,\r\n                };\r\n                await singleOrder.save();\r\n                customer.orders.push(singleOrder._id);\r\n            }\r\n            coupon.customer_id.push(customerId);\r\n            await coupon.save();\r\n            await customer.save();\r\n        } else {\r\n            for (let singleOrder of orders) {\r\n                let percentage = Number(((Number(singleOrder.grand_total) * 100) / Number(grandTotal)).toFixed(2));\r\n                let discountAmt = 0;\r\n                let partPayment = 0;\r\n                if (payment_mode === \"CUSTOM\" || payment_mode === \"TWENTY_ADV\") {\r\n                    partPayment = Number(((paymentAmt * percentage) / 100).toFixed(2));\r\n                }\r\n                if (payment_mode === \"PREPAID\") {\r\n                    partPayment = Number(singleOrder.grand_total) - Number(discountAmt);\r\n                }\r\n                let payment = await createPayment(\r\n                    singleOrder.order_status_id.status,\r\n                    payment_mode,\r\n                    singleOrder.orderId,\r\n                    singleOrder._id,\r\n                    singleOrder.grand_total,\r\n                    discountAmt,\r\n                    partPayment,\r\n                    customerId,\r\n                    transaction_id\r\n                );\r\n                if (payment.status) {\r\n                    singleOrder.payment_id = payment.paymentId;\r\n                } else {\r\n                    return res.status(400).send({ status: false, message: \"Bad request\" });\r\n                }\r\n                singleOrder.shipping_address = {\r\n                    stateCode: address.stateCode,\r\n                    state: address.state,\r\n                    address: address.address,\r\n                };\r\n                await singleOrder.save();\r\n                customer.orders.push(singleOrder._id);\r\n            }\r\n            await customer.save();\r\n        }\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order Created Successfully\",\r\n            data: \"orders\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ORDERS\r\nconst getAllOrders = async (req, res) => {\r\n    try {\r\n        let orders = null;\r\n        if (req.userModel === \"VENDOR\") {\r\n            orders = await orderModel\r\n                .find({ vendorId: req.userId })\r\n                .populate([\"vendorId\", \"order_status_id\", \"ordered_products\", \"purchaseInvoice\"])\r\n                .select([\"-shipping_address\", \"-couponCode\", \"-customer_id\"])\r\n                .sort({ createdAt: -1 });\r\n            // .populate({ path: \"ordered_products\", model: \"Ordered_Product\", populate: { path: \"products.product_id\", model: \"Product\" } });\r\n        } else {\r\n            orders = await orderModel\r\n                .find()\r\n                .populate([\r\n                    \"vendorId\",\r\n                    \"payment_id\",\r\n                    \"order_status_id\",\r\n                    \"ordered_products\",\r\n                    \"purchaseInvoice\",\r\n                    \"saleInvoice\",\r\n                    { path: \"CouponCode\", strictPopulate: false },\r\n                    { path: \"customer_id\", model: \"Customer\", populate: { path: \"defaultAddress\", model: \"CustomerAddress\" } },\r\n                ])\r\n                .sort({ createdAt: -1 });\r\n            // .select(\"-vendorAmtInfo\")\r\n            // .populate({\r\n            //     path: \"ordered_products\",\r\n            //     model: \"Ordered_Product\",\r\n            //     populate: { path: \"products.product_id\", model: \"Product\", populate: { path: \"product_id.brandId\", model: \"Brand\" } },\r\n            // });\r\n        }\r\n        return res.status(200).send({ status: true, data: orders });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ORDER BY ORDER ID\r\nconst getOrderByOrderId = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        let customerId = req.params.customerId;\r\n        if (!isValidObjectId(customerId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Customer id\" });\r\n        }\r\n        let order = await orderModel\r\n            .findOne({ customer_id: customerId, orderId: orderId })\r\n            .populate([\r\n                \"payment_id\",\r\n                \"order_status_id\",\r\n                { path: \"ordered_products\", model: \"Ordered_Product\", populate: { path: \"products.product_id\", model: \"Product\" } },\r\n                \"saleInvoice\",\r\n                { path: \"CouponCode\", strictPopulate: false },\r\n            ])\r\n            .select(\"-purchaseInvoice\");\r\n        if (!order) {\r\n            return res.status(404).send({ status: false, message: \"Order not found\" });\r\n        }\r\n        return res.status(200).send({ status: true, data: order });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ORDERS OF A CUSTOMER\r\nconst getOrdersByCustomerId = async (req, res) => {\r\n    try {\r\n        let customerId = req.params.customerId;\r\n        let customerOrders = await orderModel.find({ customer_id: customerId }).populate([\"vendorId\", \"customer_id\", \"payment_id\", \"order_status_id\", \"ordered_products\"]);\r\n\r\n        return res.status(200).send({ status: true, data: customerOrders });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// CANCEL ORDER BY ORDER ID\r\nconst cancelOrderByOrderId = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Order Id\" });\r\n        }\r\n\r\n        let order = await orderModel.findOne({ _id: orderId });\r\n\r\n        if (!order) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order not found with this order id\",\r\n            });\r\n        }\r\n\r\n        let data = req.body;\r\n\r\n        let { Status } = data;\r\n\r\n        if (order.Status === \"Cancelled\") {\r\n            return res.status(400).send({ status: false, message: \"Order is already cancelled\" });\r\n        }\r\n\r\n        let orderStatus = await orderModel.findOneAndUpdate({ _id: orderId }, { $set: { Status: \"Cancelled\" } }, { new: true });\r\n\r\n        await order.save();\r\n\r\n        return res.status(202).send({ status: true, message: \"Order Cancelled Successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE ORDER BY ORDER ID\r\nconst updateOrderByOrderId = async (req, res) => {\r\n    try {\r\n        //CONFIRM, PARTIAL, CANCEL\r\n        let orderId = req.params.orderId;\r\n        let { orderType, cancelMessage, questionId, removedProductIds } = req.body;\r\n        if (!orderType || !orderId) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let order = await orderModel.findOne({ orderId: orderId }).populate([\"ordered_products\", \"order_status_id\"]);\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        if (order.order_status_id.status !== \"PENDING\" && req.userModel === \"VENDOR\") {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        let payment = await paymentModel.findById(order.payment_id._id);\r\n        if (!payment) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n\r\n        if (orderType === \"PARTIAL_CONFIRMED\") {\r\n            let orderedProduct = order.ordered_products;\r\n            let partialCanceledAmt = 0;\r\n            let partialCanceledGstAmt = 0;\r\n            let orderedProductAmtInfo = {\r\n                productQty: 0,\r\n                total: 0,\r\n                GST_amount: 0,\r\n                grand_total: 0,\r\n            };\r\n            let orderedAmtInfo = {\r\n                grand_total: 0,\r\n                total: 0,\r\n                GST_amount: 0,\r\n                discounted_amount: 0,\r\n            };\r\n            for (let s_product of orderedProduct.products) {\r\n                if (s_product.isRemoved === false && removedProductIds.includes(s_product._id.toString())) {\r\n                    s_product.isRemoved = true;\r\n                    let canceledAmt = Number(s_product.seller_price) * Number(s_product.qty);\r\n                    partialCanceledAmt += canceledAmt;\r\n                    partialCanceledGstAmt += Number(((canceledAmt * Number(s_product.seller_gst)) / 100).toFixed(2));\r\n                    let adminCancelledAmt = canceledAmt + (canceledAmt * s_product.margin) / 100;\r\n                    orderedProductAmtInfo.productQty += 1;\r\n                    orderedProductAmtInfo.total += Number(adminCancelledAmt.toFixed(2));\r\n                    orderedProductAmtInfo.GST_amount += Number(((adminCancelledAmt * s_product.selling_gst) / 100).toFixed(2));\r\n                    orderedProductAmtInfo.grand_total += adminCancelledAmt + Number(((adminCancelledAmt * s_product.selling_gst) / 100).toFixed(2));\r\n                }\r\n            }\r\n            order.order_status_id.status = orderType;\r\n            payment.order_status = \"PARTIAL_CONFIRMED\";\r\n            let updatedByObj = {};\r\n            if (req.userModel === \"VENDOR\") {\r\n                updatedByObj.vendor = req.userId;\r\n            } else if (req.userModel === \"ADMIN\") {\r\n                updatedByObj.admin = req.userId;\r\n            }\r\n            let statusObj = {\r\n                status: orderType,\r\n                updatedBy: updatedByObj,\r\n                updatedAt: new Date(),\r\n                description: cancelMessage,\r\n            };\r\n            order.order_status_id.statusList.push(statusObj);\r\n            order.vendorAmtInfo.gstAmt -= partialCanceledGstAmt;\r\n            order.vendorAmtInfo.total -= partialCanceledAmt;\r\n            order.vendorAmtInfo.grandTotal -= partialCanceledGstAmt + partialCanceledAmt;\r\n            orderedAmtInfo.GST_amount = order.GST_amount;\r\n            orderedAmtInfo.total = order.total;\r\n            orderedAmtInfo.grand_total = order.grand_total;\r\n            order.GST_amount -= orderedProductAmtInfo.GST_amount;\r\n            order.total -= orderedProductAmtInfo.total;\r\n            order.grand_total -= orderedProductAmtInfo.grand_total;\r\n            order.partialCancelOrderInfo = {\r\n                orderedAmtInfo,\r\n                orderedProductAmtInfo,\r\n            };\r\n            await orderedProduct.save();\r\n            await order.order_status_id.save();\r\n            let purchaseGstAmount = 0;\r\n            let purchaseTotalAmount = 0;\r\n            for (let singleOrderProduct of order.ordered_products.products) {\r\n                purchaseGstAmount += (singleOrderProduct.seller_price * singleOrderProduct.qty * singleOrderProduct.seller_gst) / 100;\r\n                purchaseTotalAmount += singleOrderProduct.seller_price * singleOrderProduct.qty;\r\n            }\r\n\r\n            let invDataPurchase = {\r\n                vendor_id: order.vendorId,\r\n                order_id: order._id,\r\n                gstAmount: purchaseGstAmount,\r\n                totalAmount: purchaseTotalAmount,\r\n            };\r\n            let invDataSale = {\r\n                customer_id: order.customer_id,\r\n                order_id: order._id,\r\n                gstAmount: order.GST_amount,\r\n                totalAmount: order.total,\r\n                address: order.shipping_address,\r\n            };\r\n            if ((payment.payment_mode === \"CUSTOM\" || payment.payment_mode === \"TWENTY_ADV\") && payment.partial_payment.payment_amount >= Number(order.grand_total) - Number(order.discounted_amount)) {\r\n                payment.return_amount = (Number(payment.partial_payment.payment_amount) - (Number(order.grand_total) - Number(order.discounted_amount))).toFixed(2);\r\n                payment.balance_amount = 0;\r\n            } else if ((payment.payment_mode === \"CUSTOM\" || payment.payment_mode === \"TWENTY_ADV\") && payment.partial_payment.payment_amount < order.grand_total) {\r\n                payment.return_amount = 0;\r\n                let x = Number(order.grand_total) - Number(order.discounted_amount);\r\n                payment.balance_amount = x - Number(payment.partial_payment.payment_amount).toFixed(2);\r\n            } else if (payment.payment_mode === \"PREPAID\" && payment.payment_amount >= Number(order.grand_total) - Number(order.discounted_amount)) {\r\n                payment.return_amount = (Number(payment.payment_amount) - (Number(order.grand_total) - Number(order.discounted_amount))).toFixed(2);\r\n                payment.balance_amount = 0;\r\n            } else if (payment.payment_mode === \"COD\") {\r\n                payment.return_amount = 0;\r\n                payment.balance_amount = Number(order.grand_total) - Number(order.discounted_amount);\r\n            }\r\n            payment.order_amount = order.grand_total;\r\n            let resData = await generatePurchaseInvoice(invDataPurchase);\r\n            let resData2 = await generateSaleInvoice(invDataSale);\r\n            if (resData.status) {\r\n                order.purchaseInvoice = resData.invoice._id;\r\n            }\r\n            if (resData2.status) {\r\n                order.saleInvoice = resData2.invoice._id;\r\n            }\r\n        }\r\n        if (orderType === \"CANCEL\") {\r\n            order.order_status_id.status = \"CANCELLED\";\r\n            payment.order_status = \"CANCELLED\";\r\n            let updatedByObj = {};\r\n            if (req.userModel === \"VENDOR\") {\r\n                updatedByObj.vendor = req.userId;\r\n            } else if (req.userModel === \"ADMIN\") {\r\n                updatedByObj.admin = req.userId;\r\n            } else {\r\n                updatedByObj.customer = req.userId;\r\n            }\r\n            order.order_status_id.cancelled.userId = updatedByObj;\r\n            order.order_status_id.cancelled.question = questionId;\r\n            order.order_status_id.cancelled.description = cancelMessage;\r\n            order.order_status_id.cancelledStatus = \"CANCELLED\";\r\n            let objOfCancelledStatusList = {\r\n                status: \"CANCELLED\",\r\n                updatedBy: updatedByObj,\r\n                updatedAt: new Date(),\r\n            };\r\n            order.order_status_id.cancelledStatusList.push(objOfCancelledStatusList);\r\n            if (payment.payment_mode === \"CUSTOM\" || payment.payment_mode === \"PREPAID\" || payment.payment_mode === \"TWENTY_ADV\") {\r\n                if (payment.payment_mode === \"CUSTOM\") {\r\n                    payment.return_amount = Number(payment.partial_payment.payment_amount) + Number(payment.cod_received);\r\n                    payment.balance_amount = 0;\r\n                } else if (payment.payment_mode === \"PREPAID\") {\r\n                    payment.return_amount = payment.payment_amount;\r\n                    payment.balance_amount = 0;\r\n                } else if (payment.payment_mode === \"TWENTY_ADV\") {\r\n                    payment.return_amount = payment.partial_payment.payment_amount + Number(payment.cod_received);\r\n                    payment.balance_amount = 0;\r\n                }\r\n            } else if (payment.payment_mode === \"COD\") {\r\n                payment.return_amount = Number(payment.cod_received);\r\n                payment.balance_amount = 0;\r\n            }\r\n            await order.order_status_id.save();\r\n        }\r\n        if (orderType === \"CONFIRMED\") {\r\n            order.order_status_id.status = orderType;\r\n            payment.order_status = \"CONFIRMED\";\r\n            let updatedByObj = {};\r\n            if (req.userModel === \"VENDOR\") {\r\n                updatedByObj.vendor = req.userId;\r\n            } else if (req.userModel === \"ADMIN\") {\r\n                updatedByObj.admin = req.userId;\r\n            }\r\n            let statusObj = {\r\n                status: orderType,\r\n                updatedBy: updatedByObj,\r\n                updatedAt: new Date(),\r\n            };\r\n            order.order_status_id.statusList.push(statusObj);\r\n            await order.order_status_id.save();\r\n            let purchaseGstAmount = 0;\r\n            let purchaseTotalAmount = 0;\r\n            for (let singleOrderProduct of order.ordered_products.products) {\r\n                purchaseGstAmount += (singleOrderProduct.seller_price * singleOrderProduct.qty * singleOrderProduct.seller_gst) / 100;\r\n                purchaseTotalAmount += singleOrderProduct.seller_price * singleOrderProduct.qty;\r\n            }\r\n\r\n            let invDataPurchase = {\r\n                vendor_id: order.vendorId,\r\n                order_id: order._id,\r\n                gstAmount: purchaseGstAmount,\r\n                totalAmount: purchaseTotalAmount,\r\n            };\r\n            let invDataSale = {\r\n                customer_id: order.customer_id,\r\n                order_id: order._id,\r\n                gstAmount: order.GST_amount,\r\n                totalAmount: order.total,\r\n                address: order.shipping_address,\r\n            };\r\n            let resData = await generatePurchaseInvoice(invDataPurchase);\r\n            let resData2 = await generateSaleInvoice(invDataSale);\r\n            if (resData.status) {\r\n                order.purchaseInvoice = resData.invoice._id;\r\n            } else {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: resData.err,\r\n                });\r\n            }\r\n            if (resData2.status) {\r\n                order.saleInvoice = resData2.invoice._id;\r\n            } else {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: resData2.err,\r\n                });\r\n            }\r\n        }\r\n        await payment.save();\r\n        await order.save();\r\n        return res.status(202).send({\r\n            status: true,\r\n            message: \"Order updated successfully\",\r\n            data: order,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getOrderedProduct = async (req, res) => {\r\n    try {\r\n        let id = req.params.orderedproductid;\r\n        let obj = await orderedProductModel.findById(id).populate(\"products.product_id\");\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"details fetched successfully...\",\r\n            data: obj,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst patchTrackingIdByOrderId = async (req, res) => {\r\n    try {\r\n        let id = req.params.orderId;\r\n        let { t_id } = req.body;\r\n        if (!id || !t_id) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let obj = await orderModel.findOne({ orderId: id }).populate(\"order_status_id\");\r\n        if (!obj) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        if (obj.order_status_id.status === \"PENDING\") {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        obj.tracking_id = t_id;\r\n        await obj.save();\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Tracking ID Updated successfully...\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllCancelledOrder = async (req, res) => {\r\n    try {\r\n        let userModel = req.userModel;\r\n        let userId = req.userId;\r\n        let orders = null;\r\n        if (userModel === \"VENDOR\") {\r\n            orders = await orderModel\r\n                .find({ vendorId: req.userId })\r\n                .populate([\"vendorId\", \"order_status_id\", \"ordered_products\"])\r\n                .select([\"-shipping_address\", \"-couponCode\", \"-customer_id\"])\r\n                .sort({ createdAt: -1 });\r\n        } else {\r\n            orders = await orderModel.find().populate([\"vendorId\", \"customer_id\", \"payment_id\", \"order_status_id\", \"ordered_products\"]).sort({ createdAt: -1 });\r\n        }\r\n\r\n        if (!orders) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        let cancelledOrders = [];\r\n        for (let order of orders) {\r\n            if (order.order_status_id.status === \"CANCELLED\") {\r\n                cancelledOrders.push(order);\r\n            }\r\n        }\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Cancelled orders fetched...\",\r\n            data: cancelledOrders,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createOrder,\r\n    getAllOrders,\r\n    getOrderByOrderId,\r\n    getOrdersByCustomerId,\r\n    cancelOrderByOrderId,\r\n    updateOrderByOrderId,\r\n    getOrderedProduct,\r\n    patchTrackingIdByOrderId,\r\n    getAllCancelledOrder,\r\n};\r\n","const orderStatusTableModel = require(\"../models/orderStatusTableModel\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst cancelledReasonModel = require(\"../models/cancelledReasonModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// CREATE ORDER STATUS TABLE\r\nconst createOrderStatusTable = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Order Id\" });\r\n        }\r\n\r\n        let order = await orderModel.findOne({ _id: orderId });\r\n\r\n        if (!order) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order not found with this order id\",\r\n            });\r\n        }\r\n\r\n        let data = req.body;\r\n\r\n        let { questions, customerAnswer } = data;\r\n\r\n        let orderStatus = await orderModel.findOneAndUpdate({ _id: orderId }, { $set: { Status: \"Cancelled\" } }, { new: true });\r\n\r\n        await order.save();\r\n\r\n        let cancelledReasonData = {\r\n            questions,\r\n            customerAnswer,\r\n        };\r\n\r\n        let newCancelledReason = await cancelledReasonModel.create(cancelledReasonData);\r\n\r\n        let cancelledObj = {\r\n            cancelledBy: req.body.cancelledBy,\r\n            userId: req.body.userId,\r\n            reason: newCancelledReason._id,\r\n        };\r\n\r\n        let orderStatusTableData = await orderStatusTableModel.create({\r\n            order_id: order._id,\r\n            status: \"Cancelled\",\r\n            isCompleted: false,\r\n            cancelled: cancelledObj,\r\n        });\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: {\r\n                OrderStatusTableData: orderStatusTableData,\r\n                cancelledReasonData: newCancelledReason,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ORDER STATUS TABLES\r\nconst getAllOrderStatusTables = async (req, res) => {\r\n    try {\r\n        let allOrderStatusTables = await orderStatusTableModel.find();\r\n        return res.status(200).send({ status: true, data: allOrderStatusTables });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ORDER STATUS TABLE BY ID\r\nconst getOrderStatusTableById = async (req, res) => {\r\n    try {\r\n        let orderStatusTableId = req.params.orderStatusTableId;\r\n\r\n        if (!isValidObjectId(orderStatusTableId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid order status table id\",\r\n            });\r\n        }\r\n\r\n        let orderStatusTable = await orderStatusTableModel.findOne({\r\n            _id: orderStatusTableId,\r\n        });\r\n\r\n        if (!orderStatusTable) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order Status Table not found\",\r\n            });\r\n        }\r\n\r\n        return res.status(200).send({ status: true, data: orderStatusTable });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE ORDER STATUS TABLE BY ORDER ID\r\nconst updateOrderStatusByOrderId = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        let { status } = req.body;\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid order id\" });\r\n        }\r\n\r\n        let orderStatusTable = await orderStatusTableModel.findOne({\r\n            order_id: orderId,\r\n        });\r\n\r\n        if (!orderStatusTable) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order status table not found\",\r\n            });\r\n        }\r\n        if (!status) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        orderStatusTable.status = status;\r\n\r\n        let updatedByObj = {};\r\n        if (req.userModel === \"VENDOR\") {\r\n            updatedByObj.vendor = req.userId;\r\n        } else if (req.userModel === \"ADMIN\") {\r\n            updatedByObj.admin = req.userId;\r\n        }\r\n        let statusObj = {\r\n            status: status,\r\n            updatedBy: updatedByObj,\r\n            updatedAt: new Date(),\r\n        };\r\n        orderStatusTable.statusList.push(statusObj);\r\n        await orderStatusTable.save();\r\n        return res.status(202).send({ status: true, message: \"Success\", data: orderStatusTable });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst bulkOrderProcess = async (req, res) => {\r\n    try {\r\n        let { status, orderIds } = req.body;\r\n        // let const records = await Model.find({ '_id': { $in: ids } });\r\n\r\n        let orderStatusTables = await orderStatusTableModel.find({ order_id: { $in: orderIds } });\r\n        let updatedByObj = {};\r\n        if (req.userModel === \"VENDOR\") {\r\n            updatedByObj.vendor = req.userId;\r\n        } else if (req.userModel === \"ADMIN\") {\r\n            updatedByObj.admin = req.userId;\r\n        }\r\n        let statusObj = {\r\n            status: status,\r\n            updatedBy: updatedByObj,\r\n            updatedAt: new Date(),\r\n        };\r\n        for await (let orderStatusTable of orderStatusTables) {\r\n            if (orderStatusTable.status !== \"CANCELLED\" && orderStatusTable.status !== \"PENDING\") {\r\n                orderStatusTable.status = status;\r\n                orderStatusTable.statusList.push(statusObj);\r\n                await orderStatusTable.save();\r\n            }\r\n        }\r\n        return res.status(202).send({ status: true, message: \"Orders Processed\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst cancelOrderReturnById = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        let { status } = req.body;\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid order id\" });\r\n        }\r\n\r\n        let orderStatusTable = await orderStatusTableModel.findOne({\r\n            order_id: orderId,\r\n        });\r\n\r\n        if (!orderStatusTable) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Order status table not found\",\r\n            });\r\n        }\r\n        if (!status) {\r\n            return res.status(400).send({ status: false, message: \"Bad request\" });\r\n        }\r\n        orderStatusTable.cancelledStatus = status;\r\n        let updatedByObj = {};\r\n        if (req.userModel === \"VENDOR\") {\r\n            updatedByObj.vendor = req.userId;\r\n        } else if (req.userModel === \"ADMIN\") {\r\n            updatedByObj.admin = req.userId;\r\n        } else {\r\n            updatedByObj.customer = req.userId;\r\n        }\r\n        let objOfCancelledStatusList = {\r\n            status: status,\r\n            updatedBy: updatedByObj,\r\n            updatedAt: new Date(),\r\n        };\r\n        orderStatusTable.cancelledStatusList.push(objOfCancelledStatusList);\r\n        await orderStatusTable.save();\r\n        return res.status(202).send({ status: true, message: \"Return Status Updated\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createOrderStatusTable,\r\n    getAllOrderStatusTables,\r\n    getOrderStatusTableById,\r\n    updateOrderStatusByOrderId,\r\n    bulkOrderProcess,\r\n    cancelOrderReturnById\r\n};\r\n","const jwt = require(\"jsonwebtoken\");\r\nconst { twilioAccSID, twilioAuthToken, twilioVerifySID, tokenSecretKey, customerTokenSecretKey } = require(\"../middlewares/config\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst accountSid = twilioAccSID;\r\nconst authToken = twilioAuthToken;\r\nconst verifySid = twilioVerifySID;\r\nconst client = require(\"twilio\")(accountSid, authToken);\r\n\r\nconst sendOTP = async (req, res) => {\r\n    try {\r\n        let phone = req.params.phone;\r\n        // console.log(req.params);\r\n        if (!phone) {\r\n            return res.status(400).send({ status: false, message: \"phone number are required\" });\r\n        }\r\n        // console.log(phone);\r\n        let isSent = false;\r\n        await client.verify.v2\r\n            .services(verifySid)\r\n            .verifications.create({ to: `+91${phone}`, channel: \"sms\" })\r\n            .then((verification) => {\r\n                isSent = true;\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n        if (isSent) {\r\n            return res.status(200).send({ status: true, message: \"OTP send successfully\" });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Otp not send\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst createAccountAndToken = async (phone) => {\r\n    try {\r\n        let customer = await customerModel.findOne({ phone: phone, isDeleted: false });\r\n\r\n        if (!customer) {\r\n            customer = await customerModel.create({ phone });\r\n        }\r\n        if (customer.isBlocked) {\r\n            return { statusCode: 403, status: false, message: \"This account has been blocked\" };\r\n        }\r\n        if (!customer.isActivated) {\r\n            return { statusCode: 200, status: true, isActivated: false, data: { customerId: customer._id }, message: \"Account is not active, Please fill your information\" };\r\n        }\r\n        let data = {\r\n            name: customer.name,\r\n            email: customer.email,\r\n            userType: \"CUSTOMER\",\r\n            customerId: customer._id.toString(),\r\n            phone: customer.phone,\r\n            isActivated: customer.isActivated,\r\n        };\r\n        if (customer.profileUrl) data.photo = customer.profileUrl;\r\n        if (customer.alternate_phone) data.altMobileNo = customer.alternate_phone;\r\n\r\n        let date = Date.now();\r\n        let issueTime = Math.floor(date / 1000);\r\n        let token = jwt.sign(\r\n            {\r\n                userId: customer._id.toString(),\r\n                phone: customer.phone,\r\n                userModel: \"CUSTOMER\",\r\n                iat: issueTime,\r\n            },\r\n            customerTokenSecretKey,\r\n            { expiresIn: \"24h\" }\r\n        );\r\n        data.token = token;\r\n        return { statusCode: 200, status: true, message: \"Login successfully\", data: data };\r\n    } catch (error) {\r\n        return { statusCode: 500, status: false, message: \"something went wrong\" };\r\n    }\r\n};\r\n\r\nconst updatePassword = async (phone, password) => {\r\n    try {\r\n        let customer = await customerModel.findOne({ phone: phone, isDeleted: false });\r\n        if (!customer) {\r\n            customer = await customerModel.create({ phone });\r\n        }\r\n        if (customer.isBlocked) {\r\n            return { statusCode: 403, status: false, message: \"This account has been blocked\" };\r\n        }\r\n        if (!customer.isActivated) {\r\n            return { statusCode: 200, status: true, isActivated: false, data: { customerId: customer._id }, message: \"Account is not active, Please fill your information\" };\r\n        }\r\n        let hashedPassword = await bcrypt.hash(password, 10);\r\n        customer.password = hashedPassword;\r\n\r\n        await customer.save();\r\n        return { statusCode: 200, status: true, message: \"Password updated successfully\" };\r\n    } catch (error) {\r\n        return { statusCode: 500, status: false, message: \"something went wrong\" };\r\n    }\r\n};\r\n\r\nconst verityOTP = async (req, res) => {\r\n    try {\r\n        let phone = req.params.phone;\r\n        let otpCode = req.params.otpCode;\r\n        if (!phone || !otpCode) {\r\n            return res.status(400).send({ status: false, message: \"phone number and otp are required\" });\r\n        }\r\n        let isValid = false;\r\n        await client.verify.v2\r\n            .services(verifySid)\r\n            .verificationChecks.create({ to: `+91${phone}`, code: otpCode })\r\n            .then((verification_check) => {\r\n                // console.log(\"verification_check.status\", verification_check.status);\r\n                // console.log(\"verification_check\", verification_check);\r\n                if (verification_check.status === \"approved\" || verification_check.valid === true) {\r\n                    isValid = true;\r\n                }\r\n            })\r\n            .catch((err) => {});\r\n        if (isValid) {\r\n            let resAcc = await createAccountAndToken(phone);\r\n            // console.log(resAcc);\r\n            if (resAcc.statusCode === 403) {\r\n                return res.status(403).send({ status: false, message: resAcc.message });\r\n            } else if (resAcc.statusCode === 200 && resAcc.isActivated) {\r\n                res.setHeader(\"Authorization\", \"Bearer \" + resAcc.data.token);\r\n                return res.status(200).send({ status: true, isActivated: true, message: resAcc.message, data: resAcc.data });\r\n            } else if (resAcc.statusCode === 200 && !resAcc.isActivated) {\r\n                return res.status(200).send({ status: true, isActivated: false, message: resAcc.message, data: resAcc.data });\r\n            } else if (resAcc.statusCode === 500) {\r\n                return res.status(500).send({ status: false, message: resAcc.message });\r\n            } else {\r\n                return res.status(400).send({ status: false, message: \"Something went wrong...\" });\r\n            }\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"otp not verified\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst forgetPasswordUsingOtp = async (req, res) => {\r\n    try {\r\n        let phone = req.params.phone;\r\n        let otpCode = req.params.otpCode;\r\n        let { password } = req.body;\r\n\r\n        if (!phone || !otpCode || !password) {\r\n            return res.status(400).send({ status: false, message: \"Phone number, password and otp are required\" });\r\n        }\r\n\r\n        let isValid = false;\r\n        await client.verify.v2\r\n            .services(verifySid)\r\n            .verificationChecks.create({ to: `+91${phone}`, code: otpCode })\r\n            .then((verification_check) => {\r\n                if (verification_check.status === \"approved\" || verification_check.valid === true) {\r\n                    isValid = true;\r\n                }\r\n            })\r\n            .catch((err) => {});\r\n        if (isValid) {\r\n            let resAcc = await updatePassword(phone, password);\r\n            return res.status(resAcc.statusCode).send({ status: resAcc.status, message: resAcc.message });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"OTP not verified\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { sendOTP, verityOTP, forgetPasswordUsingOtp };\r\n","const paymentModel = require(\"../models/paymentModel\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst cartModel = require(\"../models/cartModel\");\r\nconst customerModel = require(\"../models/customerAddressModel\");\r\nconst { generateRandomID } = require(\"./idGeneratorController\");\r\n\r\n// CREATE PAYMENT\r\nconst createPayment = async (order_status, payment_mode, order_sortId, order_id, orderAmt, discountAmt, paymentAmt, customer_id, transaction_id) => {\r\n    try {\r\n        // let orderId = req.params.orderId;\r\n        // let { payment_mode, paymentAmt, customer_id, transaction_id } = req.body;\r\n\r\n        if (!payment_mode || !customer_id) {\r\n            return { status: false };\r\n        }\r\n        let paymentData = {\r\n            order_status,\r\n            paymentId: generateRandomID(20),\r\n            customer_id,\r\n            payment_status: \"\",\r\n            payment_mode,\r\n            order_amount: orderAmt,\r\n            discount_amt: discountAmt,\r\n            balance_amount: 0,\r\n            order_id: {\r\n                orderId: order_id,\r\n                order_custom_id: order_sortId,\r\n            },\r\n        };\r\n        if (payment_mode === \"CUSTOM\" || payment_mode === \"TWENTY_ADV\") {\r\n            paymentData.partial_payment = {\r\n                payment_amount: paymentAmt.toFixed(2),\r\n                date: new Date(),\r\n                transactionId: transaction_id,\r\n            };\r\n            paymentData.payment_status = \"PARTIAL_PAID\";\r\n            if (orderAmt > paymentAmt) {\r\n                paymentData.balance_amount = (orderAmt - paymentAmt - discountAmt).toFixed(2);\r\n            }\r\n        } else if (payment_mode === \"PREPAID\") {\r\n            paymentData.transactionId = transaction_id;\r\n            paymentData.payment_amount = paymentAmt.toFixed(2);\r\n            paymentData.payment_status = \"RECEIVED\";\r\n            paymentData.payment_date = new Date();\r\n            paymentData.balance_amount = 0;\r\n        } else if (payment_mode === \"COD\") {\r\n            paymentData.payment_status = \"PENDING\";\r\n            paymentData.balance_amount = (orderAmt - paymentAmt - discountAmt).toFixed(2);\r\n        }\r\n\r\n        let paymentObj = await paymentModel.create(paymentData);\r\n        return { status: true, paymentId: paymentObj._id };\r\n    } catch (error) {\r\n        return { status: false };\r\n    }\r\n};\r\n\r\n// UPDATE PAYMENT API\r\nconst updatePaymentStatus = async (req, res) => {\r\n    try {\r\n        let paymentId = req.params.paymentId;\r\n        let { payment_date, payment_amount, payment_status } = req.body;\r\n        console.log(req.body);\r\n        // console.log(paymentId);\r\n        let payment = await paymentModel.findById(paymentId);\r\n        // console.log(payment);\r\n        if (!payment) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Payment not found with this payment id\",\r\n            });\r\n        }\r\n\r\n        if (!payment_date || !payment_amount || !payment_status) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\",\r\n            });\r\n        }\r\n\r\n        payment.payment_date = new Date(payment_date);\r\n        switch (payment_status) {\r\n            case \"RECEIVED\": {\r\n                if (Number(payment.balance_amount) !== Number(payment_amount)) {\r\n                    return res.status(400).send({\r\n                        status: false,\r\n                        message: \"Received amount should be equal to balance amount\",\r\n                    });\r\n                } else {\r\n                    payment.payment_amount += Number(payment_amount);\r\n                    payment.cod_received = Number(payment_amount);\r\n                    payment.payment_status = payment_status;\r\n                    payment.balance_amount = 0;\r\n                }\r\n                break;\r\n            }\r\n            case \"REFUNDED\": {\r\n                if (Number(payment.return_amount) !== Number(payment_amount)) {\r\n                    return res.status(400).send({\r\n                        status: false,\r\n                        message: \"Cancelled amount should be equal to refund amount\",\r\n                    });\r\n                } else if (payment.order_status === \"CANCELLED\") {\r\n                    payment.payment_status = \"REFUNDED\";\r\n                    payment.return_amount = Number(payment_amount);\r\n                    payment.balance_amount = 0;\r\n                } else if (payment.order_status === \"PARTIAL_CONFIRMED\") {\r\n                    payment.payment_status = \"PARTIAL_REFUNDED\";\r\n                    payment.return_amount = Number(payment_amount);\r\n                    payment.balance_amount = 0;\r\n                } else {\r\n                    payment.payment_status = \"REFUNDED\";\r\n                    payment.return_amount = Number(payment_amount);\r\n                    payment.balance_amount = 0;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n        await payment.save();\r\n        return res.status(202).send({\r\n            status: true,\r\n            message: \"Payment status updated successfully\",\r\n            data: payment,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// CREATE PAYMENT\r\nconst addPayment = async (req, res) => {\r\n    try {\r\n        let orderId = req.params.orderId;\r\n        let data = req.body;\r\n        let payment = 856.8;\r\n\r\n        let { payment_mode } = data;\r\n\r\n        let order = await orderModel.findOne({ _id: orderId });\r\n\r\n        if (!order) {\r\n            return res.status(404).send({ status: false, message: \"Order not found\" });\r\n        }\r\n\r\n        if (payment > order.grand_total) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Paid amount can not be greater than the Grand Total\",\r\n            });\r\n        }\r\n\r\n        let paymentDetails = {\r\n            paymentId: generateRandomID(10),\r\n            order_id: order._id,\r\n            customer_id: order.customer_id,\r\n            payment_status: \"Pending\",\r\n            payment_mode,\r\n            transactionId: generateRandomID(25),\r\n            payment_amount: payment,\r\n            payment_date: new Date().toLocaleString(),\r\n            partial_mode: null,\r\n        };\r\n\r\n        if (payment_mode === \"TEN_ADV\") {\r\n            let ten_percent_amount = order.grand_total * 0.1;\r\n            let partialPaymentDetails = {\r\n                payment_mode: \"TEN_ADV\",\r\n                amount: ten_percent_amount,\r\n                date: new Date(),\r\n                transactionId: generateRandomID(25),\r\n            };\r\n\r\n            // paymentDetailsData.push(partialPaymentDetails);\r\n\r\n            let firstPartialPayment = await partialPaymentModel.findOne({});\r\n\r\n            if (firstPartialPayment) {\r\n                let partialPaymentDetails = {\r\n                    payment_mode: \"TEN_ADV\",\r\n                    amount: order.grand_total - ten_percent_amount,\r\n                    date: new Date(),\r\n                    transactionId: generateRandomID(25),\r\n                };\r\n                firstPartialPayment.paymentDetails.push(partialPaymentDetails);\r\n\r\n                await firstPartialPayment.save();\r\n            }\r\n\r\n            let partialPaymentData = {\r\n                paymentDetails: partialPaymentDetails,\r\n                remaining_amount: order.grand_total - partialPaymentDetails.amount,\r\n            };\r\n\r\n            newPartialPayment = await partialPaymentModel.create(partialPaymentData);\r\n\r\n            paymentDetails.partial_mode = newPartialPayment._id;\r\n\r\n            paymentDetails.payment_status = \"Pending\";\r\n            paymentDetails.payment_amount = ten_percent_amount;\r\n\r\n            paymentDetails.paymentDetails = [partialPaymentDetails];\r\n\r\n            let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: {\r\n                    partialPaymentData: newPartialPayment,\r\n                    paymentData: newPayment,\r\n                },\r\n            });\r\n        } else if (payment_mode === \"TWENTY_ADV\") {\r\n            let twenty_percent_amount = order.grand_total * 0.2;\r\n            let partialPaymentDetails = {\r\n                payment_mode: \"TWENTY_ADV\",\r\n                amount: twenty_percent_amount,\r\n                date: new Date(),\r\n                transactionId: generateRandomID(25),\r\n            };\r\n\r\n            let firstPartialPayment = await partialPaymentModel.findOne({\r\n                payment_mode: \"TWENTY_ADV\",\r\n            });\r\n\r\n            if (firstPartialPayment) {\r\n                let partialPaymentDetails = {\r\n                    payment_mode: \"TWENTY_ADV\",\r\n                    amount: order.grand_total - twenty_percent_amount,\r\n                    date: new Date(),\r\n                    transactionId: generateRandomID(25),\r\n                };\r\n                firstPartialPayment.paymentDetails.push(partialPaymentDetails);\r\n\r\n                await firstPartialPayment.save();\r\n            }\r\n\r\n            let partialPaymentData = {\r\n                paymentDetails: partialPaymentDetails,\r\n                remaining_amount: order.grand_total - partialPaymentDetails.amount,\r\n            };\r\n\r\n            newPartialPayment = await partialPaymentModel.create(partialPaymentData);\r\n\r\n            paymentDetails.partial_mode = newPartialPayment._id;\r\n            paymentDetails.payment_status = \"PENDING\";\r\n            paymentDetails.payment_amount = twenty_percent_amount;\r\n\r\n            paymentDetails.paymentDetails = [partialPaymentDetails];\r\n\r\n            let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: {\r\n                    partialPaymentData: newPartialPayment,\r\n                    paymentData: newPayment,\r\n                },\r\n            });\r\n        } else if (payment_mode === \"COD\") {\r\n            if (payment < order.grand_total) {\r\n                let partialPaymentDetails = {\r\n                    payment_mode: \"COD\",\r\n                    amount: payment,\r\n                    date: new Date(),\r\n                    transactionId: generateRandomID(25),\r\n                };\r\n\r\n                // Update the existing Partial_Payment or create a new one\r\n                let partialPaymentData = await partialPaymentModel.findOne({\r\n                    payment_mode: \"COD\",\r\n                });\r\n\r\n                if (partialPaymentData) {\r\n                    partialPaymentData.paymentDetails.push(partialPaymentDetails);\r\n                    partialPaymentData.remaining_amount = order.grand_total - payment - partialPaymentData.paymentDetails.reduce((sum, item) => sum + item.amount, 0);\r\n\r\n                    await partialPaymentData.save();\r\n\r\n                    paymentDetails.partial_mode = partialPaymentData._id;\r\n                } else {\r\n                    partialPaymentData = await partialPaymentModel.create({\r\n                        paymentDetails: [partialPaymentDetails],\r\n                        remaining_amount: order.grand_total - payment,\r\n                        payment_mode: \"COD\",\r\n                    });\r\n\r\n                    const newPartialPayment = await partialPaymentData.save();\r\n                    paymentDetails.partial_mode = newPartialPayment._id;\r\n                }\r\n\r\n                // let partialPaymentData = {\r\n                //   paymentDetails: partialPaymentDetails,\r\n                //   remaining_amount: order.grand_total - partialPaymentDetails.amount,\r\n                // };\r\n\r\n                newPartialPayment = await partialPaymentModel.create(partialPaymentData);\r\n\r\n                paymentDetails.partial_mode = newPartialPayment._id;\r\n                paymentDetails.payment_status = \"PENDING\";\r\n                let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Success\",\r\n                    data: {\r\n                        partialPaymentData: newPartialPayment,\r\n                        paymentData: newPayment,\r\n                    },\r\n                });\r\n            } else {\r\n                paymentDetails.payment_status = \"RECEIVED\";\r\n                let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Success\",\r\n                    data: {\r\n                        paymentData: newPayment,\r\n                    },\r\n                });\r\n            }\r\n        } else {\r\n            if (payment === order.grand_total) {\r\n                paymentDetails.payment_status = \"RECEIVED\";\r\n                let newPayment = await paymentModel.create(paymentDetails);\r\n\r\n                return res.status(200).send({ status: true, message: \"Success\", data: newPayment });\r\n            } else {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Paid amount should be equal to Grand Total\",\r\n                });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { createPayment, updatePaymentStatus, addPayment };\r\n","const { isValidObjectId } = require(\"mongoose\");\r\nconst request = require(\"request\");\r\nconst productModel = require(\"../models/productModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst brandModel = require(\"../models/brandModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst subCategoryModel = require(\"../models/subcategoryModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\nconst { uploadFile } = require(\"./imageController\");\r\nconst { calculateMarginAndSelling } = require(\"../utils/percentage\");\r\n\r\nconst uploadMultipleImage = async (blob) => {\r\n    let imageFile = await uploadFile(blob);\r\n    return imageFile;\r\n};\r\n\r\n// ADD PRODUCT\r\nconst addProduct = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let {\r\n            product_name,\r\n            sku_code,\r\n            hsn_code,\r\n            brandId,\r\n            color,\r\n            categoryId,\r\n            subCatId,\r\n            stockStatus,\r\n            lotSizeQty,\r\n            mrp,\r\n            seller_price,\r\n            gst,\r\n            sellingGST,\r\n            margin,\r\n            qty_in_hand,\r\n            min_order_qty,\r\n            sole,\r\n            material,\r\n            packing_type,\r\n            made_in,\r\n            weight,\r\n            description,\r\n            meta,\r\n            vendor_id,\r\n        } = data;\r\n\r\n        if (!isValid(product_name)) {\r\n            return res.status(400).send({ status: false, message: \"Product name is required\" });\r\n        }\r\n\r\n        if (!isValid(sku_code)) {\r\n            return res.status(400).send({ status: false, message: \"SKU code is required\" });\r\n        }\r\n        if (!isValid(hsn_code)) {\r\n            return res.status(400).send({ status: false, message: \"HSN code is required\" });\r\n        }\r\n\r\n        if (!isValid(mrp)) {\r\n            return res.status(400).send({ status: false, message: \"Product MRP is required\" });\r\n        }\r\n        if (!isValid(gst)) {\r\n            return res.status(400).send({ status: false, message: \"GST is required\" });\r\n        }\r\n        if (!isValid(brandId)) {\r\n            return res.status(400).send({ status: false, message: \"Brand ID is required\" });\r\n        }\r\n\r\n        if (!isValid(seller_price)) {\r\n            return res.status(400).send({ status: false, message: \"Seller price is required\" });\r\n        }\r\n\r\n        if (!isValid(categoryId)) {\r\n            return res.status(400).send({ status: false, message: \"Category ID is required\" });\r\n        }\r\n\r\n        if (!isValid(subCatId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Sub category ID is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValid(stockStatus)) {\r\n            return res.status(400).send({ status: false, message: \"Stock status is required\" });\r\n        }\r\n        if (!isValid(lotSizeQty)) {\r\n            return res.status(400).send({ status: false, message: \"Lot size is required\" });\r\n        }\r\n\r\n        if (!isValid(qty_in_hand)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Quantity in hand is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValid(min_order_qty)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Minimum order quantity is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValid(color)) {\r\n            return res.status(400).send({ status: false, message: \"Product color is required\" });\r\n        }\r\n\r\n        if (req.userModel === \"ADMIN\") {\r\n            if (!isValid(sellingGST)) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Selling GST is required\",\r\n                });\r\n            }\r\n            if (!isValid(margin)) {\r\n                return res.status(400).send({ status: false, message: \"Margin is required\" });\r\n            }\r\n            if (!isValid(vendor_id)) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Vendor id is required\",\r\n                });\r\n            }\r\n        }\r\n\r\n        if (meta !== undefined) {\r\n            meta = JSON.parse(meta);\r\n        }\r\n        let productData = {\r\n            product_name,\r\n            sku_code,\r\n            brandId,\r\n            gst,\r\n            hsn_code,\r\n            color_id: JSON.parse(color),\r\n            categoryId,\r\n            subCatId,\r\n            stockStatus,\r\n            lotSizeQty: JSON.parse(lotSizeQty),\r\n            mrp,\r\n            seller_price,\r\n            qty_in_hand,\r\n            min_order_qty,\r\n            sole,\r\n            material,\r\n            packing_type,\r\n            made_in,\r\n            weight,\r\n            description,\r\n        };\r\n        if (req.userModel === \"ADMIN\") {\r\n            productData.sellingGST = sellingGST;\r\n            productData.margin = margin;\r\n            productData.status = \"Approved\";\r\n        }\r\n        if (meta !== undefined) {\r\n            productData.meta_title = meta.metaTitle;\r\n            productData.meta_keywords = meta.metaKeyword;\r\n            productData.meta_description = meta.metaDescription;\r\n        }\r\n        if (req.body.vendorId !== undefined) {\r\n            productData.vendor_id = req.body.vendorId;\r\n        } else {\r\n            productData.vendor_id = req.userId;\r\n        }\r\n\r\n        let multipleImage = [];\r\n        if (req.files && req.files.thumbnail) {\r\n            productData.thumbnail_pic = await uploadFile(req.files.thumbnail);\r\n        } else if (data.thumbnail !== undefined) {\r\n            productData.thumbnail_pic = data.thumbnail;\r\n        }\r\n        if (req.files && req.files.mulImg) {\r\n            multipleImage = req.files.mulImg;\r\n            let images = [];\r\n            if (Array.isArray(multipleImage)) {\r\n                for (let val of multipleImage) {\r\n                    let img = await uploadMultipleImage(val);\r\n                    images.push(img);\r\n                }\r\n            } else {\r\n                let img = await uploadMultipleImage(multipleImage);\r\n                images.push(img);\r\n            }\r\n            productData.multiple_pics = images;\r\n            // console.log(images);\r\n        } else if (data.mulImg !== undefined) {\r\n            productData.multiple_pics = data.mulImg;\r\n        }\r\n        // console.log(data);\r\n        let brandObj = await brandModel.findById(brandId);\r\n        let categoryObj = await categoryModel.findById(categoryId);\r\n        let subCatObj = await subCategoryModel.findById(subCatId);\r\n\r\n        if (!brandObj || !categoryObj || !subCatObj) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Brand, aritcle, category or subcategory id had some error\",\r\n            });\r\n        }\r\n        brandId = brandObj;\r\n        categoryId = categoryObj;\r\n        subCatId = subCatObj;\r\n\r\n        let product = await productModel.create(productData);\r\n        let vendor = null;\r\n        if (req.userModel === \"ADMIN\") {\r\n            vendor = await vendorModel.findById(vendor_id);\r\n            product.vendor_id = vendor._id;\r\n        } else {\r\n            vendor = await vendorModel.findById(req.userId);\r\n            product.vendor_id = vendor._id;\r\n        }\r\n        vendor.products.push(product);\r\n        await vendor.save();\r\n        await product.save();\r\n        return res.status(201).send({ status: true, message: \"Success\", data: product });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL PRODUCTS\r\nconst getAllProducts = async (req, res) => {\r\n    try {\r\n        let data = [];\r\n        if (req.userModel === \"VENDOR\") {\r\n            let products = await productModel.find({ isDeleted: false, vendor_id: req.userId }).populate([\"color_id\", \"categoryId\", \"subCatId\", \"brandId\"]);\r\n            data = products;\r\n        } else {\r\n            let products = await productModel.find({ isDeleted: false }).populate([\"color_id\", \"categoryId\", \"subCatId\", \"brandId\", \"vendor_id\"]);\r\n            for (let x of products) {\r\n                if (x.vendor_id.status === \"Approved\") {\r\n                    data.push(x);\r\n                }\r\n            }\r\n        }\r\n        return res.status(200).send({ status: true, data: data });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllProductsForDashboard = async (req, res) => {\r\n    try {\r\n        let products = await productModel\r\n            .find({\r\n                isDeleted: false,\r\n                stockStatus: \"In_stock\",\r\n                status: \"Approved\",\r\n            })\r\n            .populate([\"color_id\", \"categoryId\", \"subCatId\", \"brandId\", \"vendor_id\"]);\r\n\r\n        let data = [];\r\n        for (let x of products) {\r\n            if (x.vendor_id.status === \"Approved\") {\r\n                data.push(x);\r\n            }\r\n        }\r\n        return res.status(200).send({ status: true, data: data });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst getAllProductsForFilter = async (req, res) => {\r\n    try {\r\n        products = await productModel\r\n            .find({\r\n                isDeleted: false,\r\n                stockStatus: \"In_stock\",\r\n                status: \"Approved\",\r\n            })\r\n            .populate([\"color_id\", \"categoryId\", \"subCatId\", \"brandId\", \"vendor_id\"]);\r\n        return res.status(200).send({ status: true, data: products });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET PRODUCT BY PRODUCT ID\r\nconst getProductById = async (req, res) => {\r\n    try {\r\n        let productId = req.params.productId;\r\n        let product = null;\r\n        if (req.userModel === \"VENDOR\") {\r\n            product = await productModel.findOne({\r\n                _id: productId,\r\n                isDeleted: false,\r\n                vendor_id: req.userId,\r\n            });\r\n        } else {\r\n            product = await productModel.findOne({\r\n                _id: productId,\r\n                isDeleted: false,\r\n            });\r\n        }\r\n        return res.status(200).send({ status: true, data: product });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE PRODUCT BY PRODUCT ID\r\nconst updateProductByProductId = async (req, res) => {\r\n    try {\r\n        let productId = req.params.productId;\r\n        if (!isValidObjectId(productId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid product id\" });\r\n        }\r\n\r\n        let product = await productModel.findOne({\r\n            _id: productId,\r\n            isDeleted: false,\r\n        });\r\n\r\n        if (!product) {\r\n            return res.status(404).send({ status: false, message: \"Product not found\" });\r\n        }\r\n\r\n        let body = req.body;\r\n\r\n        if (\"product_name\" in body) {\r\n            product.product_name = body.product_name;\r\n        }\r\n\r\n        if (\"sku_code\" in body) {\r\n            product.sku_code = body.sku_code;\r\n        }\r\n\r\n        if (\"description\" in body) {\r\n            product.description = body.description;\r\n        }\r\n\r\n        if (\"mrp\" in body) {\r\n            product.mrp = body.mrp;\r\n        }\r\n\r\n        if (\"seller_price\" in body) {\r\n            product.seller_price = body.seller_price;\r\n        }\r\n\r\n        if (\"selling_price\" in body) {\r\n            product.selling_price = body.selling_price;\r\n        }\r\n\r\n        if (\"gst_amount\" in body) {\r\n            product.gst_amount = body.gst_amount;\r\n        }\r\n\r\n        if (\"stock_status\" in body) {\r\n            product.stockStatus = body.stock_status;\r\n        }\r\n\r\n        if (\"qty_in_hand\" in body) {\r\n            product.qty_in_hand = body.qty_in_hand;\r\n        }\r\n\r\n        if (\"min_order_qty\" in body) {\r\n            product.min_order_qty = body.min_order_qty;\r\n        }\r\n\r\n        if (\"size_qty\" in body) {\r\n            product.size_qty = body.size_qty;\r\n        }\r\n\r\n        if (\"color\" in body) {\r\n            product.color = body.color;\r\n        }\r\n\r\n        if (\"style\" in body) {\r\n            product.style = body.style;\r\n        }\r\n\r\n        if (\"sole\" in body) {\r\n            product.sole = body.sole;\r\n        }\r\n\r\n        if (\"material\" in body) {\r\n            product.material = body.material;\r\n        }\r\n\r\n        if (\"packing_type\" in body) {\r\n            product.packing_type = body.packing_type;\r\n        }\r\n\r\n        if (\"made_in\" in body) {\r\n            product.made_in = body.made_in;\r\n        }\r\n\r\n        if (\"primary_category\" in body) {\r\n            product.primary_category = body.primary_category;\r\n        }\r\n\r\n        if (\"weight\" in body) {\r\n            product.weight = body.weight;\r\n        }\r\n\r\n        if (\"category\" in body) {\r\n            product.categoryId = body.category;\r\n        }\r\n\r\n        if (\"meta_title\" in body) {\r\n            product.meta_title = body.meta_title;\r\n        }\r\n\r\n        if (\"meta_description\" in body) {\r\n            product.meta_description = body.meta_description;\r\n        }\r\n\r\n        if (\"status\" in body) {\r\n            product.status = body.status;\r\n        }\r\n\r\n        await product.save();\r\n\r\n        return res.status(200).send({ status: true, message: \"success\", data: product });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE PRODUCT BY PRODUCT ID\r\nconst deleteProductByProductId = async (req, res) => {\r\n    try {\r\n        let productId = req.params.productId;\r\n        if (!isValidObjectId) {\r\n            return res.status(400).send({ status: false, message: \"Invalid product id\" });\r\n        }\r\n\r\n        let product = await productModel.findOne({\r\n            _id: productId,\r\n            isDeleted: false,\r\n        });\r\n\r\n        if (!product) {\r\n            return res.status(404).send({ status: false, message: \"Product not found\" });\r\n        }\r\n\r\n        let deleteProduct = await productModel.findOneAndUpdate(\r\n            {\r\n                _id: productId,\r\n                isDeleted: false,\r\n            },\r\n            {\r\n                isDeleted: true,\r\n                deletedAt: new Date(),\r\n            },\r\n            { new: true }\r\n        );\r\n\r\n        if (!deleteProduct) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Product not found or already deleted\",\r\n            });\r\n        }\r\n\r\n        return res.status(200).send({ status: true, message: \"Product deleted successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst changeProductStatus = async (req, res) => {\r\n    try {\r\n        let { newStatus, margin, sellingGST } = req.body;\r\n        let productId = req.params.productId;\r\n        let product = await productModel.findById(productId);\r\n        if (!product) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Bad request\",\r\n            });\r\n        }\r\n        product.status = newStatus;\r\n        if (newStatus === \"Approved\") {\r\n            if (!margin || !sellingGST) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"Bad request\",\r\n                });\r\n            }\r\n            product.margin = margin;\r\n            product.sellingGST = sellingGST;\r\n            product.selling_price = product.seller_price;\r\n        } else {\r\n            product.margin = undefined;\r\n            product.sellingGST = undefined;\r\n            product.selling_price = undefined;\r\n        }\r\n        await product.save();\r\n        return res.status(200).send({ status: true, message: \"Product updated successfully\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst changeProductStockStatus = async (req, res) => {\r\n    try {\r\n        let { newStockStatus } = req.body;\r\n        let productId = req.params.productId;\r\n        let product = await productModel.findById(productId);\r\n        if (!product) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Bad request\",\r\n            });\r\n        }\r\n        product.stockStatus = newStockStatus;\r\n        await product.save();\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Product Stock Status updated successfully\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst csvProduct = async (req, res) => {\r\n    try {\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Product Stock Status updated successfully\",\r\n            data: \"xlsxUrl\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst updateProduct = async (req, res) => {\r\n    try {\r\n        let productId = req.params.productId;\r\n        let {\r\n            product_name,\r\n            sku_code,\r\n            hsn_code,\r\n            description,\r\n            mrp,\r\n            gst,\r\n            seller_price,\r\n            sellingGST,\r\n            margin,\r\n            qty_in_hand,\r\n            min_order_qty,\r\n            lotSizeQty,\r\n            color_id,\r\n            sole,\r\n            material,\r\n            packing_type,\r\n            made_in,\r\n            weight,\r\n            categoryId,\r\n            subCatId,\r\n        } = req.body;\r\n\r\n        let product = await productModel.findById(productId);\r\n        if (product_name) {\r\n            product.product_name = product_name;\r\n        }\r\n        if (sku_code) {\r\n            product.sku_code = sku_code;\r\n        }\r\n        if (hsn_code) {\r\n            product.hsn_code = hsn_code;\r\n        }\r\n        if (description) {\r\n            product.description = description;\r\n        }\r\n        if (mrp) {\r\n            product.mrp = mrp;\r\n        }\r\n        if (gst) {\r\n            product.gst = gst;\r\n        }\r\n        if (seller_price) {\r\n            product.seller_price = seller_price;\r\n        }\r\n        if (sellingGST) {\r\n            product.sellingGST = sellingGST;\r\n        }\r\n        if (margin) {\r\n            product.margin = margin;\r\n        }\r\n        if (qty_in_hand) {\r\n            product.qty_in_hand = qty_in_hand;\r\n        }\r\n        if (min_order_qty) {\r\n            product.min_order_qty = min_order_qty;\r\n        }\r\n        if (lotSizeQty) {\r\n            product.lotSizeQty = lotSizeQty.split(\",\");\r\n        }\r\n        if (color_id) {\r\n            console.log(color_id);\r\n            product.color_id = color_id;\r\n        }\r\n        if (sole) {\r\n            product.sole = sole;\r\n        }\r\n        if (material) {\r\n            product.material = material;\r\n        }\r\n        if (packing_type) {\r\n            product.packing_type = packing_type;\r\n        }\r\n        if (made_in) {\r\n            product.made_in = made_in;\r\n        }\r\n        if (weight) {\r\n            product.weight = weight;\r\n        }\r\n        if (categoryId) {\r\n            product.categoryId = categoryId;\r\n        }\r\n        if (subCatId) {\r\n            product.subCatId = subCatId;\r\n        }\r\n        if (req.files) {\r\n            let { thumbnail_pic, multiple_pics } = req.files;\r\n            if (thumbnail_pic) {\r\n                product.thumbnail_pic = await uploadFile(thumbnail_pic);\r\n            }\r\n            if (multiple_pics) {\r\n                if (multiple_pics.length) {\r\n                    let images = [];\r\n                    for (let singleFile of multiple_pics) {\r\n                        let x = await uploadMultipleImage(singleFile);\r\n                        images.push(x);\r\n                    }\r\n                    product.multiple_pics = images;\r\n                } else {\r\n                    let x = await uploadFile(multiple_pics);\r\n                    product.multiple_pics = [x];\r\n                }\r\n            }\r\n        }\r\n        await product.save();\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Product updated successfully\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addProduct,\r\n    getAllProducts,\r\n    getProductById,\r\n    updateProductByProductId,\r\n    deleteProductByProductId,\r\n    getAllProductsForDashboard,\r\n    changeProductStatus,\r\n    changeProductStockStatus,\r\n    csvProduct,\r\n    getAllProductsForFilter,\r\n    updateProduct,\r\n};\r\n","const adminModel = require(\"../models/adminModel\");\nconst vendorModel = require(\"../models/vendorModel\");\nconst { uploadFile } = require(\"./imageController\");\nconst bcrypt = require(\"bcrypt\");\n\nconst changePassword = async (req, res) => {\n    let vendor = await vendorModel.findById(req.body.userid);\n    vendor.password = await bcrypt.hash(req.body.password, 10);\n    vendor.save();\n    res.status(200).send({\n        status: true,\n        message: \"password changed successfully\",\n    });\n};\n\nconst updateProfile = async (req, res) => {\n    try {\n        let userId = req.userId;\n        let userType = req.userModel;\n        let { fullName, emailID, phone, altPhone, newPass, oldPass } = req.body;\n        if (userType === \"ADMIN\") {\n            let admin = await adminModel.findById(userId);\n            if (oldPass && newPass) {\n                bcrypt.compare(oldPass, admin.password, function (err, result) {\n                    if (err) {\n                    }\n                    hasAccess(result, admin);\n                });\n                async function hasAccess(result, admin) {\n                    if (result) {\n                        admin.password = await bcrypt.hash(newPass, 10);\n                        if (fullName) admin.name = fullName;\n                        if (emailID) admin.email = emailID;\n                        if (phone && emailID) {\n                            let x = await adminModel.find({\n                                $or: [{ email: emailID }, { phone: phone }],\n                            });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message:\n                                        \"Mobile and Email number already exists\",\n                                });\n                            }\n                            admin.phone = phone;\n                            admin.email = emailID;\n                        } else if (phone) {\n                            let x = await adminModel.find({ phone: phone });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message: \"Mobile number already exists\",\n                                });\n                            }\n                            admin.phone = phone;\n                        } else if (emailID) {\n                            let x = await adminModel.find({ email: emailID });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message: \"Email id already exists\",\n                                });\n                            }\n                            admin.email = emailID;\n                        }\n\n                        if (req.files) {\n                            let { profileImg } = req.files;\n                            let imgRes = await uploadFile(profileImg);\n                            admin.profileUrl = imgRes;\n                        }\n                        let y = await admin.save();\n                        let data = {};\n                        data.name = y.name;\n                        data.email = y.email;\n                        data.userType = y.isSuperAdmin\n                            ? \"Super Admin\"\n                            : \"Admin\";\n                        data.role = y.role;\n                        data.phone = y.phone;\n                        data.photo = y.profileUrl;\n                        // console.log(vendor);\n                        return res.status(202).send({\n                            status: true,\n                            message: \"Profile updated successfully\",\n                            data: data,\n                        });\n                    } else {\n                        return res.status(401).send({\n                            status: true,\n                            message: \"Invalid Password\",\n                        });\n                    }\n                }\n            } else {\n                if (fullName) admin.name = fullName;\n                if (emailID) admin.email = emailID;\n                if (phone && emailID) {\n                    let x = await adminModel.find({\n                        $or: [{ email: emailID }, { phone: phone }],\n                    });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Mobile and Email number already exists\",\n                        });\n                    }\n                    admin.phone = phone;\n                    admin.email = emailID;\n                } else if (phone) {\n                    let x = await adminModel.find({ phone: phone });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Mobile number already exists\",\n                        });\n                    }\n                    admin.phone = phone;\n                } else if (emailID) {\n                    let x = await adminModel.find({ email: emailID });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Email id already exists\",\n                        });\n                    }\n                    admin.email = emailID;\n                }\n\n                if (req.files) {\n                    let { profileImg } = req.files;\n                    let imgRes = await uploadFile(profileImg);\n                    admin.profileUrl = imgRes;\n                }\n                let y = await admin.save();\n                let data = {};\n                data.name = y.name;\n                data.email = y.email;\n                data.userType = y.isSuperAdmin ? \"Super Admin\" : \"Admin\";\n                data.role = y.role;\n                data.phone = y.phone;\n                data.photo = y.profileUrl;\n                // console.log(vendor);\n                return res.status(202).send({\n                    status: true,\n                    message: \"Profile updated successfully\",\n                    data: data,\n                });\n            }\n        } else {\n            let vendor = await vendorModel.findById(userId);\n            if (oldPass && newPass) {\n                bcrypt.compare(\n                    oldPass,\n                    vendor.password,\n                    function (err, result) {\n                        if (err) {\n                        }\n                        hasAccess(result, vendor);\n                    }\n                );\n                async function hasAccess(result, vendor) {\n                    if (result) {\n                        console.log(result);\n                        vendor.password = await bcrypt.hash(newPass, 10);\n                        if (fullName) vendor.representativeName = fullName;\n                        if (altPhone) vendor.altMobileNo = altPhone;\n                        if (req.files) {\n                            let { profileImg } = req.files;\n                            let imgRes = await uploadFile(profileImg);\n                            vendor.profileUrl = imgRes;\n                        }\n                        if (phone && emailID) {\n                            let x = await vendorModel.find({\n                                $or: [\n                                    { emailId: emailID },\n                                    { mobileNo: phone },\n                                ],\n                            });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message:\n                                        \"Mobile and Email number already exists\",\n                                });\n                            }\n                            vendor.mobileNo = phone;\n                            vendor.emailId = emailID;\n                        } else if (phone) {\n                            let x = await vendorModel.find({ mobileNo: phone });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message: \"Mobile number already exists\",\n                                });\n                            }\n                            vendor.mobileNo = phone;\n                        } else if (emailID) {\n                            let x = await vendorModel.find({\n                                emailId: emailID,\n                            });\n                            if (x.length > 0) {\n                                return res.status(400).send({\n                                    status: false,\n                                    message: \"Email id already exists\",\n                                });\n                            }\n                            vendor.emailId = emailID;\n                        }\n\n                        let y = await vendor.save();\n                        let data = {};\n                        data.name = y.representativeName;\n                        data.email = y.emailId;\n                        data.userType = \"Seller\";\n                        data.role = y.role;\n                        data.altMobileNo = y.altMobileNo;\n                        data.phone = y.mobileNo;\n                        data.photo = y.profileUrl;\n                        data.vendorId = y.vendor_unique_id;\n                        return res.status(202).send({\n                            status: true,\n                            message: \"Profile updated successfully\",\n                            data: data,\n                        });\n                    } else {\n                        return res.status(401).send({\n                            status: true,\n                            message: \"Invalid Password\",\n                        });\n                    }\n                }\n            } else {\n                if (fullName) vendor.representativeName = fullName;\n                if (altPhone) vendor.altMobileNo = altPhone;\n                if (req.files) {\n                    let { profileImg } = req.files;\n                    let imgRes = await uploadFile(profileImg);\n                    vendor.profileUrl = imgRes;\n                }\n                if (phone && emailID) {\n                    let x = await vendorModel.find({\n                        $or: [{ emailId: emailID }, { mobileNo: phone }],\n                    });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Mobile and Email number already exists\",\n                        });\n                    }\n                    vendor.mobileNo = phone;\n                    vendor.emailId = emailID;\n                } else if (phone) {\n                    let x = await vendorModel.find({ mobileNo: phone });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Mobile number already exists\",\n                        });\n                    }\n                    vendor.mobileNo = phone;\n                } else if (emailID) {\n                    let x = await vendorModel.find({\n                        emailId: emailID,\n                    });\n                    if (x.length > 0) {\n                        return res.status(400).send({\n                            status: false,\n                            message: \"Email id already exists\",\n                        });\n                    }\n                    vendor.emailId = emailID;\n                }\n\n                let y = await vendor.save();\n                let data = {};\n                data.name = y.representativeName;\n                data.email = y.emailId;\n                data.userType = \"Seller\";\n                data.role = y.role;\n                data.altMobileNo = y.altMobileNo;\n                data.phone = y.mobileNo;\n                data.photo = y.profileUrl;\n                data.vendorId = y.vendor_unique_id;\n                return res.status(202).send({\n                    status: true,\n                    message: \"Profile updated successfully\",\n                    data: data,\n                });\n            }\n        }\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nmodule.exports = { updateProfile, changePassword };\n","const questionModel = require(\"../models/questionModel\");\r\nconst { isValid } = require(\"../utils/utils\");\r\n\r\n// ADD QUESTIONS\r\nconst addQuestions = async (req, res) => {\r\n    try {\r\n        let { questionFor, question } = req.body;\r\n\r\n        if (!isValid(questionFor)) {\r\n            return res.status(400).send({ status: false, message: \"QuestionFor field is required\" });\r\n        }\r\n\r\n        if (!isValid(question)) {\r\n            return res.status(400).send({ status: false, message: \"Question is required\" });\r\n        }\r\n\r\n        let questionObj = {\r\n            questionFor,\r\n            question,\r\n        };\r\n\r\n        await questionModel.create(questionObj);\r\n        let allQuestion = await questionModel.find({ questionFor: questionFor, isDeleted: false });\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Question added successfully\",\r\n            data: allQuestion,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllQuestionByModel = async (req, res) => {\r\n    try {\r\n        let model = req.userModel;\r\n        let questions = await questionModel.find({ questionFor: model, isDeleted: false });\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Question fetched successfully\",\r\n            data: questions,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllQuestion = async (req, res) => {\r\n    try {\r\n        let questions = await questionModel.find({ isDeleted: false });\r\n        let data = {\r\n            admin: [],\r\n            vendor: [],\r\n            customer: [],\r\n        };\r\n        for (let x of questions) {\r\n            if (x.questionFor === \"ADMIN\") {\r\n                data.admin.push(x);\r\n            }\r\n            if (x.questionFor === \"VENDOR\") {\r\n                data.vendor.push(x);\r\n            }\r\n            if (x.questionFor === \"CUSTOMER\") {\r\n                data.customer.push(x);\r\n            }\r\n        }\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Question fetched successfully\",\r\n            data: data,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst deleteQuestionById = async (req, res) => {\r\n    try {\r\n        let questionId = req.params.questionid;\r\n        let question = await questionModel.findById(questionId);\r\n        if (question) {\r\n            question.isDeleted = true;\r\n            await question.save();\r\n            let questions = await questionModel.find({ questionFor: question.questionFor, isDeleted: false });\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Question fetched successfully\",\r\n                data: questions,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"question id is not valid\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { addQuestions, getAllQuestionByModel, getAllQuestion, deleteQuestionById };\r\n","const excelJs = require(\"exceljs\");\nconst orderModel = require(\"../models/orderModel\");\n\nconst getOrderReport = async (req, res) => {\n    try {\n        //{ saleInvoice: { $exists: true } }\n        let orders = await orderModel.find({ saleInvoice: { $exists: true } }).populate([\"payment_id\", \"order_status_id\"]);\n        return res.status(200).send({ status: true, message: \"Order Report fetched...\", data: orders });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst exportSaleReport = async (req, res) => {\n    try {\n        let { startDate, endDate } = req.body;\n        if (!startDate || !endDate) {\n            return res.status(400).send({ status: false, message: \"Start date end end date are required\" });\n        }\n        let date1 = new Date(startDate).getTime();\n        let date2 = new Date(endDate).getTime();\n        if (date1 > date2) {\n            return res.status(400).send({ status: false, message: \"Wrong date range\" });\n        }\n        var workbook = new excelJs.Workbook();\n        var worksheet = workbook.addWorksheet(\"Add Bulk Product\");\n\n        let columnData = [\n            { header: \"Order ID\", key: \"order_id\" },\n            { header: \"Order Date and Time\", key: \"order_date\" },\n            { header: \"Invoice No\", key: \"invoice_no\" },\n            { header: \"Invoice Date\", key: \"invoice_date\" },\n            { header: \"Order value\", key: \"order_value\" },\n            { header: \"Order Qty\", key: \"order_qty\" },\n            { header: \"Invoice value/confirmed value\", key: \"invoice_value\" },\n            { header: \"Advance\", key: \"advance\" },\n            { header: \"Discount\", key: \"discount\" },\n            { header: \"Net Amount\", key: \"net_amount\" },\n            { header: \"Refund\", key: \"refund\" },\n            { header: \"Cash on delivery\", key: \"cash_on_delivery\" },\n        ];\n        var data = {\n            order_id: \"FZ12345678\",\n            order_date: \"07-08-2023 at 18:37:00\",\n            invoice_no: \"FSIN2312345678\",\n            invoice_date: \"07-08-2023 at 18:37:00\",\n            order_qty: \"4\",\n            invoice_value: \"10000\",\n            advance: \"2000\",\n            discount: \"1200\",\n            net_amount: \"6800\",\n            refund: \"00\",\n            cash_on_delivery: \"6800\",\n        };\n        if (req.userModel === \"ADMIN\") {\n            columnData.unshift({ header: \"Buyer name\", key: \"buyer_name\" }, { header: \"Buyer No.\", key: \"buyer_no\" });\n\n            data.buyer_name = \"SANJEET KUMAR\";\n            data.buyer_no = 1234567891;\n        }\n        worksheet.columns = columnData;\n        worksheet.addRow(data);\n        worksheet.getRow(1).eachCell((cell) => {\n            cell.font = { bold: true };\n            cell.fill = {\n                type: \"pattern\",\n                pattern: \"solid\",\n                fgColor: { argb: \"F08080\" },\n            };\n        });\n\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        res.setHeader(\"Content-Disposition\", `attachment; brandid.xlsx`);\n\n        return workbook.xlsx.write(res).then(() => {\n            res.status(200);\n        });\n        // return res.status(200).send({ status: true, message: \"Report exported\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst exportPurchaseReport = async (req, res) => {\n    try {\n        let { startDate, endDate } = req.body;\n        if (!startDate || !endDate) {\n            return res.status(400).send({ status: false, message: \"Start date end end date are required\" });\n        }\n        let date1 = new Date(startDate).getTime();\n        let date2 = new Date(endDate).getTime();\n        if (date1 > date2) {\n            return res.status(400).send({ status: false, message: \"Wrong date range\" });\n        }\n        var workbook = new excelJs.Workbook();\n        var worksheet = workbook.addWorksheet(\"Add Bulk Product\");\n        let columnData = [\n            { header: \"Order ID\", key: \"order_id\" },\n            { header: \"Order Date and Time\", key: \"order_date\" },\n            { header: \"Invoice No\", key: \"invoice_no\" },\n            { header: \"Invoice Date\", key: \"invoice_date\" },\n            { header: \"Seller name\", key: \"seller_name\" },\n            { header: \"Seller Phone No.\", key: \"seller_phone\" },\n            { header: \"Seller GST\", key: \"seller_gst\" },\n            { header: \"FactorEz GST\t\", key: \"factorez_gst\" },\n            { header: \"Purchase \", key: \"purchase\" },\n            { header: \"Invoice value/confirmed value\", key: \"invoice_value\" },\n            { header: \"GST Percentage\", key: \"gst_percentage\" },\n            { header: \"Taxable value\", key: \"taxable_value\" },\n            { header: \"Gst amount\", key: \"gst_amount\" },\n            { header: \"Quantity\", key: \"quantity\" },\n            { header: \"Order status\", key: \"order_status\" },\n        ];\n        var data = {\n            order_id: \"FZ12345678\",\n            order_date: \"07-08-2023 at 18:37:00\",\n            invoice_no: \"FSIN2312345678\",\n            invoice_date: \"07-08-2023 at 18:37:00\",\n            seller_name: \"Navnit Sekh\",\n            seller_phone: \"1234567891\",\n            seller_gst: \"09ABCDE4455R23\",\n            factorez_gst: \"09ABCDE4455R23\",\n            purchase: \"4000\",\n            invoice_value: \"5000\",\n            gst_percentage: \"18\",\n            taxable_value: \"5000\",\n            gst_amount: \"1000\",\n            quantity: \"3\",\n            order_status: \"pending\",\n        };\n        // if (req.userModel === \"ADMIN\") {\n        //     columnData.unshift({ header: \"Buyer name\", key: \"buyer_name\" }, { header: \"Buyer No.\", key: \"buyer_no\" });\n\n        //     data.buyer_name = \"SANJEET KUMAR\";\n        //     data.buyer_no = 1234567891;\n        // }\n        worksheet.columns = columnData;\n        worksheet.addRow(data);\n        worksheet.getRow(1).eachCell((cell) => {\n            cell.font = { bold: true };\n            cell.fill = {\n                type: \"pattern\",\n                pattern: \"solid\",\n                fgColor: { argb: \"F08080\" },\n            };\n        });\n\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        res.setHeader(\"Content-Disposition\", `attachment; brandid.xlsx`);\n\n        return workbook.xlsx.write(res).then(() => {\n            res.status(200);\n        });\n        // return res.status(200).send({ status: true, message: \"Report exported\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst getPaymentReport = async (req, res) => {\n    try {\n        let orders = await orderModel.find({ saleInvoice: { $exists: true } }).populate([\"vendorId\", \"payment_id\", \"order_status_id\"]);\n        return res.status(200).send({ status: true, message: \"Payment report fetched\", data: orders });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst updatePaymentReport = async (req, res) => {\n    try {\n        let orderId = req.params.orderid;\n        let { paymentStatus, paidAmount, paymentDate, transactionId, settlementAmt, message } = req.body;\n        let data = req.body;\n        let order = await orderModel.findById(orderId);\n        if (!order) {\n            return res.status(400).send({ status: false, message: \"Order id not found\" });\n        }\n        if (paymentStatus) order.paymentReportStatus.paymentStatus = paymentStatus;\n        if (paidAmount) order.paymentReportStatus.paidAmount = paidAmount;\n        if (paymentDate) order.paymentReportStatus.paymentDate = paymentDate;\n        if (transactionId) order.paymentReportStatus.transactionId = transactionId;\n        if (settlementAmt) order.paymentReportStatus.settlementAmt = settlementAmt;\n        if (message) order.paymentReportStatus.message = message;\n        data.updateAt = new Date();\n        order.paymentReportStatus.logs.push(data);\n        await order.save();\n        let orders = await orderModel.find({ saleInvoice: { $exists: true } }).populate([\"vendorId\", \"payment_id\", \"order_status_id\"]);\n        return res.status(200).send({ status: true, message: \"Payment Report Updated\", data: orders });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nmodule.exports = { getOrderReport, exportSaleReport, exportPurchaseReport, getPaymentReport, updatePaymentReport };\n","const vendorModel = require(\"../models/vendorModel\");\r\nconst bankModel = require(\"../models/bankModel\");\r\nconst documentModel = require(\"../models/documentModel\");\r\nconst { uploadFile } = require(\"./imageController\");\r\nconst { generateRandomID, generateRandomAlphaNumericID } = require(\"../controllers/idGeneratorController\");\r\n\r\nconst { isValid, isValidEmail, isValidMoblie, isValidGST } = require(\"../utils/utils\");\r\nconst { roleEnums } = require(\"../utils/enums\");\r\nconst brandModel = require(\"../models/brandModel\");\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\n// ADD VENDOR\r\nconst addVendor = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let {\r\n            firmName,\r\n            brandName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId,\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            acHolderName,\r\n            acNo,\r\n            bankName,\r\n            branch,\r\n            ifsc,\r\n            termsAndConditions,\r\n        } = data;\r\n        if (password === \"\") {\r\n            return res.status(400).send({ message: \"Password is required\", status: false });\r\n        }\r\n        password = await bcrypt.hash(password, 10);\r\n\r\n        let isVendor = await vendorModel.findOne({ emailId: emailId });\r\n        if (isVendor) {\r\n            return res.status(400).send({ message: \"Email id already exists\", status: false });\r\n        }\r\n        // console.log(data);\r\n        let gstRegDoc = await uploadFile(req.files.gstRegDoc);\r\n        let brandLogo = await uploadFile(req.files.brandLogo);\r\n        let brandRegDoc = await uploadFile(req.files.brandRegDoc);\r\n        let cancelledCheque = await uploadFile(req.files.cancelledCheque);\r\n        let documentData = {\r\n            brandRegDoc: brandRegDoc,\r\n            gstRegDoc: gstRegDoc,\r\n        };\r\n\r\n        let bankData = {\r\n            acHolderName: acHolderName,\r\n            acNo: acNo,\r\n            bankName: bankName,\r\n            branch: branch,\r\n            ifsc: ifsc,\r\n            cancelledCheque: cancelledCheque,\r\n        };\r\n\r\n        let brandData = {\r\n            brand_name: brandName,\r\n            brandLogo: brandLogo,\r\n        };\r\n        let vendorData = {\r\n            firmName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId: emailId.toLowerCase(),\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            termsAndConditions,\r\n        };\r\n\r\n        let document = await documentModel.create(documentData);\r\n        let bank = await bankModel.create(bankData);\r\n        let brand = await brandModel.create(brandData);\r\n\r\n        vendorData.bank_id = bank;\r\n        vendorData.document_id = document;\r\n        vendorData.brand_id = brand;\r\n        vendorData.vendor_unique_id = generateRandomID(10);\r\n        vendorData.auth_unique_id = generateRandomID(10);\r\n        vendorData.db_unique_id = generateRandomAlphaNumericID(20);\r\n        vendorData.sharing_unique_id = generateRandomAlphaNumericID(20);\r\n        // console.log(vendorData);\r\n        vendorData.role = [\"VENDOR\"];\r\n\r\n        let vendor = await vendorModel.create(vendorData);\r\n        brand.vendor_id = vendor;\r\n        await brand.save();\r\n        return res.status(201).send({ status: true, message: \"Success\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst createVendorByAdmin = async (req, res) => {\r\n    try {\r\n        let data = req.body;\r\n        let adminId = req.userId;\r\n        let model = req.userModel;\r\n        let {\r\n            firmName,\r\n            brandName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId,\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            acHolderName,\r\n            acNo,\r\n            bankName,\r\n            branch,\r\n            ifsc,\r\n        } = data;\r\n        if (password === \"\") {\r\n            return res.status(400).send({ message: \"Password is required\", status: false });\r\n        }\r\n        let isVendor = await vendorModel.findOne({ emailId: emailId });\r\n        if (isVendor) {\r\n            return res.status(400).send({ message: \"Email id already exists\", status: false });\r\n        }\r\n        password = await bcrypt.hash(password, 10);\r\n        // console.log(data);\r\n        let gstRegDoc = await uploadFile(req.files.gstRegDoc);\r\n        let brandLogo = await uploadFile(req.files.brandLogo);\r\n        let brandRegDoc = await uploadFile(req.files.brandRegDoc);\r\n        let cancelledCheque = await uploadFile(req.files.cancelledCheque);\r\n        let documentData = {\r\n            brandRegDoc: brandRegDoc,\r\n            gstRegDoc: gstRegDoc,\r\n            actionTakenBy: adminId,\r\n        };\r\n\r\n        let bankData = {\r\n            acHolderName: acHolderName,\r\n            acNo: acNo,\r\n            bankName: bankName,\r\n            branch: branch,\r\n            ifsc: ifsc,\r\n            cancelledCheque: cancelledCheque,\r\n            actionTakenBy: adminId,\r\n        };\r\n\r\n        let brandData = {\r\n            brand_name: brandName,\r\n            brandLogo: brandLogo,\r\n            brandStatus: \"Approved\",\r\n        };\r\n        let vendorData = {\r\n            firmName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId: emailId.toLowerCase(),\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            termsAndConditions: true,\r\n        };\r\n        let document = await documentModel.create(documentData);\r\n        let bank = await bankModel.create(bankData);\r\n        let brand = await brandModel.create(brandData);\r\n        vendorData.bank_id = bank;\r\n        vendorData.document_id = document;\r\n        vendorData.brand_id = brand;\r\n        vendorData.vendor_unique_id = generateRandomID(10);\r\n        vendorData.auth_unique_id = generateRandomID(10);\r\n        vendorData.db_unique_id = generateRandomAlphaNumericID(20);\r\n        vendorData.sharing_unique_id = generateRandomAlphaNumericID(20);\r\n        vendorData.role = [\"VENDOR\"];\r\n        vendorData.actionTakenBy = adminId;\r\n        vendorData.status = \"Approved\";\r\n        vendorData.basicInfoStatus = \"Approved\";\r\n        let vendor = await vendorModel.create(vendorData);\r\n        brand.vendor_id = vendor;\r\n        await brand.save();\r\n        return res.status(201).send({ status: true, message: \"Success\" });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst getAllVendors = async (req, res) => {\r\n    try {\r\n        let vendors = await vendorModel.find({ isDeleted: false }).populate([\"bank_id\", \"document_id\", \"actionTakenBy\", \"brand_id\"]);\r\n        return res.status(201).send({ status: true, message: \"Success\", data: vendors });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst updateVendor = async (req, res) => {\r\n    try {\r\n        let {\r\n            firmName,\r\n            gstNo,\r\n            representativeName,\r\n            emailId,\r\n            password,\r\n            mobileNo,\r\n            altMobileNo,\r\n            pickupState,\r\n            pickupCity,\r\n            pickupPincode,\r\n            invoiceAddress,\r\n            pickupAddress,\r\n            brand_id,\r\n            brand_name,\r\n            bank_id,\r\n            acHolderName,\r\n            acNo,\r\n            bankName,\r\n            branch,\r\n            ifsc,\r\n        } = req.body;\r\n        let vendorObjId = req.params.vendorId;\r\n        let vendor = await vendorModel.findById(vendorObjId).populate([\"bank_id\", \"document_id\", \"brand_id\"]);\r\n        if (firmName) {\r\n            vendor.firmName = firmName;\r\n        }\r\n        if (gstNo) {\r\n            vendor.gstNo = gstNo;\r\n        }\r\n        if (representativeName) {\r\n            vendor.representativeName = representativeName;\r\n        }\r\n        if (emailId) {\r\n            vendor.emailId = emailId.toLowerCase();\r\n        }\r\n        if (password) {\r\n            vendor.password = await bcrypt.hash(password, 10);\r\n        }\r\n        if (mobileNo) {\r\n            vendor.mobileNo = mobileNo;\r\n        }\r\n        if (altMobileNo) {\r\n            vendor.altMobileNo = altMobileNo;\r\n        }\r\n        if (pickupState) {\r\n            vendor.pickupState = pickupState;\r\n        }\r\n        if (pickupState) {\r\n            vendor.pickupState = pickupState;\r\n        }\r\n        if (pickupCity) {\r\n            vendor.pickupCity = pickupCity;\r\n        }\r\n        if (pickupPincode) {\r\n            vendor.pickupPincode = pickupPincode;\r\n        }\r\n        if (invoiceAddress) {\r\n            vendor.invoiceAddress = invoiceAddress;\r\n        }\r\n        if (pickupAddress) {\r\n            vendor.pickupAddress = pickupAddress;\r\n        }\r\n        if (brand_id) {\r\n            for (let brandX of vendor.brand_id) {\r\n                console.log(brandX);\r\n                if (brandX._id.toString() === brand_id) {\r\n                    brandX.brand_name = brand_name;\r\n                    await brandX.save();\r\n                }\r\n            }\r\n        }\r\n        if (bank_id) {\r\n            if (bankName) {\r\n                vendor.bank_id.bankName = bankName;\r\n            }\r\n            if (acHolderName) {\r\n                vendor.bank_id.acHolderName = acHolderName;\r\n            }\r\n            if (acNo) {\r\n                vendor.bank_id.acNo = acNo;\r\n            }\r\n            if (branch) {\r\n                vendor.bank_id.branch = branch;\r\n            }\r\n            if (ifsc) {\r\n                vendor.bank_id.ifsc = ifsc;\r\n            }\r\n            await vendor.bank_id.save();\r\n        }\r\n\r\n        if (req.files) {\r\n            let { cancelledCheque, gstRegDoc, brandRegDoc } = req.files;\r\n            if (cancelledCheque) {\r\n                vendor.bank_id.cancelledCheque = await uploadFile(cancelledCheque);\r\n            }\r\n            if (gstRegDoc) {\r\n                vendor.document_id.gstRegDoc = await uploadFile(gstRegDoc);\r\n            }\r\n            if (brandRegDoc) {\r\n                vendor.document_id.brandRegDoc = await uploadFile(brandRegDoc);\r\n            }\r\n            await vendor.document_id.save();\r\n        }\r\n        await vendor.save();\r\n        res.status(201).send({ status: true, message: \"successfully\", data: vendor });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { getAllVendors, addVendor, createVendorByAdmin, updateVendor };\r\n","const { isValidObjectId } = require(\"mongoose\");\nconst productModel = require(\"../models/productModel\");\nconst wishlistModel = require(\"../models/wishlistModel\");\nconst customerModel = require(\"../models/customerModel\");\n\nconst addToWishlist = async (req, res) => {\n    try {\n        let { productId } = req.body;\n        if (!productId) {\n            return res.status(400).send({ status: false, message: \"bad request\" });\n        }\n        if (!isValidObjectId(productId)) {\n            return res.status(400).send({ status: false, message: \"invalid product id\" });\n        }\n        let product = await productModel.findById(productId);\n        if (!product) {\n            return res.status(400).send({ status: false, message: \"product not found\" });\n        }\n        let wishlistObj = await wishlistModel.findOne({ productId: productId, userId: req.userId });\n        if (wishlistObj) {\n            return res.status(200).send({ status: false, message: \"Already in wishlist\" });\n        }\n        let customer = await customerModel.findById(req.userId).populate(\"cart_id\");\n        await wishlistModel.create({ productId: productId, userId: customer._id });\n        let wishlist = await wishlistModel.find({ userId: customer._id });\n        let dataX = {\n            name: customer.name,\n            email: customer.email,\n            customerId: customer._id.toString(),\n            userType: \"CUSTOMER\",\n            isActivated: customer.isActivated,\n            phone: customer.phone,\n            cartLength: customer.cart_id.products.length,\n            wishlistLength: wishlist.length,\n        };\n        res.status(201).send({ status: true, data: dataX, message: \"Added to wishlist\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nconst removeFromWishlist = async (req, res) => {\n    try {\n        let wishlistId = req.params.wishlistId;\n        if (!wishlistId) {\n            return res.status(400).send({ status: false, message: \"bad request\" });\n        }\n        if (!isValidObjectId(wishlistId)) {\n            return res.status(400).send({ status: false, message: \"invalid wishlist id\" });\n        }\n        let wishlist = await wishlistModel.findOneAndDelete({ userId: req.userId, productId: wishlistId });\n        if (wishlist) {\n            res.status(200).send({ status: true, message: \"Removed from wishlist\" });\n        } else {\n            return res.status(400).send({ status: false, message: \"Bad request\" });\n        }\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\nconst getWishlistProduct = async (req, res) => {\n    try {\n        let data = await wishlistModel.find({ userId: req.userId }).populate(\"productId\");\n        res.status(200).send({ status: true, data: data, message: \"Wishlist fetched\" });\n    } catch (error) {\n        return res.status(500).send({ status: false, message: error.message });\n    }\n};\n\nmodule.exports = { addToWishlist, removeFromWishlist, getWishlistProduct };\n","const adminModel = require(\"../models/adminModel\");\r\nconst vendorModel = require(\"../models/vendorModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst { tokenSecretKey, customerTokenSecretKey } = require(\"../middlewares/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// AUTHENTICATION\r\nconst Authentication = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers.authorization;\r\n\r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({ status: false, message: \"token is required\" });\r\n        }\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(401).send({ status: false, message: \"Invalid token\" });\r\n        }\r\n\r\n        jwt.verify(token, tokenSecretKey, function (err, decode) {\r\n            if (err) {\r\n                return res.status(400).send({ status: false, message: err.message });\r\n            } else {\r\n                req.userId = decode.userId;\r\n                req.userModel = decode.userModel;\r\n                req.userPhone = decode.phone ? decode.phone : \"\"; //'ADMIN': 'VENDOR'\r\n                next();\r\n            }\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst AuthenticationCustomer = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers.authorization;\r\n        \r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({ status: false, message: \"token is required\" });\r\n        }\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(401).send({ status: false, message: \"Invalid token\" });\r\n        }\r\n\r\n        jwt.verify(token, customerTokenSecretKey, function (err, decode) {\r\n            if (err) {\r\n                return res.status(400).send({ status: false, message: err.message });\r\n            } else {\r\n                req.userId = decode.userId;\r\n                req.userModel = decode.userModel;\r\n                req.userPhone = decode.phone ? decode.phone : \"\"; //'ADMIN': 'VENDOR':\"CUSTOMER\"\r\n                next();\r\n            }\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// AUTHORIZATION\r\nconst Authorization = async (req, res, next) => {\r\n    try {\r\n        let tokenId = req.userId;\r\n        let UserId = req.params.userId;\r\n\r\n        if (!isValidObjectId(UserId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid admin id\" });\r\n        }\r\n\r\n        let admin = await adminModel.findById(UserId);\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Admin not found\" });\r\n        }\r\n\r\n        let adminId = admin._id;\r\n\r\n        if (adminId.toString() !== tokenId.toString()) {\r\n            return res.status(403).send({ status: false, message: \"authorization failed\" });\r\n        }\r\n        next();\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = { Authentication, Authorization, AuthenticationCustomer };\r\n","const dotenv = require(\"dotenv\");\r\n\r\n// getting all ENV variables before starting another processes\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    mongoDbUrl: process.env.MONGO_DB_URL,\r\n    tokenSecretKey: process.env.TOKEN_SECRET_KEY,\r\n    customerTokenSecretKey: process.env.CUSTOMER_TOKEN_SECRET_KEY,\r\n    port: process.env.PORT,\r\n    apiKey: process.env.FIREBASE_API_KEY,\r\n    authDomain: process.env.FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.FIREBASE_APP_ID,\r\n    measurementId: process.env.FIREBASE_MEASUREMENT_ID,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY,\r\n    twilioAuthToken: process.env.TWILIO_AUTH_TOKEN,\r\n    twilioAccSID: process.env.TWILIO_ACCOUNT_SID,\r\n    twilioVerifySID: process.env.TWILIO_VERIFY_SID,\r\n    awsAccessKey: process.env.AWS_ACCESS_KEY_ID,\r\n    awsSecretKey: process.env.AWS_SECRET_ACCESS_KEY,\r\n    awsS3Region: process.env.S3_REGION,\r\n    awsS3Bucket: process.env.S3_BUCKET,\r\n};\r\n","const dotenv = require(\"dotenv\");\r\nconst {\r\n  apiKey,\r\n  authDomain,\r\n  projectId,\r\n  storageBucket,\r\n  messagingSenderId,\r\n  appId,\r\n  measurementId,\r\n} = require(\"../middlewares/config\");\r\n\r\ndotenv.config();\r\n\r\nconst firebaseConfig = {\r\n  apiKey: apiKey,\r\n  authDomain: authDomain,\r\n  projectId: projectId,\r\n  storageBucket: storageBucket,\r\n  messagingSenderId: messagingSenderId,\r\n  appId: appId,\r\n  measurementId: measurementId,\r\n};\r\n\r\nmodule.exports = { firebaseConfig };","const adminModel = require(\"../models/adminModel\");\r\nlet customerModel = require(\"../models/customerModel\");\r\nlet vendorModel = require(\"../models/vendorModel\");\r\nconst { roleEnums, accessControls } = require(\"../utils/enums\");\r\n\r\nconst checkUser = async (req, accessEnum) => {\r\n    let user = null;\r\n    if (req.userModel === \"ADMIN\") {\r\n        user = await adminModel.findOne({ _id: req.userId });\r\n    } else if (req.userModel === \"VENDOR\") {\r\n        user = await vendorModel.findOne({ _id: req.userId });\r\n    }\r\n    if (!user) {\r\n        return false;\r\n    }\r\n    req.userData = user;\r\n    for (let x of user.role) {\r\n        if (accessEnum.includes(x)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\n// ADD PRODUCT ROLE\r\nconst AddProductRole = async (req, res, next) => {\r\n    try {\r\n        // roleEnums.MANAGE_PRODUCT.ADD_PRODUCT\r\n        req.userId;\r\n        const admin = await adminModel.findOne({ _id: req.userId });\r\n        next();\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// ALL PRODUCT ROLE\r\nconst AllProductRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [\r\n            accessControls.PRODUCT.PRODUCT_ALL_PRODUCT,\r\n            accessControls.PRODUCT.ACCESS.PRODUCT_DOWNLOAD,\r\n            accessControls.PRODUCT.ACCESS.PRODUCT_EDIT,\r\n            accessControls.PRODUCT.ACCESS.PRODUCT_VIEW,\r\n            accessControls.PRODUCT.PRODUCT_ADD_PRODUCT,\r\n            \"ADMIN\",\r\n        ];\r\n        if (req.userModel === \"VENDOR\") {\r\n            next();\r\n            return;\r\n        }\r\n        let flag = await checkUser(req, accessEnum);\r\n        if (flag) {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n        // admin.role.includes\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// ALL PRODUCT ROLE\r\nconst AllMenuRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [accessControls.PRODUCT.ACCESS.PRODUCT_DOWNLOAD, \"ADMIN\"];\r\n\r\n        let user;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        } else if (req.userModel === \"vendor\") {\r\n            user = await vendorModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n        // admin.role.includes\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE VENDORS\r\nconst AllVendorRoles = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [\r\n            accessControls.VENDOR.ACCESS.VENDOR_DOWNLOAD,\r\n            accessControls.VENDOR.ACCESS.VENDOR_EDIT,\r\n            accessControls.VENDOR.ACCESS.VENDOR_VIEW,\r\n            accessControls.VENDOR.VENDOR_ADD_VENDOR,\r\n            accessControls.VENDOR.VENDOR_ALL_VENDOR,\r\n            accessControls.VENDOR.VENDOR_VENDOR_MOV,\r\n            accessControls.VENDOR.VENDOR_VENDOR_PAYMENT,\r\n            \"ADMIN\",\r\n        ];\r\n        let user;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE VENDORS\r\nconst AddProductColorRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.PRODUCT_COLOR, \"ADMIN\"];\r\n        let user;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE VENDORS\r\nconst AddProductBrandRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.BRAND, \"ADMIN\"];\r\n        let user;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        } else if (req.userModel === \"vendor\") {\r\n            user = await vendorModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE ORDER ROLE\r\nconst ManageOrderRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [\r\n            accessControls.ORDERS.ORDERS_ABANDONED_ORDERS,\r\n            accessControls.ORDERS.ORDERS_ALL_ORDERS,\r\n            accessControls.ORDERS.ORDERS_CHANGE_ORDER_STATUS,\r\n            accessControls.ORDERS.ACCESS.ORDERS_DOWNLOAD,\r\n            accessControls.ORDERS.ACCESS.ORDERS_EDIT,\r\n            accessControls.ORDERS.ACCESS.ORDERS_VIEW,\r\n            \"ADMIN\",\r\n        ];\r\n        let user = null;\r\n        if (req.userModel === \"admin\") {\r\n            user = await adminModel.findOne({ _id: req.userId });\r\n        } else if (req.userModel === \"vendor\") {\r\n            user = await vendorModel.findOne({ _id: req.userId });\r\n        }\r\n\r\n        req.userData = user;\r\n        for (let x of user.role) {\r\n            if (accessEnum.includes(x)) {\r\n                next();\r\n                return;\r\n            }\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// MANAGE HOMEPAGE ROLE\r\nconst ManageHomePage = async (req, res) => {\r\n    try {\r\n        let accessEnum = [roleEnums.HOMEPAGE_MANAGE, \"ADMIN\"];\r\n\r\n        let flag = await checkUser(req, accessEnum);\r\n\r\n        if (flag) {\r\n            next;\r\n            return;\r\n        }\r\n\r\n        return res.status(401).send({\r\n            status: false,\r\n            message: \"you don't have permission for this action\",\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst colorRole = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.PRODUCT_COLOR, \"ADMIN\"];\r\n        let flag = await checkUser(req, accessEnum);\r\n        if (flag) {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst verifyProudct = async (req, res, next) => {\r\n    try {\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.PRODUCT_REVIEW, \"ADMIN\"];\r\n        let flag = await checkUser(req, accessEnum);\r\n        if (flag) {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\nconst outOfStockProduct = async (req, res, next) => {\r\n    try {\r\n        console.log(req.userModel);\r\n        if (req.userModel === \"VENDOR\") {\r\n            next();\r\n            return;\r\n        }\r\n        let accessEnum = [roleEnums.MANAGE_PRODUCT.PRODUCT_REVIEW, \"ADMIN\"];\r\n        let flag = await checkUser(req, accessEnum);\r\n        if (flag) {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nconst abandonedOrderRole = async (req, res, next) => {\r\n    try {\r\n        if (req.userModel === \"ADMIN\") {\r\n            next();\r\n            return;\r\n        }\r\n        return res.status(401).send({\r\n            message: \"You don't have permission for this action\",\r\n            status: false,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    AddProductRole,\r\n    AllProductRole,\r\n    AllMenuRole,\r\n    AllVendorRoles,\r\n    AddProductColorRole,\r\n    AddProductBrandRole,\r\n    ManageOrderRole,\r\n    colorRole,\r\n    verifyProudct,\r\n    outOfStockProduct,\r\n    abandonedOrderRole,\r\n};\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst homepageSchema = new mongoose.Schema(\r\n    {\r\n        featuredProduct: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Product\",\r\n            },\r\n        ],\r\n        newArrival: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Product\",\r\n            },\r\n        ],\r\n        bestSelling: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Product\",\r\n            },\r\n        ],\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Homepage\", homepageSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst { listOfRoleEnums, listOfAccessControll } = require(\"../utils/enums\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst adminSchema = new mongoose.Schema(\r\n    {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n        email: {\r\n            type: String,\r\n            required: true,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n        phone: {\r\n            type: String,\r\n            required: true,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n        role: [\r\n            {\r\n                type: String,\r\n                enum: listOfAccessControll(),\r\n            },\r\n        ],\r\n        profileUrl: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        isSuperAdmin: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\nmodule.exports = mongoose.model(\"Admin\", adminSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst bankSchema = new mongoose.Schema(\r\n    {\r\n        acHolderName: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        acNo: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        bankName: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        branch: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        ifsc: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        cancelledCheque: {\r\n            type: String,\r\n        },\r\n        actionTakenBy: {\r\n            type: ObjectId,\r\n            ref: \"Admin\",\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Bank\", bankSchema);\r\n","const mongoose = require(\"mongoose\");\nconst ObjectId = mongoose.Schema.Types.ObjectId;\n\nconst bannerSchema = new mongoose.Schema(\n    {\n        bannerUrl: {\n            type: String,\n            required: true,\n        },\n        type: {\n            type: String,\n            enum: [\"SINGLE\", \"MULTIPLE\"],\n            required: true,\n        },\n    },\n    { timestamps: true }\n);\n\nmodule.exports = mongoose.model(\"Banner\", bannerSchema);\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst brandSchema = new mongoose.Schema(\r\n    {\r\n        brand_name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        brandLogo: {\r\n            type: String,\r\n        },\r\n        vendor_id: {\r\n            type:ObjectId,\r\n            ref:\"Vendor\"\r\n        },\r\n        brandStatus:{\r\n            type: String,\r\n            enum: [\"Approved\", \"Rejected\", \"Pending\"],\r\n            default:\"Pending\",\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n        deletedAt: {\r\n            type: Date,\r\n            default: null,\r\n        },\r\n    },\r\n    {timestamps: true}\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Brand\", brandSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst businessSchema = new mongoose.Schema(\r\n    {\r\n        business_name: {\r\n            type: String,\r\n        },\r\n        business_Logo: {\r\n            type: String,\r\n        },\r\n        invoiceLogo: {\r\n            type: String,\r\n        },\r\n        contactNo: {\r\n            type: String,\r\n        },\r\n        contactEmail: {\r\n            type: String,\r\n        },\r\n        socialMedia: {\r\n            facebook: {\r\n                type: String,\r\n            },\r\n            instagram: {\r\n                type: String,\r\n            },\r\n            twitter: {\r\n                type: String,\r\n            },\r\n            linkedin: {\r\n                type: String,\r\n            },\r\n            youtube: {\r\n                type: String,\r\n            },\r\n        },\r\n        privacyPolicy: {\r\n            type: String,\r\n        },\r\n        iAgree: {\r\n            type: String,\r\n        },\r\n        gsts: [\r\n            {\r\n                gstNo: {\r\n                    type: String,\r\n                },\r\n                pickupAddress: {\r\n                    type: String,\r\n                },\r\n                stateCode: {\r\n                    type: String,\r\n                },\r\n            },\r\n        ],\r\n        defaultGST: {\r\n            gstNo: {\r\n                type: String,\r\n            },\r\n            pickupAddress: {\r\n                type: String,\r\n            },\r\n            stateCode: {\r\n                type: String,\r\n            },\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Business\", businessSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst cancelledReasonSchema = new mongoose.Schema({\r\n    questions: {\r\n        type: ObjectId,\r\n        ref: 'Question',\r\n    },\r\n\r\n    customerAnswer: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model('Cancelled_Reason', cancelledReasonSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst cartSchema = new mongoose.Schema(\r\n    {\r\n        products: [\r\n            {\r\n                product_id: {\r\n                    type: ObjectId,\r\n                    ref: \"Product\",\r\n                },\r\n                qty: {\r\n                    type: Number,\r\n                },\r\n                lotSize: {\r\n                    type: String,\r\n                },\r\n                color: {\r\n                    colorName: { type: String },\r\n                    colorHex: { type: String },\r\n                },\r\n                addedAt: {\r\n                    type: String,\r\n                },\r\n            },\r\n        ],\r\n        customer_id: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Cart\", cartSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n    category_name: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n\r\n    sub_category: [{type:ObjectId, ref: 'Subcategory'}],\r\n\r\n    isDeleted: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n\r\n    deletedAt: {\r\n        type: Date,\r\n        default: null,\r\n    }\r\n\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('Category', categorySchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst colorSchema = new mongoose.Schema({\r\n    colorName:{\r\n        type: String,\r\n        trim:true,\r\n        unique:true\r\n    },\r\n    colorHex: {\r\n        type: String,\r\n        trim:true,\r\n        unique:true\r\n    },\r\n    products:[\r\n        {\r\n            type:ObjectId,\r\n            ref:'Product'\r\n        }\r\n    ],\r\n    isDeleted:{\r\n        type:Boolean,\r\n        default:false,\r\n    }\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model('Color', colorSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst couponCodeSchema = new mongoose.Schema(\r\n    {\r\n        customer_id: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Customer\",\r\n            },\r\n        ],\r\n        couponCode: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        validTill: {\r\n            type: Date,\r\n            required: true,\r\n        },\r\n        maxUsers: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        minOrderAmt: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        isUsed: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        isExpired: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        generatedBy: {\r\n            type: ObjectId,\r\n            ref: \"Admin\",\r\n        },\r\n        maxDiscPrice: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        discountType: {\r\n            type: String,\r\n            enum: [\"PRICE\", \"PERCENTAGE\"],\r\n            required: true,\r\n        },\r\n        discountAmt: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"CouponCode\", couponCodeSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst customerAddressSchema = new mongoose.Schema(\r\n    {\r\n        customerId: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n\r\n        address: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n\r\n        state: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        city: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        pincode: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        stateCode: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n        deletedAt: {\r\n            type: Date,\r\n            default: null,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"CustomerAddress\", customerAddressSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst customerSchema = new mongoose.Schema(\r\n    {\r\n        name: {\r\n            type: String,\r\n        },\r\n        defaultAddress: {\r\n            type: ObjectId,\r\n            ref: \"CustomerAddress\",\r\n        },\r\n        gstNo: {\r\n            type: String,\r\n        },\r\n        phone: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        alternate_phone: {\r\n            type: String,\r\n        },\r\n        email: {\r\n            type: String,\r\n        },\r\n        profileUrl: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        password: {\r\n            type: String,\r\n        },\r\n\r\n        isActivated: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        isBlocked: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        cart_id: {\r\n            type: ObjectId,\r\n            ref: \"Cart\",\r\n        },\r\n        orders: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order\",\r\n            },\r\n        ],\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        deletedAt: {\r\n            type: Date,\r\n            default: null,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Customer\", customerSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst documentSchema = new mongoose.Schema({\r\n    brandRegDoc: {\r\n        type: String,\r\n    },\r\n\r\n    gstRegDoc: {\r\n        type: String,\r\n    },\r\n    actionTakenBy:{\r\n        type:ObjectId,\r\n        ref:'Admin'\r\n    }\r\n},\r\n{timestamps: true})\r\n\r\nmodule.exports = mongoose.model('Document', documentSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst invoiceSchema = new mongoose.Schema(\r\n    {\r\n        invoiceNo: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        invoiceDate: {\r\n            type: Date,\r\n            required: true,\r\n        },\r\n        invoiceType: {\r\n            type: String,\r\n            enum: [\"PURCHASE\", \"SALE\"],\r\n            required: true,\r\n        },\r\n        customer_id: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n        vendor_id: {\r\n            type: ObjectId,\r\n            ref: \"Vendor\",\r\n        },\r\n        order_id: {\r\n            type: ObjectId,\r\n            ref: \"Order\",\r\n        },\r\n        gstAmount: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        gstType: {\r\n            type: String,\r\n            enum: [\"CGST_SGST\", \"IGST\"],\r\n            required: true,\r\n        },\r\n        totalAmount: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        invoiceStatus: {\r\n            type: String,\r\n            enum: [\"PAID\", \"UNPAID\", \"OVERDUE\"],\r\n            default: \"UNPAID\",\r\n        },\r\n        soldBy: {\r\n            name: { type: String },\r\n            address: { type: String },\r\n            phone: { type: String },\r\n            gst: { type: String },\r\n        },\r\n        shippingAddress: {\r\n            name: {\r\n                type: String,\r\n            },\r\n            address: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            phone: {\r\n                type: String,\r\n            },\r\n            gst: {\r\n                type: String,\r\n            },\r\n        },\r\n        billingAddress: {\r\n            name: {\r\n                type: String,\r\n            },\r\n            address: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            phone: {\r\n                type: String,\r\n            },\r\n            gst: {\r\n                type: String,\r\n            },\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Invoice\", invoiceSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst invoiceNoSchema = new mongoose.Schema(\r\n    {\r\n        invoiceNo: {\r\n            type: Number,\r\n            default: 0,\r\n            required: true,\r\n        },\r\n        invoiceYear: {\r\n            type: Number,\r\n            default: 23,\r\n            required: true,\r\n        },\r\n        invoiceNoLength: {\r\n            type: Number,\r\n            default: 9,\r\n            required: true,\r\n        },\r\n        invoiceNoType:{\r\n            type: String,\r\n            enum: [\"PURCHASE\", \"SALE\"],\r\n            required: true,\r\n        }\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"InvoiceNo\", invoiceNoSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst orderSchema = new mongoose.Schema(\r\n    {\r\n        orderId: {\r\n            type: String,\r\n        },\r\n\r\n        vendorId: {\r\n            type: ObjectId,\r\n            ref: \"Vendor\",\r\n        },\r\n        vendorAmtInfo: {\r\n            grandTotal: { type: Number },\r\n            gstAmt: { type: Number },\r\n            total: { type: Number },\r\n        },\r\n\r\n        transaction_id: {\r\n            type: String,\r\n        },\r\n\r\n        shipping_charges: {\r\n            type: Number,\r\n        },\r\n\r\n        grand_total: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n\r\n        total: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n\r\n        total_pairs: {\r\n            type: Number,\r\n        },\r\n\r\n        GST_amount: {\r\n            type: Number,\r\n        },\r\n        discounted_amount: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        order_date: {\r\n            type: Date,\r\n        },\r\n\r\n        tracking_id: {\r\n            type: String,\r\n        },\r\n\r\n        transport_bilty: {\r\n            type: String,\r\n        },\r\n\r\n        ordered_products: {\r\n            type: ObjectId,\r\n            ref: \"Ordered_Product\",\r\n        },\r\n\r\n        order_status_id: {\r\n            type: ObjectId,\r\n            ref: \"Order_Status_Table\",\r\n        },\r\n\r\n        payment_id: {\r\n            type: ObjectId,\r\n            ref: \"Payment\",\r\n        },\r\n\r\n        customer_id: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n\r\n        shipping_address: {\r\n            stateCode: { type: String },\r\n            state: { type: String },\r\n            address: { type: String },\r\n        },\r\n        couponCode: {\r\n            type: ObjectId,\r\n            ref: \"CouponCode\",\r\n        },\r\n        saleInvoice: {\r\n            type: ObjectId,\r\n            ref: \"Invoice\",\r\n        },\r\n        purchaseInvoice: {\r\n            type: ObjectId,\r\n            ref: \"Invoice\",\r\n        },\r\n        paymentReportStatus: {\r\n            paymentStatus: {\r\n                type: String,\r\n                enum: [\"PENDING\", \"DUE\", \"PARTIAL_PAID\", \"FULL_PAID\", \"SETTLED_PAID\"],\r\n                default: \"PENDING\",\r\n            },\r\n            paidAmount: {\r\n                type: Number,\r\n            },\r\n            paymentDate: {\r\n                type: Date,\r\n            },\r\n            transactionId: {\r\n                type: String,\r\n            },\r\n            settlementAmt: {\r\n                type: Number,\r\n            },\r\n            message: {\r\n                type: String,\r\n            },\r\n            logs: [],\r\n        },\r\n        partialCancelOrderInfo: {\r\n            orderedAmtInfo: {\r\n                grand_total: {\r\n                    type: Number,\r\n                },\r\n\r\n                total: {\r\n                    type: Number,\r\n                },\r\n\r\n                GST_amount: {\r\n                    type: Number,\r\n                },\r\n            },\r\n            orderedProductAmtInfo: {\r\n                productQty: {\r\n                    type: Number,\r\n                },\r\n                grand_total: {\r\n                    type: Number,\r\n                },\r\n                total: {\r\n                    type: Number,\r\n                },\r\n                GST_amount: {\r\n                    type: Number,\r\n                },\r\n            },\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Order\", orderSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst orderStatusTableSchema = new mongoose.Schema(\r\n    {\r\n        order_id: {\r\n            type: ObjectId,\r\n            ref: \"Order\",\r\n            required: true,\r\n        },\r\n\r\n        status: {\r\n            type: String,\r\n            enum: [\r\n                \"PENDING\",\r\n                \"CONFIRMED\",\r\n                \"PARTIAL_CONFIRMED\",\r\n                \"READY_TO_DISPATCH\",\r\n                \"PICKUP_ALIGNED\",\r\n                \"PICKUP_DONE\",\r\n                \"RETURNED\",\r\n                \"RETURNED_RTO\",\r\n                \"RETURNED_RTO_DELIVERED\",\r\n                \"DELIVERED\",\r\n                \"CANCELLED\",\r\n                \"OUT_FOR_DELIVERY\",\r\n            ],\r\n            default: \"PENDING\",\r\n        },\r\n\r\n        isCompleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n        statusList: [\r\n            {\r\n                status: {\r\n                    type: String,\r\n                    enum: [\r\n                        \"CONFIRMED\",\r\n                        \"PARTIAL_CONFIRMED\",\r\n                        \"READY_TO_DISPATCH\",\r\n                        \"PICKUP_ALIGNED\",\r\n                        \"PICKUP_DONE\",\r\n                        \"RETURNED\",\r\n                        \"RETURNED_RTO\",\r\n                        \"RETURNED_RTO_DELIVERED\",\r\n                        \"DELIVERED\",\r\n                        \"OUT_FOR_DELIVERY\",\r\n                    ],\r\n                },\r\n                updatedBy: {\r\n                    vendor: { type: ObjectId, ref: \"Vendor\" },\r\n                    admin: { type: ObjectId, ref: \"Admin\" },\r\n                },\r\n                updatedAt: {\r\n                    type: Date,\r\n                },\r\n            },\r\n        ],\r\n        cancelled: {\r\n            cancelledBy: {\r\n                type: String,\r\n                enum: [\"Super_Admin\", \"Vendor\", \"Customer\"],\r\n            },\r\n\r\n            userId: {\r\n                vendor: { type: ObjectId, ref: \"Vendor\" },\r\n                admin: { type: ObjectId, ref: \"Admin\" },\r\n                customer: { type: ObjectId, ref: \"Customer\" },\r\n            },\r\n\r\n            question: {\r\n                type: ObjectId,\r\n                ref: \"Question\",\r\n            },\r\n            description: {\r\n                type: String,\r\n            },\r\n        },\r\n        cancelledStatus: {\r\n            type: String,\r\n            enum: [\"PICKUP_ALIGNED\", \"PICKUP_DONE\", \"RETURNED\", \"RETURNED_RTO\", \"RETURNED_RTO_DELIVERED\", \"CANCELLED\"],\r\n        },\r\n        cancelledStatusList: [\r\n            {\r\n                status: {\r\n                    type: String,\r\n                    enum: [\"PICKUP_ALIGNED\", \"PICKUP_DONE\", \"RETURNED\", \"RETURNED_RTO\", \"RETURNED_RTO_DELIVERED\", \"CANCELLED\"],\r\n                },\r\n                updatedBy: {\r\n                    vendor: { type: ObjectId, ref: \"Vendor\" },\r\n                    admin: { type: ObjectId, ref: \"Admin\" },\r\n                    customer: { type: ObjectId, ref: \"Customer\" },\r\n                },\r\n                updatedAt: {\r\n                    type: Date,\r\n                },\r\n            },\r\n        ],\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Order_Status_Table\", orderStatusTableSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst orderedProductSchema = new mongoose.Schema(\r\n    {\r\n        products: [\r\n            {\r\n                product_id: {\r\n                    type: ObjectId,\r\n                    ref: \"Product\",\r\n                    required: true,\r\n                },\r\n                vendor_id: {\r\n                    type: ObjectId,\r\n                    ref: \"Vendor\",\r\n                    required: true,\r\n                },\r\n                mrp: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                seller_price: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                seller_gst: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                selling_price: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                selling_gst: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                margin: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                lotSize: {\r\n                    type: String,\r\n                },\r\n                color: {\r\n                    colorName: { type: String },\r\n                    colorHex: { type: String },\r\n                },\r\n                hsnCode: {\r\n                    type: String,\r\n                },\r\n                skuCode: {\r\n                    type: String,\r\n                },\r\n                qty: {\r\n                    type: Number,\r\n                    required: true,\r\n                },\r\n                addedAt: {\r\n                    type: String,\r\n                },\r\n                isRemoved: {\r\n                    type: Boolean,\r\n                    default: false,\r\n                },\r\n            },\r\n        ],\r\n        order_id: {\r\n            type: ObjectId,\r\n            ref: \"Order\",\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Ordered_Product\", orderedProductSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst otpSchema = new mongoose.Schema(\r\n  {\r\n    mobile: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n\r\n    otp: {\r\n      type: String,\r\n    },\r\n\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n      index: { expires: 300 },\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"OTP\", otpSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst paymentSchema = new mongoose.Schema(\r\n    {\r\n        paymentId: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        order_id: {\r\n            orderId: {\r\n                type: ObjectId,\r\n                ref: \"Order\",\r\n            },\r\n            order_custom_id: {\r\n                type: String,\r\n            },\r\n        },\r\n        customer_id: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n        },\r\n        order_status: {\r\n            type: String,\r\n            enum: [\r\n                \"PENDING\",\r\n                \"CONFIRMED\",\r\n                \"PARTIAL_CONFIRMED\",\r\n                \"READY_TO_DISPATCH\",\r\n                \"PICKUP_ALIGNED\",\r\n                \"PICKUP_DONE\",\r\n                \"RETURNED\",\r\n                \"RETURNED_RTO\",\r\n                \"RETURNED_RTO_DELIVERED\",\r\n                \"DELIVERED\",\r\n                \"CANCELLED\",\r\n                \"OUT_FOR_DELIVERY\",\r\n            ],\r\n            default: \"PENDING\",\r\n        },\r\n        payment_status: {\r\n            type: String,\r\n            enum: [\"PENDING\", \"PARTIAL_PAID\", \"RECEIVED\", \"FAILED\", \"PARTIAL_REFUNDED\", \"REFUNDED\"],\r\n        },\r\n\r\n        payment_mode: {\r\n            type: String,\r\n            enum: [\"COD\", \"CUSTOM\", \"TWENTY_ADV\", \"PREPAID\"],\r\n        },\r\n\r\n        transactionId: {\r\n            type: String,\r\n        },\r\n\r\n        payment_amount: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        return_amount: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        cod_received: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        payment_date: {\r\n            type: Date, // when final payment will received, we'll put payment date\r\n        },\r\n        partial_payment: {\r\n            payment_amount: {\r\n                type: Number,\r\n            },\r\n            date: {\r\n                type: Date,\r\n            },\r\n            transactionId: {\r\n                type: String,\r\n            },\r\n        },\r\n        order_amount: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        discount_amt: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        balance_amount: {\r\n            type: Number,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Payment\", paymentSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst slugify = require(\"slugify\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst productSchema = new mongoose.Schema(\r\n    {\r\n        product_name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        sku_code: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n        hsn_code: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        description: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n\r\n        mrp: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        gst: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n\r\n        seller_price: {\r\n            type: Number,\r\n        },\r\n        sellingGST: {\r\n            type: Number,\r\n        },\r\n        margin: {\r\n            type: Number,\r\n        },\r\n\r\n        stockStatus: {\r\n            type: String,\r\n            enum: [\"In_stock\", \"Out_of_stock\"],\r\n            default: \"In_stock\",\r\n        },\r\n\r\n        qty_in_hand: {\r\n            type: Number,\r\n        },\r\n\r\n        min_order_qty: {\r\n            type: Number,\r\n        },\r\n        lotSizeQty: [\r\n            {\r\n                type: String,\r\n                required: true,\r\n                trim: true,\r\n            },\r\n        ],\r\n        color_id: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Color\",\r\n            },\r\n        ],\r\n        sole: {\r\n            type: String,\r\n            trim: true,\r\n            default:\"\"\r\n        },\r\n\r\n        material: {\r\n            type: String,\r\n            trim: true,\r\n            default:\"\"\r\n        },\r\n        packing_type: {\r\n            type: String,\r\n            trim: true,\r\n            default:\"\"\r\n        },\r\n\r\n        made_in: {\r\n            type: String,\r\n            trim: true,\r\n            default:\"India\"\r\n        },\r\n\r\n        weight: {\r\n            type: Number,\r\n        },\r\n\r\n        categoryId: {\r\n            type: ObjectId,\r\n            ref: \"Category\",\r\n            required: true,\r\n        },\r\n        subCatId: {\r\n            type: ObjectId,\r\n            ref: \"Subcategory\",\r\n            required: true,\r\n        },\r\n\r\n        thumbnail_pic: {\r\n            type: String,\r\n        },\r\n\r\n        multiple_pics: [\r\n            {\r\n                type: String,\r\n            },\r\n        ],\r\n\r\n        meta_title: {\r\n            type: String,\r\n        },\r\n\r\n        meta_keywords: {\r\n            type: String,\r\n        },\r\n\r\n        meta_description: {\r\n            type: String,\r\n        },\r\n\r\n        slug: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        status: {\r\n            type: String,\r\n            enum: [\"Approved\", \"Pending\", \"Rejected\"],\r\n            default: \"Pending\",\r\n        },\r\n\r\n        brandId: {\r\n            type: ObjectId,\r\n            ref: \"Brand\",\r\n        },\r\n\r\n        vendor_id: {\r\n            type: ObjectId,\r\n            ref: \"Vendor\",\r\n        },\r\n\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n        deletedAt: {\r\n            type: Date,\r\n            default: null,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nproductSchema.pre(\"validate\", function (next) {\r\n    if (this.product_name) {\r\n        let product = this.product_name + \" \" + this.sku_code;\r\n        this.slug = slugify(product, { lower: true, strict: true });\r\n    }\r\n    next();\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Product\", productSchema);\r\n","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst questionSchema = new mongoose.Schema(\r\n    {\r\n        questionFor: {\r\n            type: String,\r\n            enum: [\"ADMIN\", \"CUSTOMER\", \"VENDOR\"],\r\n        },\r\n\r\n        question: {\r\n            type: String,\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Question\", questionSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst subcategorySchema = new mongoose.Schema({\r\n            subcategory_name: {\r\n                type: String, required: true,\r\n            },\r\n            productId: [{\r\n                type: ObjectId, ref: 'Product',\r\n            }],\r\n            isDeleted: {\r\n                type: Boolean,\r\n                default:\r\n                    false\r\n            },\r\n\r\n            deletedAt: {\r\n                type: Date,\r\n                default:\r\n                    null,\r\n            }\r\n\r\n        },\r\n        {\r\n            timestamps: true\r\n        }\r\n    )\r\n;\r\n\r\nmodule.exports = mongoose.model('Subcategory', subcategorySchema);","const mongoose = require(\"mongoose\");\r\nconst { listOfRoleEnums, listOfAccessControll } = require(\"../utils/enums\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst vendorSchema = new mongoose.Schema(\r\n    {\r\n        firmName: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        gstNo: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        representativeName: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n        profileUrl: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        emailId: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        password: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        mobileNo: {\r\n            type: String,\r\n            required: true,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        altMobileNo: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        pickupState: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        pickupCity: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        pickupPincode: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        invoiceAddress: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        pickupAddress: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n        termsAndConditions: {\r\n            type: Boolean,\r\n            required: true,\r\n        },\r\n        bank_id: {\r\n            type: ObjectId,\r\n            ref: \"Bank\",\r\n        },\r\n        document_id: {\r\n            type: ObjectId,\r\n            ref: \"Document\",\r\n        },\r\n\r\n        brand_id: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Brand\",\r\n            },\r\n        ],\r\n\r\n        vendor_unique_id: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        auth_unique_id: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        db_unique_id: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        sharing_unique_id: {\r\n            type: String,\r\n            unique: true,\r\n            trim: true,\r\n        },\r\n\r\n        basicInfoStatus: {\r\n            type: String,\r\n            enum: [\"Approved\", \"Rejected\", \"Pending\"],\r\n            default: \"Pending\",\r\n        },\r\n        products: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Product\",\r\n            },\r\n        ],\r\n\r\n        orders: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order\",\r\n            },\r\n        ],\r\n\r\n        order_success: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order_Success\",\r\n            },\r\n        ],\r\n\r\n        order_canclled: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order_Cancelled\",\r\n            },\r\n        ],\r\n\r\n        order_pending: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order_Pending\",\r\n            },\r\n        ],\r\n\r\n        order_inprogress: [\r\n            {\r\n                type: ObjectId,\r\n                ref: \"Order_Inprogress\",\r\n            },\r\n        ],\r\n\r\n        logistics_id: {\r\n            type: ObjectId,\r\n            ref: \"Logistics\",\r\n        },\r\n\r\n        business_id: {\r\n            type: ObjectId,\r\n            ref: \"Business\",\r\n        },\r\n        status: {\r\n            type: String,\r\n            enum: [\"Pending\", \"Rejected\", \"Inprogress\", \"Approved\"],\r\n            default: \"Pending\",\r\n        },\r\n        isActive: {\r\n            type: String,\r\n            enum: [\"Active\", \"Inactive\", \"Blocked\"],\r\n            default: \"Active\",\r\n        },\r\n        actionTakenBy: {\r\n            type: ObjectId,\r\n            ref: \"Admin\",\r\n        },\r\n        marginInPercentage: {\r\n            type: Number,\r\n        },\r\n        isDeleted: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        role: [\r\n            {\r\n                type: String,\r\n                enum: \"VENDOR\",\r\n            },\r\n        ],\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Vendor\", vendorSchema);\r\n","const mongoose = require(\"mongoose\");\nconst ObjectId = mongoose.Schema.Types.ObjectId;\n\nconst wishlistSchema = new mongoose.Schema(\n    {\n        productId: {\n            type: ObjectId,\n            ref: \"Product\",\n            required: true,\n        },\n        userId: {\n            type: ObjectId,\n            ref: \"Customer\",\n            required: true,\n        },\n    },\n    { timestamps: true }\n);\n\nmodule.exports = mongoose.model(\"Wishlist\", wishlistSchema);\n","const express = require(\"express\");\nconst { Authentication } = require(\"../middlewares/auth\");\nconst { getDashboardData } = require(\"../controllers/adminDashboard\");\nconst router = express.Router();\n\nrouter.get(\"/admin-dashboard\", Authentication, getDashboardData);\n\nmodule.exports = router;\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst adminController = require(\"../controllers/adminController\");\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\nconst { AddProductRole } = require(\"../middlewares/roleAuth\");\r\nconst { uploadFile } = require(\"../controllers/imageController\");\r\n\r\nrouter.post(\"/addadmin\", Authentication, adminController.addAdmin);\r\nrouter.get(\"/getadmin\", Authentication, adminController.getAllAdmin);\r\nrouter.put(\"/update-admin/:adminid\", Authentication, adminController.updateAdminInfo);\r\nrouter.delete(\"/delete-admin/:adminid\", Authentication, adminController.deleteAdminById);\r\nrouter.post(\"/adminlogin\", adminController.adminLogin);\r\nrouter.post(\"/createsuperadmin/:secretKey\", adminController.createSuperAdmin);\r\nrouter.get(\"/alladminenums\", Authentication, adminController.getAllSubadminEnums);\r\nrouter.put(\"/verifyvendor/:vendorId\", Authentication, adminController.verifyVendor);\r\nrouter.put(\"/changevendorpassword\", adminController.changeVendorPassword);\r\nrouter.delete(\"/deleteVendor\", Authentication, adminController.deleteVendor);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst brandController = require('../controllers/brandController');\r\nconst {Authentication} = require(\"../middlewares/auth\");\r\n\r\n\r\nrouter.post(\"/brand\", Authentication, brandController.addBrand);\r\nrouter.get('/brands', Authentication,  brandController.getAllBrands);\r\nrouter.get(\"/brands/:vendorId\", Authentication, brandController.getAllBrandByVendor);\r\nrouter.patch(\"/verifybrand/:brandId\", Authentication, brandController.verifyBrandById);\r\n\r\nmodule.exports = router;","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst {\r\n    addBusinessInfo,\r\n    saveSocialMedia,\r\n    addBusinessGST,\r\n    getBusinessInfo,\r\n    addBusinessFiles,\r\n    setDefaultGst,\r\n    bannerForClientPage,\r\n    getBannerForClientPage,\r\n    bannerDeleteById,\r\n} = require(\"../controllers/businessController\");\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/addbusinessinfo\", Authentication, addBusinessInfo);\r\nrouter.post(\"/addbusinessgst\", Authentication, addBusinessGST);\r\nrouter.get(\"/getbusinessinfo\", Authentication, getBusinessInfo);\r\nrouter.post(\"/addbusinessfiles\", Authentication, addBusinessFiles);\r\nrouter.patch(\"/updatedefgst\", Authentication, setDefaultGst);\r\nrouter.post(\"/savesocialmedia\", Authentication, saveSocialMedia);\r\nrouter.post(\"/bannerupload\", Authentication, bannerForClientPage);\r\nrouter.get(\"/bannerimages\", Authentication, getBannerForClientPage);\r\nrouter.get(\"/bannerimagesforclient\", AuthenticationCustomer, getBannerForClientPage);\r\nrouter.delete(\"/deletebanner/:bannerId\", Authentication, bannerDeleteById);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst { addToCart, getAllAbandentCarts, getCartByCustomerId, removeFromCart, qtyIncreaseDecrease } = require(\"../controllers/cartController\");\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\nconst { abandonedOrderRole } = require(\"../middlewares/roleAuth\");\r\n\r\nrouter.post(\"/addtocart/:customerId\", AuthenticationCustomer, addToCart);\r\nrouter.get(\"/cart/:customerId\", getCartByCustomerId);\r\nrouter.get(\"/abandonedcarts\", Authentication, abandonedOrderRole, getAllAbandentCarts);\r\nrouter.put(\"/removefromcart/:customerId/:index\", AuthenticationCustomer, removeFromCart);\r\nrouter.put(\"/qty-increase-decrease/:customerId/:index/:qty\", AuthenticationCustomer, qtyIncreaseDecrease);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst categoryController = require('../controllers/categoryController');\r\n\r\n\r\n\r\nrouter.post(\"/category\", categoryController.addCategory);\r\nrouter.get('/categories', categoryController.getAllCategories);\r\n// router.get('/category/:categoryId', productController.getProductById);\r\nrouter.put('/category/:categoryId', categoryController.updateCategoryById);\r\n// router.delete('/category/:categoryId', productController.addProduct);\r\n\r\n\r\nmodule.exports = router;","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\nconst { colorRole } = require(\"../middlewares/roleAuth\");\r\nconst { getAllColor, addNewColor, deleteColorById } = require(\"../controllers/colorController\");\r\n\r\nrouter.get(\"/getallcolors\", getAllColor);\r\nrouter.post(\"/addnewcolor\", Authentication, colorRole, addNewColor);\r\nrouter.delete(\"/deletecolorbyid/:colorId\", Authentication, colorRole, deleteColorById);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst { getAllCoupons, generateCoupon, applyCoupon, deleteCoupon } = require(\"../controllers/couponCodeController\");\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/allcoupon\", getAllCoupons);\r\nrouter.post(\"/generatecoupon\", generateCoupon);\r\nrouter.post(\"/applycoupon/:customerid\", applyCoupon);\r\nrouter.patch(\"/deletecoupon/:couponid\", deleteCoupon);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst customerController = require(\"../controllers/customerController\");\r\nconst customerAddressController = require(\"../controllers/customerAddressController\");\r\n\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/login-customer\", customerController.loginUser);\r\nrouter.get(\"/customers\", Authentication, customerController.getAllCustomer);\r\nrouter.get(\"/customer/:customerId\", Authentication, customerController.getCustomerById);\r\nrouter.put(\"/updatecustomer/:customerId\", AuthenticationCustomer, customerController.updateCustomerById);\r\nrouter.delete(\"/customer/:customerId\", Authentication, customerController.deleteCustomerById);\r\nrouter.post(\"/addcustomrinformation/:customerid\", customerAddressController.addCustomerInformation);\r\nrouter.delete(\"/address/:customerId/:addressId\", AuthenticationCustomer, customerAddressController.deleteAddressById);\r\nrouter.patch(\"/blockcustomer/:customerId\", Authentication, customerController.blockCustomerById);\r\nrouter.post(\"/getordersbycustomerphone\", Authentication, customerController.findOrdersByPhone);\r\nrouter.post(\"/addaddress/:customerId\", AuthenticationCustomer, customerAddressController.addAddress);\r\nrouter.get(\"/getalladdress/:customerId\", AuthenticationCustomer, customerAddressController.getAllAddresses);\r\nrouter.put(\"/setdefaultaddress/:customerId/:addressId\", AuthenticationCustomer, customerController.setDefaultAddress);\r\nrouter.post(\"/change-password/:customerId\", Authentication, customerController.changePassword);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\nconst { AuthenticationCustomer } = require(\"../middlewares/auth\");\nconst { getDashboardData, getProductBySlug } = require(\"../controllers/dashboardController\");\nconst router = express.Router();\n\nrouter.get(\"/get-store-info\", getDashboardData);\nrouter.get(\"/get-product-info-by-id/:slug\", getProductBySlug);\n\nmodule.exports = router;\n","const express = require(\"express\");\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\nconst { addFeaturedProducts, removeFeaturedProduct, getFeaturedProduct } = require(\"../controllers/homepageController\");\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/bestsellingproducts\", Authentication, addFeaturedProducts);\r\nrouter.post(\"/removebestsellingproduct\", Authentication, removeFeaturedProduct);\r\nrouter.get(\"/allbestsellingproduct\", Authentication, getFeaturedProduct);\r\n\r\nmodule.exports = router;","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\nconst { getAllPurchaseInvoice, getAllSaleInvoice, downoadInvoiceByInvoiceNumber } = require(\"../controllers/invoiceController\");\r\n\r\nrouter.get(\"/purchaseinvoice\", Authentication, getAllPurchaseInvoice);\r\nrouter.get(\"/saleinvoice\", Authentication, getAllSaleInvoice);\r\nrouter.get(\"/downloadpdf/:invoicenumber/:invoicetype\", Authentication, downoadInvoiceByInvoiceNumber);\r\nrouter.get(\"/customer-downloadpdf/:invoicenumber/:invoicetype\", AuthenticationCustomer, downoadInvoiceByInvoiceNumber);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst orderController = require(\"../controllers/orderController\");\r\nconst orderStatusTableController = require(\"../controllers/orderStatusTableController\");\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\nconst orderedProductModel = require(\"../models/orderedProductModel\");\r\nconst { exportOrderReport } = require(\"../controllers/excelFileController\");\r\n\r\nrouter.get(\"/orders\", Authentication, orderController.getAllOrders);\r\nrouter.get(\"/order/:customerId/:orderId\", AuthenticationCustomer, orderController.getOrderByOrderId);\r\nrouter.get(\"/orders/:customerId\", AuthenticationCustomer, orderController.getOrdersByCustomerId);\r\nrouter.get(\"/orderedproduct/:orderedproductid\", orderController.getOrderedProduct);\r\nrouter.post(\"/createorder/:customerId\", orderController.createOrder);\r\nrouter.put(\"/cancelorder/:orderId\", orderController.cancelOrderByOrderId);\r\nrouter.put(\"/updateorder/:orderId\", Authentication, orderController.updateOrderByOrderId);\r\nrouter.patch(\"/patchtrackingid/:orderId\", orderController.patchTrackingIdByOrderId);\r\nrouter.get(\"/getcancelledorders\", Authentication, orderController.getAllCancelledOrder);\r\n\r\nrouter.post(\"/order-report\", Authentication, exportOrderReport);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst orderStatusTableController = require(\"../controllers/orderStatusTableController\");\r\n\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/change-order-status/:orderId\", Authentication, orderStatusTableController.updateOrderStatusByOrderId);\r\nrouter.post(\"/change-bulk-order-status\", Authentication, orderStatusTableController.bulkOrderProcess);\r\nrouter.post(\"/return-order-status/:orderId\", Authentication, orderStatusTableController.cancelOrderReturnById);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\r\nconst { sendOTP, verityOTP, forgetPasswordUsingOtp } = require(\"../controllers/otpController\");\r\nconst { sentOTP, verifyOTP, forgetOTP, verifyResetOTP } = require(\"../controllers/OTP\");\r\nconst router = express.Router();\r\n\r\n// router.get(\"/sendotp/:phone\", sendOTP);\r\nrouter.get(\"/verifyotp/:phone/:otpCode\", verityOTP);\r\nrouter.post(\"/forget-password/:phone/:otpCode\", forgetPasswordUsingOtp);\r\n\r\n// router.post(\"/messages\", sendSMS);\r\nrouter.post(\"/sendOTP\", sentOTP);\r\nrouter.post(\"/forgetOTP\", forgetOTP);\r\nrouter.post(\"/verifyOTP\", verifyOTP);\r\nrouter.post(\"/verifyResetOTP\", verifyResetOTP);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst paymentController = require('../controllers/paymentController');\r\n\r\nconst { Authentication } = require('../middlewares/auth');\r\n\r\n\r\nrouter.post(\"/addpayment/:orderId\", paymentController.createPayment);\r\nrouter.put(\"/updatepaymentstatus/:paymentId\", paymentController.updatePaymentStatus);\r\nrouter.post(\"/createpayment/:orderId\", paymentController.addPayment);\r\n\r\n\r\nmodule.exports = router;","const express = require(\"express\");\r\nconst app = express();\r\nconst router = express.Router();\r\n\r\nconst productController = require(\"../controllers/productController\");\r\nconst { Authentication, AuthenticationCustomer } = require(\"../middlewares/auth\");\r\nconst { AddProductRole, AllProductRole, verifyProudct, outOfStockProduct } = require(\"../middlewares/roleAuth\");\r\nconst { exportIDs, exportProductAddDemoSheet, csvToJson } = require(\"../controllers/excelFileController\");\r\n\r\n// PRODUCT ROUTES\r\nrouter.post(\"/product\", Authentication, productController.addProduct);\r\nrouter.get(\"/products\", Authentication, productController.getAllProducts);\r\nrouter.get(\"/allproducts\", Authentication, productController.getAllProductsForFilter);\r\nrouter.get(\"/dashboardproduct\", AuthenticationCustomer, productController.getAllProductsForDashboard);\r\nrouter.get(\"/product/:productId\", productController.getProductById);\r\nrouter.patch(\"/changeproductstatus/:productId\", Authentication, productController.changeProductStatus);\r\nrouter.patch(\"/changeproductstockstatus/:productId\", Authentication, productController.changeProductStockStatus);\r\nrouter.put(\"/updateproduct/:productId\", Authentication, productController.updateProduct);\r\n\r\n// router.post(\"/csvupload\", productController.csvProduct);\r\nrouter.get(\"/downloadDependencies\", Authentication, exportIDs);\r\nrouter.get(\"/downloadprodctxlsx\", Authentication, exportProductAddDemoSheet);\r\nrouter.post(\"/bulkproductupload\", Authentication, csvToJson);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\nconst router = express.Router();\nconst { Authentication } = require(\"../middlewares/auth\");\nconst { updateProfile, changePassword } = require(\"../controllers/profileController\");\n\nrouter.put(\"/update-userprofile\", Authentication, updateProfile);\nrouter.post(\"/changePassword\", changePassword);\n\nmodule.exports = router;\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst questionController = require(\"../controllers/questionController\");\r\nconst cancelledReasonController = require(\"../controllers/cancelReasonController\");\r\n\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/addquestion\", Authentication, questionController.addQuestions);\r\nrouter.get(\"/getallquestion\", Authentication, questionController.getAllQuestion);\r\nrouter.get(\"/getallquestionbyuser\", Authentication, questionController.getAllQuestionByModel);\r\nrouter.delete(\"/delete-question-byid/:questionid\", Authentication, questionController.deleteQuestionById);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\nconst { getOrderReport, exportSaleReport, exportPurchaseReport, getPaymentReport, updatePaymentReport } = require(\"../controllers/reportController\");\nconst { Authentication } = require(\"../middlewares/auth\");\nconst router = express.Router();\n\nrouter.get(\"/order-report\", Authentication, getOrderReport);\nrouter.post(\"/export-sale-report\", Authentication, exportSaleReport);\nrouter.post(\"/export-purchase-report\", Authentication, exportPurchaseReport);\nrouter.get(\"/payment-report\", Authentication, getPaymentReport);\nrouter.put(\"/update-payment-report/:orderid\", Authentication, updatePaymentReport)\n\nmodule.exports = router;\n","const express = require(\"express\");\r\nconst router = express.Router();\r\nconst vendorController = require(\"../controllers/vendorController\");\r\nconst { Authentication } = require(\"../middlewares/auth\");\r\n\r\nrouter.post(\"/addvendor\", vendorController.addVendor);\r\nrouter.get(\"/allvendors\", vendorController.getAllVendors);\r\nrouter.post(\"/create-vendor-by-admin\", Authentication, vendorController.createVendorByAdmin);\r\nrouter.put(\"/update-vendor-by-admin/:vendorId\", Authentication, vendorController.updateVendor);\r\n\r\nmodule.exports = router;\r\n","const express = require(\"express\");\nconst { addToWishlist, removeFromWishlist, getWishlistProduct } = require(\"../controllers/wishlistController\");\nconst { AuthenticationCustomer } = require(\"../middlewares/auth\");\nconst router = express.Router();\n\nrouter.post(\"/add-to-wishlist\", AuthenticationCustomer, addToWishlist);\nrouter.delete(\"/remove-from-wishlist/:wishlistId\", AuthenticationCustomer, removeFromWishlist);\nrouter.get(\"/get-wishlist\", AuthenticationCustomer, getWishlistProduct);\nmodule.exports = router;\n","const isExpiryCoupon = (validTill) => {\n    let day = validTill.getDate();\n    let month = validTill.getMonth() + 1;\n    let year = validTill.getFullYear();\n    let expiryDateMS = new Date(`${year}-${month < 10 ? \"0\" + month : month}-${day < 10 ? \"0\" + day : day}`).getTime() / 1000;\n\n    let now = Date.now();\n    // let date = new Date(now + (5.5 * (3600 * 1000))); // Deployment time cases for +5:30 GMT\n    let date = new Date();\n    let dateStr = `${date.getFullYear()}-${date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1}-${date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate()}`;\n    let currentDateMS = new Date(dateStr).getTime() / 1000;\n\n    return currentDateMS <= expiryDateMS ? false : true;\n};\n\nmodule.exports = { isExpiryCoupon };\n","const dateToLocalDate = (date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    day = day < 10 ? \"0\" + day : day;\n    month = month < 10 ? \"0\" + month : month;\n    return `${day}/${month}/${year}`;\n};\n\nconst dateToLocalDateTime = (date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    let hr = date.getHours();\n    let min = date.getMinutes();\n    let ampm = hr < 12 ? \"AM\" : \"PM\";\n    hr = hr % 12;\n    hr = hr ? hr : 12;\n    hr = hr < 10 ? \"0\" + hr : hr;\n    min = min < 10 ? \"0\" + min : min;\n    day = day < 10 ? \"0\" + day : day;\n    month = month < 10 ? \"0\" + month : month;\n    return `${day}/${month}/${year} ${hr}:${min} ${ampm}`;\n};\n\nmodule.exports = { dateToLocalDate, dateToLocalDateTime };\n","let roleEnums = {\r\n    MANAGE_MENU: {\r\n        ADD_CATEGORY: \"ADD_CATEGORY\",\r\n        ADD_SUBCATEGORY: \"ADD_SUBCATEGORY\",\r\n    },\r\n    MANAGE_PRODUCT: {\r\n        ADD_PRODUCT: \"ADD_PRODUCT\",\r\n        ALL_PRODUCT: \"ALL_PRODUCT\",\r\n        PRODUCT_COLOR: \"PRODUCT_COLOR\",\r\n        PRODUCT_SIZE: \"PRODUCT_SIZE\",\r\n        BRAND: \"BRAND\",\r\n        OUT_OF_STOCK_PRODUCTS: \"OUT_OF_STOCK_PRODUCTS\",\r\n        PRODUCT_REVIEW: \"PRODUCT_REVIEW\",\r\n    },\r\n    MANAGE_ORDERS: {\r\n        ALL_ORDERS: \"ALL_ORDERS\",\r\n        CONFIRM_ORDERS: \"CONFIRM_ORDERS\",\r\n        SHIPPED_ORDER: \"SHIPPED_ORDER\",\r\n        PICKUP_PENDING: \"PICKUP_PENDING\",\r\n        DELIVERED_ORDER: \"DELIVERED_ORDER\",\r\n        RTO_ORDER: \"RTO_ORDER\",\r\n        RTO_DELIVERED: \"RTO_DELIVERED\",\r\n        CANCEL_ORDER: \"CANCEL_ORDER\",\r\n        PARTIAL_DELIVERED: \"PARTIAL_DELIVERED\",\r\n        HOLD: \"HOLD\",\r\n        PICKUP_INITIATE: \"PICKUP_INITIATE\",\r\n    },\r\n    IMPORT_PINCODE: \"IMPORT_PINCODE\",\r\n    MANAGE_RETURN: {\r\n        RETURN_REQUEST: \"RETURN_REQUEST\",\r\n        SETTLEMENT_REQUEST: \"SETTLEMENT_REQUEST\",\r\n        REFUNDED: \"REFUNDED\",\r\n        SETTLEMENT_REQUEST_CANCEL: \"SETTLEMENT_REQUEST_CANCEL\",\r\n    },\r\n    ALL_USERS: \"ALL_USERS\",\r\n    MANAGE_COUPONS: {\r\n        ADD_COUPON: \"ADD_COUPON\",\r\n        ALL_COUPON: \"ALL_COUPON\",\r\n    },\r\n    MANAGE_SALES: \"MANAGE_SALES\",\r\n    HOMEPAGE_MANAGE: \"HOMEPAGE_MANAGE\",\r\n    MANAGE_VENDOR: {\r\n        ADD_VENDOR: \"ADD_VENDOR\",\r\n        ALL_VENDOR: \"ALL_VENDOR\",\r\n        ALL_OUTSTANDING: \"ALL_OUTSTANDING\",\r\n        ALL_SETTLED: \"ALL_SETTLED\",\r\n    },\r\n    ADD_EMPLOYEE: \"ADD_EMPLOYEE\",\r\n    EXPORT_INFORMATION: \"EXPORT_INFORMATION\",\r\n};\r\nlet accessControls = {\r\n    ORDERS: {\r\n        ACCESS: {\r\n            ORDERS_VIEW: false,\r\n            ORDERS_EDIT: false,\r\n            ORDERS_DOWNLOAD: false,\r\n        },\r\n        ORDERS_ALL_ORDERS: \"ALL_ORDERS\",\r\n        ORDERS_CHANGE_ORDER_STATUS: \"CHANGE_ORDER_STATUS\",\r\n        ORDERS_ABANDONED_ORDERS: \"ABANDONED_ORDERS\",\r\n    },\r\n    COUPON: {\r\n        ACCESS: {\r\n            COUPON_VIEW: false,\r\n            COUPON_EDIT: false,\r\n            COUPON_DOWNLOAD: false,\r\n        },\r\n        COUPON_ALL_COUPON: \"ALL_COUPON\",\r\n        COUPON_ADD_NEW_COUPON: \"ADD_NEW_COUPON\",\r\n    },\r\n    PRODUCT: {\r\n        ACCESS: {\r\n            PRODUCT_VIEW: false,\r\n            PRODUCT_EDIT: false,\r\n            PRODUCT_DOWNLOAD: false,\r\n        },\r\n        PRODUCT_ALL_PRODUCT: \"ALL_PRODUCT\",\r\n        PRODUCT_ADD_PRODUCT: \"ADD_PRODUCT\",\r\n    },\r\n    VENDOR: {\r\n        ACCESS: {\r\n            VENDOR_VIEW: false,\r\n            VENDOR_EDIT: false,\r\n            VENDOR_DOWNLOAD: false,\r\n        },\r\n        VENDOR_ALL_VENDOR: \"ALL_VENDOR\",\r\n        VENDOR_ADD_VENDOR: \"ADD_VENDOR\",\r\n        VENDOR_VENDOR_PAYMENT: \"VENDOR_PAYMENT\",\r\n        VENDOR_VENDOR_MOV: \"VENDOR_MOV\",\r\n    },\r\n    CUSTOMER: {\r\n        ACCESS: {\r\n            CUSTOMER_VIEW: false,\r\n            CUSTOMER_EDIT: false,\r\n            CUSTOMER_DOWNLOAD: false,\r\n        },\r\n        CUSTOMER_ALL_CUSTOMER: \"ALL_CUSTOMER\",\r\n        CUSTOMER_CUSTOMER_ORDER_BY_PHONE: \"CUSTOMER_ORDER_BY_PHONE\",\r\n    },\r\n    SETTING: {\r\n        SETTING_BUSINESS_INFO_SETTING: \"BUSINESS_INFO_SETTING\",\r\n        SETTING_HOMEPAGE_SETTING: \"HOMEPAGE_SETTING\",\r\n    },\r\n    REPORT: {\r\n        ACCESS: { REPORT_VIEW: false, REPORT_DOWNLOAD: false },\r\n    },\r\n    SUB_ADMIN: {\r\n        ACCESS: { SUBADMIN_VIEW: false, SUBADMIN_DOWNLOAD: false },\r\n        SUB_ADMIN_ALL_ADMIN: \"ALL_ADMIN\",\r\n        SUB_ADMIN_ADD_ADMIN: \"ADD_ADMIN\",\r\n    },\r\n};\r\nconst listOfRoleEnums = () => {\r\n    let arr = [\"ADMIN\"];\r\n\r\n    for (let keys in roleEnums) {\r\n        if (typeof roleEnums[keys] === \"string\") {\r\n            arr.push(roleEnums[keys]);\r\n        } else {\r\n            arr = [...arr, ...Object.values(roleEnums[keys]).flat()];\r\n        }\r\n    }\r\n    return arr;\r\n};\r\n\r\nconst listOfAccessControll = () => {\r\n    let arr = [\"ADMIN\"];\r\n    for (let x of Object.keys(accessControls)) {\r\n        if (typeof accessControls[x] !== \"string\") {\r\n            for (let y of Object.keys(accessControls[x])) {\r\n                if (typeof accessControls[x][y] !== \"string\") {\r\n                    for (let z of Object.keys(accessControls[x][y])) {\r\n                        arr.push(z);\r\n                    }\r\n                } else {\r\n                    arr.push(y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n};\r\n\r\nmodule.exports = {\r\n    roleEnums,\r\n    listOfRoleEnums,\r\n    accessControls,\r\n    listOfAccessControll,\r\n};\r\n","const Puppeteer = require(\"puppeteer\");\r\nvar hbs = require(\"handlebars\");\r\nvar fs = require(\"fs\");\r\nconst path = require(\"path\");\r\n\r\nconst generatePdf = async (invData, footerText) => {\r\n    const templatePath = path.resolve(\"invoice.hbs\");\r\n    const content = fs.readFileSync(templatePath, \"utf8\");\r\n    const template = hbs.compile(content);\r\n    let html = template(invData);\r\n    const browser = await Puppeteer.launch({ headless: \"new\" });\r\n    const page = await browser.newPage();\r\n    await page.setContent(html);\r\n\r\n    await page.addStyleTag({ content: \".pageNumbers { content: counter(page) }\" })\r\n    let pdf = await page.pdf({\r\n        format:'A4',\r\n        printBackground: true,\r\n        displayHeaderFooter: true,\r\n        footerTemplate: `<div style='width:100%; font-size:10px; text-align: end; font-weight: 600; padding-right:20px'>${footerText}<span style=\"margin-left:5px;\"><span class='pageNumber'></span><span>/</span><span class='totalPages'></span></span></div>`,\r\n    });\r\n    await browser.close();\r\n    return pdf;\r\n};\r\n\r\nmodule.exports = { generatePdf };\r\n\r\n\r\n// const data = {\r\n//     logo: \"\",\r\n//     brandName: \"\",\r\n//     soldBy: \"\",\r\n//     soldByAddress: \"\",\r\n//     soldByGst: \"\",\r\n//     invoiceNo: \"\",\r\n//     orderId: \"\",\r\n//     orderDate: \"\",\r\n//     invoiceDate: \"\",\r\n//     billToName: \"\",\r\n//     billToAddress: \"\",\r\n//     billToPhone: \"\",\r\n//     billToGST: \"\",\r\n//     shipToName: \"\",\r\n//     shipToAddress: \"\",\r\n//     shipToPhone: \"\",\r\n//     shipToGST: \"\",\r\n//     tableRow: [],\r\n//     totalAmt: \"\",\r\n//     totalCGSTAmt: \"\",\r\n//     totalSGSTAmt: \"\",\r\n//     totalIGSTAmt: \"\",\r\n//     taxableAmt: \"\",\r\n//     totalTaxAmt: \"\",\r\n//     grossTotalAmt: \"\",\r\n//     discountAmt: \"\",\r\n//     netPayableAmount: \"\",\r\n// };","const financialYear = () => {\n    let date = new Date();\n    let currentYear = date.getFullYear();\n    let currentMonth = date.getMonth() + 1;\n    let year = \"\";\n    if (currentMonth < 4) {\n        year = currentYear - 1;\n    } else {\n        year = currentYear;\n    }\n    return year.toString().slice(2);\n};\n\nmodule.exports = { financialYear };\n","const percentage = (num, per) => {\r\n    return (Number(num)*Number(per))/100;\r\n}\r\n\r\nconst calculateMarginAndSelling = (sellerAmount, margin, sellingGst) => {\r\n    if(Number(sellerAmount) === 0){\r\n        return 0;\r\n    }\r\n  \r\n    let baseAmount = Number(sellerAmount);\r\n    if(Number(margin) === 0){\r\n        return Number(baseAmount.toFixed(2));\r\n    }else{\r\n        let basePlusMarginAmt = percentage(baseAmount, margin) + baseAmount;\r\n        let totalAmt = percentage(basePlusMarginAmt, sellingGst) + Number(basePlusMarginAmt);\r\n        return Number(totalAmt.toFixed(2));\r\n    }\r\n}\r\nmodule.exports = {percentage,calculateMarginAndSelling};","const stateAndCode = {\r\n    \"Himachal Pradesh\": \"02\",\r\n    Punjab: \"03\",\r\n    Chandigarh: \"04\",\r\n    Uttarakhand: \"05\",\r\n    Haryana: \"06\",\r\n    Delhi: \"07\",\r\n    Rajasthan: \"08\",\r\n    \"Uttar Pradesh\": \"09\",\r\n    Bihar: \"10\",\r\n    Sikkim: \"11\",\r\n    \"Arunanchal Pradesh\": \"12\",\r\n    Nagaland: \"13\",\r\n    Manipur: \"14\",\r\n    Mizoram: \"15\",\r\n    Tripura: \"16\",\r\n    Meghalaya: \"17\",\r\n    Assam: \"18\",\r\n    \"West Bengal\": \"19\",\r\n    Jharkhand: \"20\",\r\n    Odisha: \"21\",\r\n    Chattisgarh: \"22\",\r\n    \"Madhya Pradesh\": \"23\",\r\n    Gujarat: \"24\",\r\n    \"Dadra And Nagar Haveli And Daman And  Diu\": \"26\",\r\n    Maharashtra: \"27\",\r\n    Karnataka: \"29\",\r\n    Goa: \"30\",\r\n    Lakshadweep: \"31\",\r\n    Kerela: \"32\",\r\n    \"Tamil Nadu\": \"33\",\r\n    Puducherry: \"34\",\r\n    \"Andaman and Nicobar Islands\": \"35\",\r\n    Telangana: \"36\",\r\n    \"Andhra Pradesh\": \"37\",\r\n    Ladakh: \"38\",\r\n    \"Other Territory\": \"97\",\r\n};\r\n\r\nmodule.exports = {stateAndCode}","const ObjectId = require(\"mongoose\").Types.ObjectId;\r\n\r\nconst isValidRequestBody = (requestBody) => {\r\n  return Object.keys(requestBody).length > 0;\r\n};\r\n\r\nconst isValidObjectId = (objectId) => {\r\n  if (!ObjectId.isValid(objectId)) return false;\r\n  return true;\r\n};\r\n\r\nconst isValid = (value) => {\r\n  if (typeof value === \"undefined\" || typeof value === null) return false;\r\n  if (typeof value === \"string\" && value.trim().length == 0) return false;\r\n  return true;\r\n};\r\n\r\nlet isValidName = function (name) {\r\n  let nameRegex = /^[A-Za-z\\s]{1,}[A-Za-z\\s]{0,}$/;\r\n  return nameRegex.test(name);\r\n};\r\n\r\nconst isValidEmail = function (gmail) {\r\n  let regex = /^\\w+([\\.-]?\\w+)@\\w+([\\.-]?\\w+)(\\.\\w{2,6})+$/;\r\n  return regex.test(gmail);\r\n};\r\n\r\nlet isValidPassword = function (password) {\r\n  let regexPassword =\r\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,15}$/;\r\n  return regexPassword.test(password);\r\n};\r\n\r\nconst isValidMoblie = function (mobile) {\r\n  let regex =\r\n    /^(?:(?:\\+|0{0,2})91(\\s*|[\\-])?|[0]?)?([6789]\\d{2}([-]?)\\d{3}([-]?)\\d{4})$/;\r\n  return regex.test(mobile);\r\n};\r\n\r\nconst isValidGST = function (GST) {\r\n  let regex = /\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}[A-Z\\d]{1}[Z]{1}[A-Z\\d]{1}/;\r\n  return regex.test(GST);\r\n};\r\n\r\nconst isValidPrice = function (price) {\r\n  let regex = /^\\d+(?:[.,]\\d+)*$/;\r\n  return regex.test(price);\r\n};\r\n\r\nconst isValidImg = (img) => {\r\n  const reg = /image\\/png|image\\/jpeg|image\\/jpg/;\r\n  return reg.test(img);\r\n};\r\n\r\nfunction isValidStatus(value) {\r\n  if( [\"pending\", \"completed\", \"cancled\"].indexOf(value) == -1) {return false}\r\n  else return true\r\n};\r\n\r\nfunction isValidPin(pin) {\r\n  const regex = /^[1-9]{1}[0-9]{2}\\\\s{0, 1}[0-9]{3}$/;\r\n  return regex.test(pin);\r\n}\r\n\r\nmodule.exports = {\r\n  isValidRequestBody,\r\n  isValidObjectId,\r\n  isValid,\r\n  isValidName,\r\n  isValidEmail,\r\n  isValidImg,\r\n  isValidPassword,\r\n  isValidMoblie,\r\n  isValidGST,\r\n  isValidPrice,\r\n  isValidStatus,\r\n  isValidPin\r\n};","module.exports = require(\"aws-sdk\");","module.exports = require(\"aws-sdk/lib/maintenance_mode_message\");","module.exports = require(\"axios\");","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"convert-csv-to-json\");","module.exports = require(\"cors\");","module.exports = require(\"csvtojson\");","module.exports = require(\"dotenv\");","module.exports = require(\"exceljs\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"firebase/app\");","module.exports = require(\"firebase/storage\");","module.exports = require(\"handlebars\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"lodash\");","module.exports = require(\"mongoose\");","module.exports = require(\"puppeteer\");","module.exports = require(\"request\");","module.exports = require(\"slugify\");","module.exports = require(\"twilio\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst fileUpload = require(\"express-fileupload\");\r\nconst path = require(\"path\");\r\nconst cors = require(\"cors\");\r\nconst app = express();\r\nrequire(\"dotenv\").config();\r\n\r\nconst productRoutes = require(\"./src/routes/productRoutes\");\r\nconst categoryRoutes = require(\"./src/routes/categoryRoutes\");\r\nconst brandRoutes = require(\"./src/routes/brandRoutes\");\r\nconst vendorRoutes = require(\"./src/routes/vendorRoutes\");\r\nconst adminRoutes = require(\"./src/routes/adminRoutes\");\r\nconst colorRoutes = require(\"./src/routes/colorRoutes\");\r\nconst customerRoutes = require(\"./src/routes/customerRoutes\");\r\nconst orderRoutes = require(\"./src/routes/orderRoutes\");\r\nconst paymentRoutes = require(\"./src/routes/paymentRoutes\");\r\nconst cartRoutes = require(\"./src/routes/cartRoutes\");\r\nconst questionRoutes = require(\"./src/routes/questionsRoutes\");\r\nconst couponRoutes = require(\"./src/routes/couponCodeRoutes\");\r\nconst businessRoutes = require(\"./src/routes/businessRoutes\");\r\nconst homepageRoutes = require(\"./src/routes/homepageRoutes\");\r\nconst invoiceRoutes = require(\"./src/routes/invoiceRoutes\");\r\nconst optRoutes = require(\"./src/routes/otpRoutes\");\r\nconst orderStatusRoute = require(\"./src/routes/orderStatusTableRoutes\");\r\nconst profileRoutes = require(\"./src/routes/profileRoutes\");\r\nconst reportRoutes = require(\"./src/routes/reportRoutes\");\r\nconst dashboardRoutes = require(\"./src/routes/dashboardRoutes\");\r\nconst wishlistRoutes = require(\"./src/routes/wishlistRoutes\");\r\nconst adminDashboardRoute = require(\"./src/routes/adminDashboardRoute\");\r\nconst { mongoDbUrl, port } = require(\"./src/middlewares/config\");\r\n\r\napp.use(express.json());\r\napp.use(fileUpload());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\nmongoose\r\n    .connect(mongoDbUrl, { useNewUrlParser: true })\r\n    .then(() => console.log(\"Connected with Database\"))\r\n    .catch((err) => console.log(err));\r\n\r\napp.use(\"/\", productRoutes);\r\napp.use(\"/\", categoryRoutes);\r\napp.use(\"/\", brandRoutes);\r\napp.use(\"/\", vendorRoutes);\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", colorRoutes);\r\napp.use(\"/\", customerRoutes);\r\napp.use(\"/\", orderRoutes);\r\napp.use(\"/\", paymentRoutes);\r\napp.use(\"/\", cartRoutes);\r\napp.use(\"/\", questionRoutes);\r\napp.use(\"/\", couponRoutes);\r\napp.use(\"/\", businessRoutes);\r\napp.use(\"/\", homepageRoutes);\r\napp.use(\"/\", invoiceRoutes);\r\napp.use(\"/\", optRoutes);\r\napp.use(\"/\", orderStatusRoute);\r\napp.use(\"/\", profileRoutes);\r\napp.use(\"/\", reportRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", wishlistRoutes);\r\napp.use(\"/\", adminDashboardRoute);\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>factorez.com backend deployed successfully</h1>\");\r\n});\r\n\r\napp.listen(port, () => console.log(`Server is up and running on port: ${port}`));\r\n"],"names":["axios","bcrypt","otpModel","customerModel","generateRandomID","length","id","i","Math","floor","digits","random","module","exports","sentOTP","async","req","res","mobile","body","apiKey","sid","type","senderId","OTP","smsData","method","url","headers","data","response","hash","otp","findOne","save","status","send","message","error","console","log","verifyOTP","otpHolder","validUser","compare","deleteOne","resAcc","phone","customer","isDeleted","create","isBlocked","statusCode","isActivated","customerId","_id","name","email","userType","toString","profileUrl","photo","alternate_phone","altMobileNo","date","Date","now","issueTime","token","jwt","sign","userId","userModel","iat","customerTokenSecretKey","expiresIn","createAccountAndToken","setHeader","forgetOTP","verifyResetOTP","password","hashedPassword","updatePassword","adminModel","listOfRoleEnums","roleEnums","adminSecretKey","tokenSecretKey","vendorModel","isValid","isValidEmail","productModel","addAdmin","role","find","$or","toLowerCase","admin","undefined","isSuperAdmin","getAllAdmin","select","createSuperAdmin","params","secretKey","superAdmin","adminLogin","includes","user","emailId","vendor_unique_id","err","result","userFlag","vendorId","representativeName","mobileNo","hasAccess","getAllSubadminEnums","verifyVendor","vendorMargin","vendorStatus","vendorObj","findById","marginInPercentage","actionTakenBy","updateMany","vendor_id","$set","margin","deleteVendor","vendor","changeVendorPassword","newPassword","updateAdminInfo","adminId","adminid","deleteAdminById","orderModel","getDateStrToMS","dateStr","setHours","getTime","getCurrentYear","firstMonth","getFullYear","lastMonth","getCurrentMonth","firstDay","getMonth","lastDay","getCurrentWeek","curr","first","getDate","getDay","last","setDate","getDashboardData","products","populate","productCount","customerCount","vendorCount","orderCount","todayOrderCount","thisWeakOrderCount","thisMonthOrderCount","thisYearOrderCount","thisYearSale","thisMonthSale","thisWeekSale","overAllSale","todaySale","x","isActive","todayMS","orders","order_date","order_status_id","grand_total","overallOrder","brandModel","isValidObjectId","uploadFile","addBrand","brand_name","brandLogo","logoUrl","files","brandData","newBrand","brand_id","push","getAllBrands","brands","getAllBrandByVendor","verifyBrandById","brandId","brandStatus","brand","businessModel","uploadImage","bannerModel","addBusinessInfo","bName","bEmail","bNumber","businessData","business_name","contactNo","contactEmail","businessExists","addBusinessGST","gsts","defaultGST","getBusinessInfo","business","addBusinessFiles","bLogo","bInvLogo","bPolicy","bTC","business_Logo","invoiceLogo","privacyPolicy","iAgree","setDefaultGst","gst","gstd","gstNo","pickupAddress","stateCode","saveSocialMedia","facebook","instagram","twitter","youtube","linkedin","socialMedia","bannerForClientPage","images","imageURL","bannerUrl","getBannerForClientPage","bannerDeleteById","bannerId","findByIdAndDelete","cancelledReasonModel","addCancelledReason","questions","customerAnswer","cancelledReasonData","newCancelledReason","cartModel","colorModel","addToCart","product_id","qty","lotSize","colorId","cart","customer_id","color","Number","colorName","colorHex","addedAt","toLocaleString","dataX","cartLength","getAllAbandentCarts","carts","$gte","$size","path","model","getCartByCustomerId","customerData","removeFromCart","index","arr","splice","json","qtyIncreaseDecrease","cartAmt_current","totalPrice","forEach","element","seller_price","sellingGST","price","marginAmt","toFixed","priceCal","totalPriceCalc","currentCoupon","minOrderAmt","categoryModel","subcategoryModel","addCategory","category_name","subCategory","categoryData","sub_category","insertMany","newCategory","getAllCategories","categories","getCategoryById","categoryId","category","updateCategoryById","el","isFound","innerEl","hasOwnProperty","toHexString","findOneAndUpdate","deletedAt","new","subCategoryCreated","objs","xId","deleteCategoryById","addNewColor","deleteColorById","getAllColor","colors","couponCodeModel","isExpiryCoupon","generateCoupon","couponCode","validTill","maxUsers","maxDiscPrice","discountType","discountAmt","createData","createdCoupon","applyCoupon","customerid","orderAmount","coupon","isExpired","isUsed","day","month","year","expiryDateMS","getAllCoupons","coupons","sort","createdAt","deleteCoupon","couponId","couponid","customerAddressModel","isValidRequestBody","stateAndCode","addCustomerInformation","pincode","address","state","city","addressData","Object","keys","cart_id","newAddress","defaultAddress","getAllAddresses","updateAddressByCustomerId","deleteAddressById","addressId","defaultAddressId","addAddress","isValidMoblie","isValidPassword","wishlistModel","loginUser","wishlist","wishlistLength","getAllCustomer","customers","getCustomerById","updateCustomerById","deleteCustomerById","blockCustomerById","findOrdersByPhone","userPhone","setDefaultAddress","changePassword","HomepageModel","recommendedProduct","storeInfo","getProductBySlug","slug","product","stockStatus","excelJs","csv2json","request","dateToLocalDateTime","checkProductIds","categoryIds","colorIds","vednorIdForx","x1","color_id","subCatId","exportProductAddDemoSheet","workbook","Workbook","worksheet","addWorksheet","columnData","header","key","product_name","skucode","hsncode","category_id","subcategory_id","lotsize","mrp","in_hand_qty","min_order_qty","sole","material","packing_type","made_in","weight","description","thumbnail_url","multiple_images","unshift","newColumnData","slice","columns","addRow","getRow","eachCell","cell","font","bold","fill","pattern","fgColor","argb","xlsx","write","then","exportIDs","worksheet2","cat","subcategory_name","vendors","singleVendor","firmName","lastRow","obj","column","lengths","values","map","v","maxLength","max","filter","width","csvToJson","vendorIds","csvUrl","csv","resJson","fromStream","get","subscribe","productData","sku_code","hsn_code","lotSizeQty","qty_in_hand","productDataArr","vendorArr","Obj","split","flatMap","trim","thumbnail_pic","multiple_pics","statusX","indexOf","newProductObj","vdr","prdct","e","exportOrderReport","$in","strictPopulate","ordersArr","orderData","productLength","order","orderId","saleInvoice","invoiceNo","invoiceDate","ordered_products","skuCode","selling_gst","seller_gst","soldBy","discounted_amount","total","gstType","GST_amount","pickupCity","pickupState","pickupPincode","vendorAmtInfo","grandTotal","purchaseInvoice","gstAmt","orderStatusList","statusList","updatedDate","updatedAt","updatedBy","orderCol","buyerCol","saleCol","sellerCol","purchaseCol","orderJourney","m","saleSkuCol","purchaseSkuCol","saleGstCol","purchaseGstCol","saleLotSizeCol","purchaseLotSizeCol","orderLen","buyerLen","saleLen","sellerLen","purchaseLen","height","colNum","border","top","style","right","bottom","left","addFeaturedProducts","newArrival","featuredProduct","bestSelling","home","getFeaturedProduct","removeFeaturedProduct","idx","findIndex","preFix","generateRandomAlphaNumericID","characters","initializeApp","getStorage","ref","getDownloadURL","uploadBytesResumable","aws","config","awsS3Bucket","awsAccessKey","awsSecretKey","awsS3Region","firebaseConfig","storage","giveCurrentDateTime","today","getHours","getMinutes","getSeconds","update","accessKeyId","secretAccessKey","region","blobFile","dateTime","storageRef","replace","metadata","contentType","mimetype","snapshot","downloadURL","image","Promise","resolve","reject","s3","S3","uploadParams","Bucket","Key","Body","ContentType","upload","Location","invoiceModel","invoiceNoModel","orderedProductModel","generatePdf","financialYear","generatePurchaseInvoice","order_id","gstAmount","totalAmount","invNo","invoiceNoType","fY","invoiceYear","invoiceNoLength","strInvNumber","invNumber","substring","invData","invoiceType","invoiceAddress","shippingAddress","billingAddress","invRes","invoice","generateSaleInvoice","getAllSaleInvoice","invoices","getAllPurchaseInvoice","downoadInvoiceByInvoiceNumber","invoiceNumber","invoicenumber","invoicetype","orderedProduct","logo","brandName","soldByAddress","soldByPhone","soldByGst","orderDate","billToName","billToAddress","billToPhone","billToGST","shipToName","shipToAddress","shipToPhone","shipToGST","tableRow","totalAmt","totalCGSTAmt","totalSGSTAmt","totalIGSTAmt","taxableAmt","totalTaxAmt","grossTotalAmt","netPayableAmount","count","isRemoved","trData","sno","productName","sizeSet","hsnCode","rate","cgstPercentage","cgstAmount","sgstPercentage","sgstAmount","igstPercentage","igstAmount","pdf","customerAddress","mrginAmt","paymentModel","orderStatusTableModel","createPayment","createOrder","address_id","payment_mode","paymentAmt","transaction_id","demoObj","orderAmt","mAmt","totalamt","p","selling_price","sellingGstAmt","currentTotal","vdrAmt","vdrGstAmt","odrObj","addedOrder","maxDiscount","discAmt","singleOrder","percentage","partPayment","payment","payment_id","paymentId","shipping_address","getAllOrders","getOrderByOrderId","getOrdersByCustomerId","customerOrders","cancelOrderByOrderId","Status","updateOrderByOrderId","orderType","cancelMessage","questionId","removedProductIds","partialCanceledAmt","partialCanceledGstAmt","orderedProductAmtInfo","productQty","orderedAmtInfo","s_product","canceledAmt","adminCancelledAmt","order_status","updatedByObj","statusObj","partialCancelOrderInfo","purchaseGstAmount","purchaseTotalAmount","singleOrderProduct","invDataPurchase","invDataSale","partial_payment","payment_amount","return_amount","balance_amount","order_amount","resData","resData2","cancelled","question","cancelledStatus","objOfCancelledStatusList","cancelledStatusList","cod_received","getOrderedProduct","orderedproductid","patchTrackingIdByOrderId","t_id","tracking_id","getAllCancelledOrder","cancelledOrders","createOrderStatusTable","cancelledObj","cancelledBy","reason","orderStatusTableData","isCompleted","OrderStatusTableData","getAllOrderStatusTables","allOrderStatusTables","getOrderStatusTableById","orderStatusTableId","orderStatusTable","updateOrderStatusByOrderId","bulkOrderProcess","orderIds","orderStatusTables","cancelOrderReturnById","twilioAccSID","twilioAuthToken","twilioVerifySID","accountSid","authToken","verifySid","client","sendOTP","isSent","verify","v2","services","verifications","to","channel","verification","catch","verityOTP","otpCode","verificationChecks","code","verification_check","valid","forgetPasswordUsingOtp","order_sortId","paymentData","payment_status","discount_amt","order_custom_id","transactionId","payment_date","updatePaymentStatus","addPayment","paymentDetails","partial_mode","ten_percent_amount","partialPaymentDetails","amount","firstPartialPayment","partialPaymentModel","partialPaymentData","remaining_amount","newPartialPayment","newPayment","twenty_percent_amount","reduce","sum","item","subCategoryModel","calculateMarginAndSelling","uploadMultipleImage","blob","addProduct","meta","JSON","parse","meta_title","metaTitle","meta_keywords","metaKeyword","meta_description","metaDescription","multipleImage","thumbnail","mulImg","Array","isArray","val","img","brandObj","categoryObj","subCatObj","getAllProducts","getProductById","productId","updateProductByProductId","gst_amount","stock_status","size_qty","primary_category","deleteProductByProductId","getAllProductsForDashboard","changeProductStatus","newStatus","changeProductStockStatus","newStockStatus","csvProduct","getAllProductsForFilter","updateProduct","singleFile","updateProfile","fullName","emailID","altPhone","newPass","oldPass","profileImg","imgRes","y","userid","questionModel","addQuestions","questionFor","questionObj","allQuestion","getAllQuestionByModel","getAllQuestion","deleteQuestionById","questionid","getOrderReport","$exists","exportSaleReport","startDate","endDate","invoice_no","invoice_date","order_qty","invoice_value","advance","discount","net_amount","refund","cash_on_delivery","buyer_name","buyer_no","exportPurchaseReport","seller_name","seller_phone","factorez_gst","purchase","gst_percentage","taxable_value","quantity","getPaymentReport","updatePaymentReport","orderid","paymentStatus","paidAmount","paymentDate","settlementAmt","paymentReportStatus","updateAt","logs","bankModel","documentModel","isValidGST","getAllVendors","addVendor","acHolderName","acNo","bankName","branch","ifsc","termsAndConditions","gstRegDoc","brandRegDoc","cancelledCheque","documentData","bankData","vendorData","document","bank","bank_id","document_id","auth_unique_id","db_unique_id","sharing_unique_id","createVendorByAdmin","basicInfoStatus","updateVendor","vendorObjId","brandX","addToWishlist","removeFromWishlist","wishlistId","findOneAndDelete","getWishlistProduct","Authentication","next","tokenWithBearer","authorization","decode","Authorization","tokenId","UserId","AuthenticationCustomer","mongoDbUrl","process","env","MONGO_DB_URL","TOKEN_SECRET_KEY","CUSTOMER_TOKEN_SECRET_KEY","port","PORT","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","measurementId","FIREBASE_MEASUREMENT_ID","ADMIN_SECRET_KEY","TWILIO_AUTH_TOKEN","TWILIO_ACCOUNT_SID","TWILIO_VERIFY_SID","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","S3_REGION","S3_BUCKET","dotenv","accessControls","checkUser","accessEnum","userData","AddProductRole","AllProductRole","PRODUCT","PRODUCT_ALL_PRODUCT","ACCESS","PRODUCT_DOWNLOAD","PRODUCT_EDIT","PRODUCT_VIEW","PRODUCT_ADD_PRODUCT","AllMenuRole","AllVendorRoles","VENDOR","VENDOR_DOWNLOAD","VENDOR_EDIT","VENDOR_VIEW","VENDOR_ADD_VENDOR","VENDOR_ALL_VENDOR","VENDOR_VENDOR_MOV","VENDOR_VENDOR_PAYMENT","AddProductColorRole","MANAGE_PRODUCT","PRODUCT_COLOR","AddProductBrandRole","BRAND","ManageOrderRole","ORDERS","ORDERS_ABANDONED_ORDERS","ORDERS_ALL_ORDERS","ORDERS_CHANGE_ORDER_STATUS","ORDERS_DOWNLOAD","ORDERS_EDIT","ORDERS_VIEW","colorRole","verifyProudct","PRODUCT_REVIEW","outOfStockProduct","abandonedOrderRole","mongoose","ObjectId","Schema","Types","homepageSchema","timestamps","listOfAccessControll","adminSchema","String","required","unique","enum","Boolean","default","bankSchema","bannerSchema","brandSchema","businessSchema","cancelledReasonSchema","cartSchema","categorySchema","colorSchema","couponCodeSchema","generatedBy","customerAddressSchema","customerSchema","documentSchema","invoiceSchema","invoiceStatus","invoiceNoSchema","orderSchema","shipping_charges","total_pairs","transport_bilty","orderStatusTableSchema","orderedProductSchema","otpSchema","expires","paymentSchema","slugify","productSchema","pre","this","lower","strict","questionSchema","subcategorySchema","vendorSchema","order_success","order_canclled","order_pending","order_inprogress","logistics_id","business_id","wishlistSchema","express","router","Router","adminController","post","put","delete","brandController","patch","categoryController","customerController","customerAddressController","orderController","orderStatusTableController","paymentController","productController","questionController","vendorController","dateToLocalDate","hr","min","ampm","MANAGE_MENU","ADD_CATEGORY","ADD_SUBCATEGORY","ADD_PRODUCT","ALL_PRODUCT","PRODUCT_SIZE","OUT_OF_STOCK_PRODUCTS","MANAGE_ORDERS","ALL_ORDERS","CONFIRM_ORDERS","SHIPPED_ORDER","PICKUP_PENDING","DELIVERED_ORDER","RTO_ORDER","RTO_DELIVERED","CANCEL_ORDER","PARTIAL_DELIVERED","HOLD","PICKUP_INITIATE","IMPORT_PINCODE","MANAGE_RETURN","RETURN_REQUEST","SETTLEMENT_REQUEST","REFUNDED","SETTLEMENT_REQUEST_CANCEL","ALL_USERS","MANAGE_COUPONS","ADD_COUPON","ALL_COUPON","MANAGE_SALES","HOMEPAGE_MANAGE","MANAGE_VENDOR","ADD_VENDOR","ALL_VENDOR","ALL_OUTSTANDING","ALL_SETTLED","ADD_EMPLOYEE","EXPORT_INFORMATION","COUPON","COUPON_VIEW","COUPON_EDIT","COUPON_DOWNLOAD","COUPON_ALL_COUPON","COUPON_ADD_NEW_COUPON","CUSTOMER","CUSTOMER_VIEW","CUSTOMER_EDIT","CUSTOMER_DOWNLOAD","CUSTOMER_ALL_CUSTOMER","CUSTOMER_CUSTOMER_ORDER_BY_PHONE","SETTING","SETTING_BUSINESS_INFO_SETTING","SETTING_HOMEPAGE_SETTING","REPORT","REPORT_VIEW","REPORT_DOWNLOAD","SUB_ADMIN","SUBADMIN_VIEW","SUBADMIN_DOWNLOAD","SUB_ADMIN_ALL_ADMIN","SUB_ADMIN_ADD_ADMIN","flat","z","Puppeteer","hbs","fs","footerText","templatePath","content","readFileSync","html","compile","template","browser","launch","headless","page","newPage","setContent","addStyleTag","format","printBackground","displayHeaderFooter","footerTemplate","close","currentYear","num","per","sellerAmount","sellingGst","baseAmount","basePlusMarginAmt","Punjab","Chandigarh","Uttarakhand","Haryana","Delhi","Rajasthan","Bihar","Sikkim","Nagaland","Manipur","Mizoram","Tripura","Meghalaya","Assam","Jharkhand","Odisha","Chattisgarh","Gujarat","Maharashtra","Karnataka","Goa","Lakshadweep","Kerela","Puducherry","Telangana","Ladakh","requestBody","objectId","value","isValidName","test","gmail","isValidImg","GST","isValidPrice","isValidStatus","isValidPin","pin","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","bodyParser","fileUpload","cors","app","productRoutes","categoryRoutes","brandRoutes","vendorRoutes","adminRoutes","colorRoutes","customerRoutes","orderRoutes","paymentRoutes","cartRoutes","questionRoutes","couponRoutes","businessRoutes","homepageRoutes","invoiceRoutes","optRoutes","orderStatusRoute","profileRoutes","reportRoutes","dashboardRoutes","wishlistRoutes","adminDashboardRoute","use","urlencoded","extended","connect","useNewUrlParser","listen"],"sourceRoot":""}